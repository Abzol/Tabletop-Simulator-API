{
    "docs": [
        {
            "location": "/",
            "text": "Introduction\n \n\n\nWelcome to \nLua Scripting\n in Tabletop Simulator! Scripting is an advanced feature and it\u2019s expected you already know something about it. However, for complete novices, check out this \nbeginners scripting guide to Lua\n created by MrStump, to help you along the way.\n\n\n\n\nA game is composed of one Global Script and zero to many Object Scripts. The Global Script is a script that lives in your game that can run background tasks and do general game management type functions. Object scripts are attached to an individual object. Objects are anything with a physical model in the game - chess piece, dice, decks, cards, bags, custom models, boards, etc. Both types of scripts can call the same functions, but Object scripts have access to a reference of the Object it is attached to with the \nself\n keyword.\n\n\nResources\n \n\n\nYou are able to follow the links on the left side of the page for available tools to help utiliz and learn the basics of scripting. When at the top of the page, you will see a link to the Lua API for documentation on all of the available Tabletop Simulator Lua functionality. Links on the right side of the page help navigate the article you are viewing.\n\n\nWriting Lua Scripts\n \n\n\nThe Lua code is written via our in-game code editor or via our \nOfficial Plugin for the Atom Text Editor\n. Lua scripts are stored in the .json file of the save game as a plain text string. There is no need for an external internet host for Lua scripts, everything is self-contained in your game\u2019s save file. Workshop uploads work the same way.",
            "title": "Introduction"
        },
        {
            "location": "/#introduction",
            "text": "Welcome to  Lua Scripting  in Tabletop Simulator! Scripting is an advanced feature and it\u2019s expected you already know something about it. However, for complete novices, check out this  beginners scripting guide to Lua  created by MrStump, to help you along the way.   A game is composed of one Global Script and zero to many Object Scripts. The Global Script is a script that lives in your game that can run background tasks and do general game management type functions. Object scripts are attached to an individual object. Objects are anything with a physical model in the game - chess piece, dice, decks, cards, bags, custom models, boards, etc. Both types of scripts can call the same functions, but Object scripts have access to a reference of the Object it is attached to with the  self  keyword.",
            "title": "Introduction"
        },
        {
            "location": "/#resources",
            "text": "You are able to follow the links on the left side of the page for available tools to help utiliz and learn the basics of scripting. When at the top of the page, you will see a link to the Lua API for documentation on all of the available Tabletop Simulator Lua functionality. Links on the right side of the page help navigate the article you are viewing.",
            "title": "Resources"
        },
        {
            "location": "/#writing-lua-scripts",
            "text": "The Lua code is written via our in-game code editor or via our  Official Plugin for the Atom Text Editor . Lua scripts are stored in the .json file of the save game as a plain text string. There is no need for an external internet host for Lua scripts, everything is self-contained in your game\u2019s save file. Workshop uploads work the same way.",
            "title": "Writing Lua Scripts"
        },
        {
            "location": "/overview/",
            "text": "Available scripting methods\n \n\n\nIn-Game Lua Editor\n \n\n\nYou can access the in-game Lua Editor by clicking on \nScripting\n on the top bar or by right clicking on an object, choosing Scripting, and then selecting Lua Editor from the contextual menu. In the Lua Editor, the tabs on the left of the editor let you switch between the Global and the Object scripts. Once your Lua code is written, you can use the \nSave and Play\n button to commit your changes to your save file and reload for quick iteration. \nSave and Play\n will only commit your script changes, any changes made that weren't scripting will be lost.\n\n\nThe advantage of this method is it requires no additional setup. However it lacks many features included in some of the other options.\n\n\n\n\nOfficial Atom Plugin\n \n\n\nThe preferred method of writing Lua scripts is using our Official Plugin for the Atom Text Editor. It has all of the functionality of the in-game editor plus line numbers, syntax highlighting, autocomplete, and a modern look. \nClick here for setup instructions.\n\n\n\n\nExternal Editor API\n \n\n\nIt is also possible to edit inside of other envionments which are not officially supported. Using the External Editor API it is possible to work in other enviornments (like Notepad++).\n\n\n\n\nWarning\n\n\nThis method does not, by default, include many features that Atom provides, like auto-completion of Tabletop Simulator functions/class members.\n\n\n\n\nLua Standard Libraries\n \n\n\nWe include a subset of the Lua standard libraries into our interpreter to provide a safe sandbox for user scripts to run.\n\n\n\n\n\n\n\n\nLibrary\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBasic\n\n\nThe basic methods. Includes assert, collectgarbage, error, print, select, type, tonumber, and tostring.\n\n\n\n\n\n\nBit32\n\n\nThe bit32 package.\n\n\n\n\n\n\nCoroutine\n\n\nThe coroutine package.\n\n\n\n\n\n\nDynamic\n\n\nThe dynamic package (introduced by MoonSharp).\n\n\n\n\n\n\nErrorHandling\n\n\nThe error handling methods: pcall and xpcall.\n\n\n\n\n\n\nGlobalConsts\n\n\nThe global constants: _G, _VERSION, and _MOONSHARP.\n\n\n\n\n\n\nMath\n\n\nThe math package.\n\n\n\n\n\n\nMetatables\n\n\nThe metatable methods : setmetatable, getmetatable, rawset, rawget, rawequal, and rawlen.\n\n\n\n\n\n\nOS_Time\n\n\nThe time methods of the os package: clock, difftime, date, and time.\n\n\n\n\n\n\nString\n\n\nThe string package.\n\n\n\n\n\n\nTable\n\n\nThe table package.\n\n\n\n\n\n\nTableIterators\n\n\nThe table iterators: next, ipairs, and pairs.\n\n\n\n\n\n\n\n\nFor further information\n \n\n\n\n\nOfficial Lua Website\n\n\nMoonSharp\n\n\n\n\nExample Mods\n \n\n\n\n\nBlackJack\n\n\nChess Clock\n\n\nRoulette\n\n\nInteractable",
            "title": "Overview"
        },
        {
            "location": "/overview/#available-scripting-methods",
            "text": "",
            "title": "Available scripting methods"
        },
        {
            "location": "/overview/#in-game-lua-editor",
            "text": "You can access the in-game Lua Editor by clicking on  Scripting  on the top bar or by right clicking on an object, choosing Scripting, and then selecting Lua Editor from the contextual menu. In the Lua Editor, the tabs on the left of the editor let you switch between the Global and the Object scripts. Once your Lua code is written, you can use the  Save and Play  button to commit your changes to your save file and reload for quick iteration.  Save and Play  will only commit your script changes, any changes made that weren't scripting will be lost.  The advantage of this method is it requires no additional setup. However it lacks many features included in some of the other options.",
            "title": "In-Game Lua Editor"
        },
        {
            "location": "/overview/#official-atom-plugin",
            "text": "The preferred method of writing Lua scripts is using our Official Plugin for the Atom Text Editor. It has all of the functionality of the in-game editor plus line numbers, syntax highlighting, autocomplete, and a modern look.  Click here for setup instructions.",
            "title": "Official Atom Plugin"
        },
        {
            "location": "/overview/#external-editor-api",
            "text": "It is also possible to edit inside of other envionments which are not officially supported. Using the External Editor API it is possible to work in other enviornments (like Notepad++).   Warning  This method does not, by default, include many features that Atom provides, like auto-completion of Tabletop Simulator functions/class members.",
            "title": "External Editor API"
        },
        {
            "location": "/overview/#lua-standard-libraries",
            "text": "We include a subset of the Lua standard libraries into our interpreter to provide a safe sandbox for user scripts to run.     Library  Description      Basic  The basic methods. Includes assert, collectgarbage, error, print, select, type, tonumber, and tostring.    Bit32  The bit32 package.    Coroutine  The coroutine package.    Dynamic  The dynamic package (introduced by MoonSharp).    ErrorHandling  The error handling methods: pcall and xpcall.    GlobalConsts  The global constants: _G, _VERSION, and _MOONSHARP.    Math  The math package.    Metatables  The metatable methods : setmetatable, getmetatable, rawset, rawget, rawequal, and rawlen.    OS_Time  The time methods of the os package: clock, difftime, date, and time.    String  The string package.    Table  The table package.    TableIterators  The table iterators: next, ipairs, and pairs.",
            "title": "Lua Standard Libraries"
        },
        {
            "location": "/overview/#for-further-information",
            "text": "Official Lua Website  MoonSharp",
            "title": "For further information"
        },
        {
            "location": "/overview/#example-mods",
            "text": "BlackJack  Chess Clock  Roulette  Interactable",
            "title": "Example Mods"
        },
        {
            "location": "/atom/",
            "text": "Atom is a free, open source, and cross-platform text editor created by \nGitHub\n:\n\n\n\n\nAtom is a text editor that's modern, approachable, yet hackable to the core - a tool you can customize to do anything but also use productively without ever touching a config file.\n\n\n\n\nWe created an official plugin for the Atom text editor to make writing Lua scripts for Tabletop Simulator super easy and fun!\n\n\nThis page provides a basic overview of how to install and use the plugin; if you would like a more in-depth explanation of its features and how to install/use it then please \nsee its documentation\n.\n\n\nOur official plugin introduces syntax highlighting, code autocompletion for the Tabletop Simulator Lua API, and functions to interact with the game. The in-game editor will continue to exist for quick access to scripts, but development on it will cease to continue.\n\n\nPrefer another text editor? Take look at our \nExternal Editor API\n to make your own plugin.\n\n\nFeatures\n \n\n\nThis is only a summarized list of features Atom offers. Check out a more complete documentation on the plugin specifically in the \nplugin wiki\n.\n\n\nSyntax Highlighting\n \n\n\nAll standard Lua syntax is highlighted in multiple colors to help with readability.\n\n\n\n\nCode Autocompletion\n \n\n\nThe entire Tabletop Simulator Lua Scripting API (with the exception of the Player class) has been added to the native Atom autocomplete system. Easily see all of the member variables and functions available to you with their parameters, return type, short description, and a link directly to our Knowledge Base with more information for that variable or function. Functions belonging to the Lua standard library classes such as math, coroutine, or os link directly to the official Lua documentation.\n\n\n\n\nTabletop Simulator Interactivity\n \n\n\nThe Atom plugin can directly connect to a running instance of Tabletop Simulator to get all of the existing Lua scripts on Objects and to call Save & Play. Both functions can be called directly from the Packages menu or the right click contextual menu. TTS must be running with the game loaded for these functions to work.\n\n\n\n\n\n\n\n\nCommand\n\n\nAction Taken\n\n\n\n\n\n\n\n\n\n\nGet Lua Scripts\n\n\nDownloads all existing scripts in a loaded Tabletop Simulator game with Atom. You will need to call Get Lua Scripts every time you change to a different game in TTS.\n\n\n\n\n\n\nSave & Play\n\n\nSaves all Lua files in Atom, uploads them to a loaded Tabletop Simulator game, and reloads the current game (same as Save & Play in the in-game editor).\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvery time you start up Atom, the cached local *.lua files are deleted.\n\n\n\n\nInstalling Atom\n \n\n\nDownload and install Atom \nfrom the official website\n.\n\n\nInstalling the Official Plugin\n \n\n\n\n\nClick on File -> Settings\n\n\nSelect the Install tab in Settings\n\n\nType in tabletopsimulator-lua into the search field and press the Enter key or click the Packages button\n\n\nClick the blue Install button for the tabletopsimulator-lua package\n\n\n\n\n\n\nSetting Up Atom\n \n\n\nTab Width\n \n\n\nBy default, Tabletop Simulator scripts use a tab width of four spaces. You are not required to adhere to this spacing. By default, Atom has a tab width of two spaces. To optionally make Atom default to a tab width of four spaces:\n\n\n\n\nClick on File -> Settings\n\n\nSelect the Settings tab in Settings\n\n\nScroll down to Tab Length\n\n\nSet the Tab Length to 4\n\n\n\n\n\n\nTabls as Pipe Operators\n \n\n\nTo enable tabs showing up as pipe operators \"|\" as an indent guide:\n\n\n\n\nClick on File -> Settings\n\n\nSelect the Settings tab in Settings\n\n\nScroll down to Show Indent Guide\n\n\nCheck Show Indent Guide\n\n\n\n\n\n\nUpdating Atom Plugin\n \n\n\nThe plugin will automatically check for updates when Atom is started. If a new update is found, it will update itself. You will have to manually restart Atom for the new version of the plugin to be loaded. You can check Atom's console if it found an update (ctrl + alt + i).\n\n\nAtom Tips\n \n\n\nThese are just a few basic tips to help get the most out of Atom.\n\n\n\n\nPrint Messages\n\n\nAll print() functions automatically send their messages to Atom's console (ctrl + alt + i).\n\n\n\n\n\n\nError Messages\n\n\nAll Lua errors are automatically sent to Atom's console (ctrl + alt + i).\n\n\n\n\n\n\nQuick Save + Play\n\n\nHitting Ctrl + Shift + S will trigger Save & Play.",
            "title": "Atom"
        },
        {
            "location": "/atom/#features",
            "text": "This is only a summarized list of features Atom offers. Check out a more complete documentation on the plugin specifically in the  plugin wiki .",
            "title": "Features"
        },
        {
            "location": "/atom/#syntax-highlighting",
            "text": "All standard Lua syntax is highlighted in multiple colors to help with readability.",
            "title": "Syntax Highlighting"
        },
        {
            "location": "/atom/#code-autocompletion",
            "text": "The entire Tabletop Simulator Lua Scripting API (with the exception of the Player class) has been added to the native Atom autocomplete system. Easily see all of the member variables and functions available to you with their parameters, return type, short description, and a link directly to our Knowledge Base with more information for that variable or function. Functions belonging to the Lua standard library classes such as math, coroutine, or os link directly to the official Lua documentation.",
            "title": "Code Autocompletion"
        },
        {
            "location": "/atom/#tabletop-simulator-interactivity",
            "text": "The Atom plugin can directly connect to a running instance of Tabletop Simulator to get all of the existing Lua scripts on Objects and to call Save & Play. Both functions can be called directly from the Packages menu or the right click contextual menu. TTS must be running with the game loaded for these functions to work.     Command  Action Taken      Get Lua Scripts  Downloads all existing scripts in a loaded Tabletop Simulator game with Atom. You will need to call Get Lua Scripts every time you change to a different game in TTS.    Save & Play  Saves all Lua files in Atom, uploads them to a loaded Tabletop Simulator game, and reloads the current game (same as Save & Play in the in-game editor).       \nEvery time you start up Atom, the cached local *.lua files are deleted.",
            "title": "Tabletop Simulator Interactivity"
        },
        {
            "location": "/atom/#installing-atom",
            "text": "Download and install Atom  from the official website .",
            "title": "Installing Atom"
        },
        {
            "location": "/atom/#installing-the-official-plugin",
            "text": "Click on File -> Settings  Select the Install tab in Settings  Type in tabletopsimulator-lua into the search field and press the Enter key or click the Packages button  Click the blue Install button for the tabletopsimulator-lua package",
            "title": "Installing the Official Plugin"
        },
        {
            "location": "/atom/#setting-up-atom",
            "text": "",
            "title": "Setting Up Atom"
        },
        {
            "location": "/atom/#tab-width",
            "text": "By default, Tabletop Simulator scripts use a tab width of four spaces. You are not required to adhere to this spacing. By default, Atom has a tab width of two spaces. To optionally make Atom default to a tab width of four spaces:   Click on File -> Settings  Select the Settings tab in Settings  Scroll down to Tab Length  Set the Tab Length to 4",
            "title": "Tab Width"
        },
        {
            "location": "/atom/#tabls-as-pipe-operators",
            "text": "To enable tabs showing up as pipe operators \"|\" as an indent guide:   Click on File -> Settings  Select the Settings tab in Settings  Scroll down to Show Indent Guide  Check Show Indent Guide",
            "title": "Tabls as Pipe Operators"
        },
        {
            "location": "/atom/#updating-atom-plugin",
            "text": "The plugin will automatically check for updates when Atom is started. If a new update is found, it will update itself. You will have to manually restart Atom for the new version of the plugin to be loaded. You can check Atom's console if it found an update (ctrl + alt + i).",
            "title": "Updating Atom Plugin"
        },
        {
            "location": "/atom/#atom-tips",
            "text": "These are just a few basic tips to help get the most out of Atom.   Print Messages  All print() functions automatically send their messages to Atom's console (ctrl + alt + i).    Error Messages  All Lua errors are automatically sent to Atom's console (ctrl + alt + i).    Quick Save + Play  Hitting Ctrl + Shift + S will trigger Save & Play.",
            "title": "Atom Tips"
        },
        {
            "location": "/externaleditorapi/",
            "text": "This page describes how our \nOfficial Atom Plugin\n API works so that you can write your own plugin for your text editor of choice if Atom does not suit your needs. The plugin communicates with Tabletop Simulator via two localhost TCP connections - one for each system acting as a server and the other as a client and vice versa. All communication messages are JSON.\n\n\nTabletop Simulator as the Server\n \n\n\n\n\nTTS listens for incoming localhost TCP connections on port 39999.\n\n\n\n\nGet Lua Scripts\n \n\n\nAtom sends a JSON message with an ID of 0.\n\n\n{\n\n    \n\"messageID\"\n:\n \n0\n\n\n}\n\n\n\n\n\nTTS sends back a JSON message with an ID of 0 and an array of the Lua Scripts.\n\n\n{\n\n    \n\"messageID\"\n:\n \n0\n,\n\n    \n\"scriptStates\"\n:\n \n[\n\n        \n{\n\n            \n\"name\"\n:\n \n\"Global\"\n,\n\n            \n\"guid\"\n:\n \n\"-1\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n{\n\n            \n\"name\"\n:\n \n\"BlackJack Dealer's Deck\"\n,\n\n            \n\"guid\"\n:\n \n\"a0b2d5\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n    \n]\n\n\n}\n\n\n\n\n\nSave & Play\n \n\n\nAtom sends a JSON message with an ID of 1 and an array of the Lua Scripts.\n\n\n{\n\n    \n\"messageID\"\n:\n \n1\n,\n\n    \n\"scriptStates\"\n:\n \n[\n\n        \n{\n\n            \n\"guid\"\n:\n \n\"-1\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n{\n\n            \n\"guid\"\n:\n \n\"a0b2d5\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n    \n]\n\n\n}\n\n\n\n\n\nAtom as the Server\n \n\n\n\n\nAtom listens for incoming localhost TCP connections on port 39998.\n\n\n\n\nPushing New Object\n \n\n\nWhen clicking on \"Lua Editor\" in the right click contextual menu in-game for an Object that doesn't have a Lua Script yet, it will try to open a new tab in Atom for this Object before falling back to the in-game editor if Atom is not running. TTS sends a JSON message with an ID of 0 and the new Object.\n\n\n{\n\n    \n\"messageID\"\n:\n \n0\n,\n\n    \n\"scriptStates\"\n:\n \n[\n\n        \n{\n\n            \n\"name\"\n:\n \n\"Chess Pawn\"\n,\n\n            \n\"guid\"\n:\n \n\"db3f06\"\n,\n\n            \n\"script\"\n:\n \n\"\"\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nLoading a New Game\n \n\n\nWhen loading a new game in TTS, TTS will automatically send all the Lua Scripts from the new game to Atom. TTS sends a JSON message with an ID of 1 and an array of the Lua Scripts.\n\n\n{\n\n    \n\"messageID\"\n:\n \n1\n,\n\n    \n\"scriptStates\"\n:\n \n[\n\n        \n{\n\n            \n\"name\"\n:\n \n\"Global\"\n,\n\n            \n\"guid\"\n:\n \n\"-1\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n{\n\n            \n\"name\"\n:\n \n\"BlackJack Dealer's Deck\"\n,\n\n            \n\"guid\"\n:\n \n\"a0b2d5\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n    \n]\n\n\n}\n\n\n\n\n\nPrint/Debug Messages\n \n\n\nTTS sends all print() messages to Atom to be displayed in Atom's console (ctrl + alt + i). TTS sends a JSON message with an ID of 2 and the message.\n\n\n{\n\n    \n\"messageID\"\n:\n \n2\n,\n\n    \n\"message\"\n:\n \n\"Hit player! White\"\n\n\n}\n\n\n\n\n\nError Messages\n \n\n\nTTS sends all Lua error messages to Atom to be displayed in Atom's console \n(ctrl + alt + i)\n. TTS sends a JSON message with an ID of 3 and the error message.\n\n\n{\n\n    \n\"messageID\"\n:\n \n3\n,\n\n    \n\"error\"\n:\n \n\"chunk_0:(36,4-8): unexpected symbol near 'deck'\"\n,\n\n    \n\"guid\"\n:\n \n\"-1\"\n,\n\n    \n\"errorMessagePrefix\"\n:\n \n\"Error in Global Script: \"\n\n\n}",
            "title": "External Editor API"
        },
        {
            "location": "/externaleditorapi/#tabletop-simulator-as-the-server",
            "text": "TTS listens for incoming localhost TCP connections on port 39999.",
            "title": "Tabletop Simulator as the Server"
        },
        {
            "location": "/externaleditorapi/#get-lua-scripts",
            "text": "Atom sends a JSON message with an ID of 0.  { \n     \"messageID\" :   0  }   TTS sends back a JSON message with an ID of 0 and an array of the Lua Scripts.  { \n     \"messageID\" :   0 , \n     \"scriptStates\" :   [ \n         { \n             \"name\" :   \"Global\" , \n             \"guid\" :   \"-1\" , \n             \"script\" :   \"...\" \n         }, \n         { \n             \"name\" :   \"BlackJack Dealer's Deck\" , \n             \"guid\" :   \"a0b2d5\" , \n             \"script\" :   \"...\" \n         }, \n     ]  }",
            "title": "Get Lua Scripts"
        },
        {
            "location": "/externaleditorapi/#save-play",
            "text": "Atom sends a JSON message with an ID of 1 and an array of the Lua Scripts.  { \n     \"messageID\" :   1 , \n     \"scriptStates\" :   [ \n         { \n             \"guid\" :   \"-1\" , \n             \"script\" :   \"...\" \n         }, \n         { \n             \"guid\" :   \"a0b2d5\" , \n             \"script\" :   \"...\" \n         }, \n     ]  }",
            "title": "Save &amp; Play"
        },
        {
            "location": "/externaleditorapi/#atom-as-the-server",
            "text": "Atom listens for incoming localhost TCP connections on port 39998.",
            "title": "Atom as the Server"
        },
        {
            "location": "/externaleditorapi/#pushing-new-object",
            "text": "When clicking on \"Lua Editor\" in the right click contextual menu in-game for an Object that doesn't have a Lua Script yet, it will try to open a new tab in Atom for this Object before falling back to the in-game editor if Atom is not running. TTS sends a JSON message with an ID of 0 and the new Object.  { \n     \"messageID\" :   0 , \n     \"scriptStates\" :   [ \n         { \n             \"name\" :   \"Chess Pawn\" , \n             \"guid\" :   \"db3f06\" , \n             \"script\" :   \"\" \n         } \n     ]  }",
            "title": "Pushing New Object"
        },
        {
            "location": "/externaleditorapi/#loading-a-new-game",
            "text": "When loading a new game in TTS, TTS will automatically send all the Lua Scripts from the new game to Atom. TTS sends a JSON message with an ID of 1 and an array of the Lua Scripts.  { \n     \"messageID\" :   1 , \n     \"scriptStates\" :   [ \n         { \n             \"name\" :   \"Global\" , \n             \"guid\" :   \"-1\" , \n             \"script\" :   \"...\" \n         }, \n         { \n             \"name\" :   \"BlackJack Dealer's Deck\" , \n             \"guid\" :   \"a0b2d5\" , \n             \"script\" :   \"...\" \n         }, \n     ]  }",
            "title": "Loading a New Game"
        },
        {
            "location": "/externaleditorapi/#printdebug-messages",
            "text": "TTS sends all print() messages to Atom to be displayed in Atom's console (ctrl + alt + i). TTS sends a JSON message with an ID of 2 and the message.  { \n     \"messageID\" :   2 , \n     \"message\" :   \"Hit player! White\"  }",
            "title": "Print/Debug Messages"
        },
        {
            "location": "/externaleditorapi/#error-messages",
            "text": "TTS sends all Lua error messages to Atom to be displayed in Atom's console  (ctrl + alt + i) . TTS sends a JSON message with an ID of 3 and the error message.  { \n     \"messageID\" :   3 , \n     \"error\" :   \"chunk_0:(36,4-8): unexpected symbol near 'deck'\" , \n     \"guid\" :   \"-1\" , \n     \"errorMessagePrefix\" :   \"Error in Global Script: \"  }",
            "title": "Error Messages"
        },
        {
            "location": "/learninglua/",
            "text": "In the future, there will be a \"Getting Started\" style Lua tutorial here, to help people just picking up the language or programming in general.\n\n\nFor now, please refer to these user guides for the same purpose:\n\n\n\n\nLearning Lua\n\n\nFirst steps, and introduction to programming.\n\n\n\n\n\n\nLearning MORE Lua\n\n\nMore complicated concepts and many coding examples to demonstrate commonly used functions.\n\n\n\n\n\n\nLearning Lua Functions\n\n\nA collection of utility functions to help in performing actions as well as demonstrate some better coding practices.",
            "title": "Learning Lua"
        },
        {
            "location": "/changelog/",
            "text": "This is an ongoing list of scripting changes that have been implemented to scripting side of Tabletop Simulator.\n\n\n5/9/18 - v10.5.1\n \n\n\n\n\n\n\nCustom UI:\n\n\nAdded UI.show(id) and UI.hide(id) for disabling and enabling ui with animations.\n\n\nNow support the Image tag for custom images. \n\n\nSupports overriding the look of the UI using this custom image support.\n\n\nFixed visibility attribute not working correctly on elements with no id attribute or layout tag.\n\n\nFixed offsetXY set/getAttribute() not working.\n\n\nAdded Tooltip attribute for all objects\n\n\n\n\n\n\n\n\n\n\n5/7/18 - v10.5\n \n\n\n\n\n\n\nAddition of XML Custom UI and associated documentation as part of this documentation.\n\n\nonSearchStart/onSearchEnd/onObjectSearchStart/onObjectSearchEnd added to Events.\n\n\nThe log() command's \"label\" and \"tag\" parameters were reversed to \nlog(object, label, tags)\n\n\nScripted object button changes\n\n\nThe click_function of scripted object buttons now passes an argument for alt_click. This allows determining if anything besides left click was used on the button (like right click)\n\n\nhover_color and press_color added as optional parameters\n\n\n\n\n\n\ngetJSON() and spawnObjectJSON() created.\n\n\nTurns global static class added\n\n\nMember variables for controlling how turns work\n\n\nNew event trigger for player turns beginning (onPlayerTurn)\n\n\nDevalued previous onPlayerTurn events\n\n\n\n\n\n\nChangelog moved under Getting Started due to the fact that it applies to the UI API as well as the scripting API. But I guess you figured that out already, didn't ya.\n\n\nAdded getJSON and spawnObjectJSON to Object/Base, respectively.\n\n\n\n\n\n\n3/26/18 - v10.4 Hotfix 2\n \n\n\n\n\n\n\nNew Tabletop Simulator Scripting Documentation is created.",
            "title": "Changelog"
        },
        {
            "location": "/changelog/#5918-v1051",
            "text": "Custom UI:  Added UI.show(id) and UI.hide(id) for disabling and enabling ui with animations.  Now support the Image tag for custom images.   Supports overriding the look of the UI using this custom image support.  Fixed visibility attribute not working correctly on elements with no id attribute or layout tag.  Fixed offsetXY set/getAttribute() not working.  Added Tooltip attribute for all objects",
            "title": "5/9/18 - v10.5.1"
        },
        {
            "location": "/changelog/#5718-v105",
            "text": "Addition of XML Custom UI and associated documentation as part of this documentation.  onSearchStart/onSearchEnd/onObjectSearchStart/onObjectSearchEnd added to Events.  The log() command's \"label\" and \"tag\" parameters were reversed to  log(object, label, tags)  Scripted object button changes  The click_function of scripted object buttons now passes an argument for alt_click. This allows determining if anything besides left click was used on the button (like right click)  hover_color and press_color added as optional parameters    getJSON() and spawnObjectJSON() created.  Turns global static class added  Member variables for controlling how turns work  New event trigger for player turns beginning (onPlayerTurn)  Devalued previous onPlayerTurn events    Changelog moved under Getting Started due to the fact that it applies to the UI API as well as the scripting API. But I guess you figured that out already, didn't ya.  Added getJSON and spawnObjectJSON to Object/Base, respectively.",
            "title": "5/7/18 - v10.5"
        },
        {
            "location": "/changelog/#32618-v104-hotfix-2",
            "text": "New Tabletop Simulator Scripting Documentation is created.",
            "title": "3/26/18 - v10.4 Hotfix 2"
        },
        {
            "location": "/intro/",
            "text": "In this section, you will find details on all events/classes/functions specific to Tabletop Simulator's Lua scripting. For more general information on how the scripting language of Lua works and what it does on its own, you can review the \nOfficial Lua Documentation\n. \n\n\nUsing TTS Documentation\n \n\n\nLeft Column\n \n\n\nThis is the top-level list of classes and other information needed when scripting with Lua in Tabletop Simulator. Event, Base and Object are the three pages you will use the most, with the rest referring to niche information you can access as you go. It is a good idea to familiarize yourself with the contents of those three pages in order to have a good high-level understanding of off what scripting is capable of doing.\n\n\nRight Column\n \n\n\nThe Table of Contents will lay out the contents of the page you are on. It always starts with high-level summary information first and, if needed, detailed information towards the bottom. The \n next to a summary element will take you directly down to the relevant detailed explanation below.\n\n\nGrowing TTS Documentation\n \n\n\nThis documentation is written via Markdown language and some custom CSS. The relevant files you can modify, as well as some detailed editing instructions, are listed on GitHub. You can make a pull request to made modifications/improvements that can be incorporated into this documentation.\n\n\nJust click the link in the pencil icon in the top-right of an article, or visit the GitHub page for more information by clicking GitHub Source in the far upper right.\n\n\n\n\nTTS Terms\n \n\n\nObject\n \n\n\nOn in-game physical Object that currently exists in the scene. If an Object is placed inside of a bag/deck/etc, it stops existing and is no longer in the scene until it is pulled back out.\n\n\nPlayer\n \n\n\nA person in the game. Each Player is assigned a color, with spectators being \"Grey\". If you are attempting to identify a Player, you would use the color of the seat they are in to do so.\n\n\nGlobal Script\n \n\n\nThe Global script, which is a script that is not attached to any particular Object. It is always present during a game.\n\n\nObject Script\n \n\n\nA script that is attached to an in-game Objecet, and is saved as part of it. This is similar to any other property like its scale or tint. Some functions ask for an Object reference in order to attempt to run a function on it. In these cases, Global (exactly as written here) is also a valid Object reference.\n\n\nGUID\n \n\n\nIn Tabletop Simulator, a GUID is a unique 6-character \nstring\n\u00a0which can be used to identify in-game \nObjects\n. GUIDs are automatically assigned when objects exist within the scene.\n\n\nIf an object is duplicated, it will sometimes have the same GUID for 1 frame before the engine assigns a new GUID to the newer Object. Objects in containers (bags/decks/etc) do not automatically get new GUIDs assigned to them in this way. Only once their contents are moved out into the scene.\n\n\nCustom Deck Card GUIDs\nWhen you first create a custom deck, all cards within the deck share the same GUID. If you need to reference individual GUIDs of cards, then the way to solve this is to lay out all cards from the deck at the same time to allow new GUIDs to be assigned by the game. \nThis tool\n can be used to simplify the process.\n\n\nTypes\n \n\n\nType refers to the type of information. You do not need to declare the type in Lua, but in this API you will see them indicated. This is only so you know what kind of information is required in a given variable/parameter. This API utilizes the following types.\n\n\n\n\n\n\n\n\nTag\n\n\nType\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nnil\n\n\nNo value.\n\n\nnil\n\n\n\n\n\n\n\u00a0\n\n\nint\n\n\nNon-decimal value.\n\n\n5\n\n\n\n\n\n\n\u00a0\n\n\nfloat\n\n\nNon-exact decimal value.\n\n\n2.032\n\n\n\n\n\n\n\u00a0\n\n\nbool\n\n\ntrue\n or \nfalse\n value.\n\n\ntrue\n\n\n\n\n\n\n\u00a0\n\n\nstring\n\n\nA series of characters.\n\n\n\"Hello.\"\n\n\n\n\n\n\n\u00a0\n\n\ntable\n\n\nA container with keys and values.\n\n\n{[\n\"key\"\n]\n=\n\"value\"\n,\n \ntrue\n,\n \n5\n}\n\n\n\n\n\n\n\u00a0\n\n\nobject\n\n\nAn in-game physical Object. Sometimes Global.\n\n\nGlobal\n \nor\n \nself\n\n\n\n\n\n\n\u00a0\n\n\nplayer\n\n\nAn in-game Player.\n\n\nPlayer\n[\n\"White\"\n]\n\n\n\n\n\n\n\u00a0\n\n\nvariable\n\n\nA combination of other types.\n\n\n\n\n\n\n\n\n\n\nYou will also see tags for Color and Vector. See below for more info.\n\n\n\n\nFor more information on a type, you can read below or refer to the relevant \nLua documentation\n.\n\n\n\n\n\n\nClasses\n \n\n\nDefining class requires further knowledge on object-oriented programming to really understand. However for the purposes of Tabletop Simulator Lua scripting, you can think of a class as a standard or collection that handles categories of objects.\n\n\nObject Classes\n \n\n\nAssociated with in-game Objects.\n\n\n\n\nClock\n\n\nCounter\n\n\nObject\n\n\nAssetBundle\n\n\nRPGFigurine\n\n\nTextTool\n\n\n\n\nStatic Classes\n \n\n\nAssociated with in-game properties and systems.\n\n\n\n\nJSON\n\n\nPlayer\n\n\nTimer\n\n\nWebRequest\n\n\nPhysics\n\n\nLighting\n\n\nTurns\n\n\nUI\n\n\n\n\nFor more information on what a class is, you can refer to the relevant \nLua Documentation\n.\n\n\n\n\nSpecial Standards\n \n\n\nThere are two types of Table that are used often in Tabletop Simulator. They represent Vectors and Colors, and their contents must be formatted a certain way to be utilized correctly.\n\n\nColor\n \n\n\nColor is a type of Table that is used to define RGB values for tinting.\n\n\nKeys\n \n\n\nThe Table will contain the keys \nr\n, \ng\n, \nb\n, \na\n and/or \n1\n, \n2\n, \n3\n, \n4\n. The letter and numeric keys are duplicates of each other, and each represents a color or transparency.\n\n\n\n\n\n\n\n\nColor\n\n\nLetter Key\n\n\nNumber Key\n\n\n\n\n\n\n\n\n\n\nred\n\n\nr\n\n\n1\n\n\n\n\n\n\ngreen\n\n\ng\n\n\n2\n\n\n\n\n\n\nblue\n\n\nb\n\n\n3\n\n\n\n\n\n\nalpha\n\n\na\n\n\n4\n\n\n\n\n\n\n\n\nAs an example, an Object with a white color tint would return this table:\n\n{\n\n    \nr\n=\n1\n,\n \ng\n=\n1\n,\n \nb\n=\n1\n,\n\n    \n1\n=\n1\n,\n \n2\n=\n1\n,\n \n3\n=\n1\n,\n\n\n}\n\n\n\n\nNotice it does not contain the \na\n or \n4\n keys. This is because currently only scripted buttons and scripted inputs utilize the alpha channel (transparency).\n\n\nMixed Keys\n \n\n\nOnly one type of key, number or letter, is required. If both a are present in a Table, the numeric key is ignored and only the \nletter key\n is used.\n\n\n--Valid Table for red\n\n\n{\nr\n=\n1\n,\n \ng\n=\n0\n,\n \nb\n=\n0\n}\n\n\n--Valid Table for blue\n\n\n{\n0\n,\n \n0\n,\n \n1\n}\n\n\n--This Table would be red.\n\n\n{\nr\n=\n1\n,\n \ng\n=\n0\n,\n \nb\n=\n0\n,\n \n0\n,\n \n0\n,\n \n1\n}\n\n\n\n\n\nValue\n \n\n\nValues are between 0 and 1 for each key. If you are using RGB color that is in 0-255, you can use simple math to convert to the proper value.\n\n--To display a color that is r=50, b=83, g=199\n\n\nself\n.\nsetColorTint\n({\n50\n/\n255\n,\n \n83\n/\n255\n,\n \n199\n/\n255\n})\n\n\n\n\n\n\nVector\n \n\n\nVector is a type of Table that is used to define a position, rotation or direction. \n\n\nKeys\n \n\n\nThe Table will contain the keys \nx\n, \ny\n, \nz\n and/or \n1\n, \n2\n, \n3\n. The letter and numeric keys are duplicates of each other.\n\n\n\n\n\n\n\n\nLetter Key\n\n\nNumber Key\n\n\n\n\n\n\n\n\n\n\nx\n\n\n1\n\n\n\n\n\n\ny\n\n\n2\n\n\n\n\n\n\nz\n\n\n3\n\n\n\n\n\n\n\n\nAs an example, An Object at coordinate X=5, Y=2, Z=-1 would return this table:\n\n{\n\n    \nx\n=\n5\n,\n \ny\n=\n2\n,\n \nz\n=-\n1\n,\n\n    \n1\n=\n5\n,\n \n2\n=\n2\n,\n \n3\n=-\n1\n,\n\n\n}\n\n\n\n\nMixed Keys\n \n\n\nOnly one type of key, number or letter, is required. If both a are present in a Table, the numeric key is ignored and only the \nletter key\n is used.\n\n\n--Valid Table for 1 to the right\n\n\n{\nx\n=\n1\n,\n \ny\n=\n0\n,\n \nz\n=\n0\n}\n\n\n--Valid Table for 1 unit forward\n\n\n{\n0\n,\n \n0\n,\n \n1\n}\n\n\n--This Table would be for 1 unit to the right.\n\n\n{\nx\n=\n1\n,\n \ny\n=\n0\n,\n \nz\n=\n0\n,\n \n0\n,\n \n0\n,\n \n1\n}\n\n\n\n\n\nValue Range\n \n\n\nThe range of values depend on the type of Vector you are using.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRange\n\n\n\n\n\n\n\n\n\n\nPosition\n\n\nA point in space.\n\n\nAny number within the bounds of the world.\n\n\n\n\n\n\nRotation\n\n\nAngle, in degrees.\n\n\n-180 to 180.\n\n\n\n\n\n\nDirection\n\n\nVector direction.\n\n\n-1 to 1.\n\n\n\n\n\n\n\n\nType Details\n \n\n\nPosition\n \n\n\nX is right/left, Y is up/down, Z is forward/back. A positional Vector can be either world or local. Most of Tabletop Simulator's functions use world positional Vectors.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nWorld\n\n\nThe center of the instance is \n{x=0, y=0, z=0}\n. That is usually near the tabletop's center.\n\n\n\n\n\n\nLocal\n\n\nThe center of the Object's model is \n{x=0, y=0, z=0}\n. The center of an Object is determined by the model's creator.\n\n\n\n\n\n\n\n\nConversion Between World/Local\npositionToWorld(...)\n and \npositionToLocal(...)\n can be used to convert between the two types.\nRotation\n \n\n\nX is pitch (nodding your head), Y is yaw (shaking you head), Z is roll (tilting your head).\n\n\nDirection\n \n\n\nX is right/left, Y is up/down, Z is forward/back.",
            "title": "Introduction"
        },
        {
            "location": "/intro/#using-tts-documentation",
            "text": "",
            "title": "Using TTS Documentation"
        },
        {
            "location": "/intro/#left-column",
            "text": "This is the top-level list of classes and other information needed when scripting with Lua in Tabletop Simulator. Event, Base and Object are the three pages you will use the most, with the rest referring to niche information you can access as you go. It is a good idea to familiarize yourself with the contents of those three pages in order to have a good high-level understanding of off what scripting is capable of doing.",
            "title": "Left Column"
        },
        {
            "location": "/intro/#right-column",
            "text": "The Table of Contents will lay out the contents of the page you are on. It always starts with high-level summary information first and, if needed, detailed information towards the bottom. The   next to a summary element will take you directly down to the relevant detailed explanation below.",
            "title": "Right Column"
        },
        {
            "location": "/intro/#growing-tts-documentation",
            "text": "This documentation is written via Markdown language and some custom CSS. The relevant files you can modify, as well as some detailed editing instructions, are listed on GitHub. You can make a pull request to made modifications/improvements that can be incorporated into this documentation.  Just click the link in the pencil icon in the top-right of an article, or visit the GitHub page for more information by clicking GitHub Source in the far upper right.",
            "title": "Growing TTS Documentation"
        },
        {
            "location": "/intro/#tts-terms",
            "text": "",
            "title": "TTS Terms"
        },
        {
            "location": "/intro/#object",
            "text": "On in-game physical Object that currently exists in the scene. If an Object is placed inside of a bag/deck/etc, it stops existing and is no longer in the scene until it is pulled back out.",
            "title": "Object"
        },
        {
            "location": "/intro/#player",
            "text": "A person in the game. Each Player is assigned a color, with spectators being \"Grey\". If you are attempting to identify a Player, you would use the color of the seat they are in to do so.",
            "title": "Player"
        },
        {
            "location": "/intro/#global-script",
            "text": "The Global script, which is a script that is not attached to any particular Object. It is always present during a game.",
            "title": "Global Script"
        },
        {
            "location": "/intro/#object-script",
            "text": "A script that is attached to an in-game Objecet, and is saved as part of it. This is similar to any other property like its scale or tint. Some functions ask for an Object reference in order to attempt to run a function on it. In these cases, Global (exactly as written here) is also a valid Object reference.",
            "title": "Object Script"
        },
        {
            "location": "/intro/#guid",
            "text": "In Tabletop Simulator, a GUID is a unique 6-character  string \u00a0which can be used to identify in-game  Objects . GUIDs are automatically assigned when objects exist within the scene.  If an object is duplicated, it will sometimes have the same GUID for 1 frame before the engine assigns a new GUID to the newer Object. Objects in containers (bags/decks/etc) do not automatically get new GUIDs assigned to them in this way. Only once their contents are moved out into the scene.  Custom Deck Card GUIDs When you first create a custom deck, all cards within the deck share the same GUID. If you need to reference individual GUIDs of cards, then the way to solve this is to lay out all cards from the deck at the same time to allow new GUIDs to be assigned by the game.  This tool  can be used to simplify the process.",
            "title": "GUID"
        },
        {
            "location": "/intro/#types",
            "text": "Type refers to the type of information. You do not need to declare the type in Lua, but in this API you will see them indicated. This is only so you know what kind of information is required in a given variable/parameter. This API utilizes the following types.     Tag  Type  Description  Example      \u00a0  nil  No value.  nil    \u00a0  int  Non-decimal value.  5    \u00a0  float  Non-exact decimal value.  2.032    \u00a0  bool  true  or  false  value.  true    \u00a0  string  A series of characters.  \"Hello.\"    \u00a0  table  A container with keys and values.  {[ \"key\" ] = \"value\" ,   true ,   5 }    \u00a0  object  An in-game physical Object. Sometimes Global.  Global   or   self    \u00a0  player  An in-game Player.  Player [ \"White\" ]    \u00a0  variable  A combination of other types.      You will also see tags for Color and Vector. See below for more info.   For more information on a type, you can read below or refer to the relevant  Lua documentation .",
            "title": "Types"
        },
        {
            "location": "/intro/#classes",
            "text": "Defining class requires further knowledge on object-oriented programming to really understand. However for the purposes of Tabletop Simulator Lua scripting, you can think of a class as a standard or collection that handles categories of objects.",
            "title": "Classes"
        },
        {
            "location": "/intro/#object-classes",
            "text": "Associated with in-game Objects.   Clock  Counter  Object  AssetBundle  RPGFigurine  TextTool",
            "title": "Object Classes"
        },
        {
            "location": "/intro/#static-classes",
            "text": "Associated with in-game properties and systems.   JSON  Player  Timer  WebRequest  Physics  Lighting  Turns  UI   For more information on what a class is, you can refer to the relevant  Lua Documentation .",
            "title": "Static Classes"
        },
        {
            "location": "/intro/#special-standards",
            "text": "There are two types of Table that are used often in Tabletop Simulator. They represent Vectors and Colors, and their contents must be formatted a certain way to be utilized correctly.",
            "title": "Special Standards"
        },
        {
            "location": "/intro/#color",
            "text": "Color is a type of Table that is used to define RGB values for tinting.",
            "title": "Color"
        },
        {
            "location": "/intro/#keys",
            "text": "The Table will contain the keys  r ,  g ,  b ,  a  and/or  1 ,  2 ,  3 ,  4 . The letter and numeric keys are duplicates of each other, and each represents a color or transparency.     Color  Letter Key  Number Key      red  r  1    green  g  2    blue  b  3    alpha  a  4     As an example, an Object with a white color tint would return this table: { \n     r = 1 ,   g = 1 ,   b = 1 , \n     1 = 1 ,   2 = 1 ,   3 = 1 ,  }   Notice it does not contain the  a  or  4  keys. This is because currently only scripted buttons and scripted inputs utilize the alpha channel (transparency).",
            "title": "Keys"
        },
        {
            "location": "/intro/#mixed-keys",
            "text": "Only one type of key, number or letter, is required. If both a are present in a Table, the numeric key is ignored and only the  letter key  is used.  --Valid Table for red  { r = 1 ,   g = 0 ,   b = 0 }  --Valid Table for blue  { 0 ,   0 ,   1 }  --This Table would be red.  { r = 1 ,   g = 0 ,   b = 0 ,   0 ,   0 ,   1 }",
            "title": "Mixed Keys"
        },
        {
            "location": "/intro/#value",
            "text": "Values are between 0 and 1 for each key. If you are using RGB color that is in 0-255, you can use simple math to convert to the proper value. --To display a color that is r=50, b=83, g=199  self . setColorTint ({ 50 / 255 ,   83 / 255 ,   199 / 255 })",
            "title": "Value"
        },
        {
            "location": "/intro/#vector",
            "text": "Vector is a type of Table that is used to define a position, rotation or direction.",
            "title": "Vector"
        },
        {
            "location": "/intro/#keys_1",
            "text": "The Table will contain the keys  x ,  y ,  z  and/or  1 ,  2 ,  3 . The letter and numeric keys are duplicates of each other.     Letter Key  Number Key      x  1    y  2    z  3     As an example, An Object at coordinate X=5, Y=2, Z=-1 would return this table: { \n     x = 5 ,   y = 2 ,   z =- 1 , \n     1 = 5 ,   2 = 2 ,   3 =- 1 ,  }",
            "title": "Keys"
        },
        {
            "location": "/intro/#mixed-keys_1",
            "text": "Only one type of key, number or letter, is required. If both a are present in a Table, the numeric key is ignored and only the  letter key  is used.  --Valid Table for 1 to the right  { x = 1 ,   y = 0 ,   z = 0 }  --Valid Table for 1 unit forward  { 0 ,   0 ,   1 }  --This Table would be for 1 unit to the right.  { x = 1 ,   y = 0 ,   z = 0 ,   0 ,   0 ,   1 }",
            "title": "Mixed Keys"
        },
        {
            "location": "/intro/#value-range",
            "text": "The range of values depend on the type of Vector you are using.     Type  Description  Range      Position  A point in space.  Any number within the bounds of the world.    Rotation  Angle, in degrees.  -180 to 180.    Direction  Vector direction.  -1 to 1.",
            "title": "Value Range"
        },
        {
            "location": "/intro/#type-details",
            "text": "",
            "title": "Type Details"
        },
        {
            "location": "/intro/#position",
            "text": "X is right/left, Y is up/down, Z is forward/back. A positional Vector can be either world or local. Most of Tabletop Simulator's functions use world positional Vectors.     Type  Description      World  The center of the instance is  {x=0, y=0, z=0} . That is usually near the tabletop's center.    Local  The center of the Object's model is  {x=0, y=0, z=0} . The center of an Object is determined by the model's creator.     Conversion Between World/Local positionToWorld(...)  and  positionToLocal(...)  can be used to convert between the two types.",
            "title": "Position"
        },
        {
            "location": "/intro/#rotation",
            "text": "X is pitch (nodding your head), Y is yaw (shaking you head), Z is roll (tilting your head).",
            "title": "Rotation"
        },
        {
            "location": "/intro/#direction",
            "text": "X is right/left, Y is up/down, Z is forward/back.",
            "title": "Direction"
        },
        {
            "location": "/event/",
            "text": "Events are functions which are activated by Tabletop Simulator when something takes place in-game. It is possible to use all of them within scripts on Objects, and most will also work in Global scripts.\n\n\nMany contain parameters which can be used to utilize additional information related to the event.\n\n\nFunction Summary\n \n\n\nDefault Events (Global & Object)\n \n\n\nThese are functions which are triggered by an event taking place in-game. They work when within the script of an Object or the Global script.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nonChat(\n\u00a0message, \n\u00a0sender)\n\n\nCalled when a chat message is sent in game chat.\n\n\n\n\n\n\n\n\nonExternalMessage(\n\u00a0data)\n\n\nCalled when an external script editor (like \nAtom\n) sends a message back to the game. Used for custom editor functionality.\n\n\n\n\n\n\n\n\nonFixedUpdate()\n\n\nCalled \nevery physics tick\n (90 times a second). This is a frame independent onUpdate().\n\n\n\n\n\n\n\n\nonLoad(\n\u00a0save_state)\n\n\nCalled when a game save is finished loading every Object. It is where most setup code will go.\n\n\n\n\n\n\n\n\nonObjectDestroy(\n\u00a0dying_object)\n\n\nCalled whenever any object is destroyed.\n\n\n\n\n\n\n\n\nonObjectDrop(\n\u00a0player_color, \n\u00a0dropped_object)\n\n\nCalled whenever any object is dropped by a player.\n\n\n\n\n\n\n\n\nonObjectEnterScriptingZone(\n\u00a0zone, \n\u00a0enter_object)\n\n\nCalled when any object enters any scripting zone.\n\n\n\n\n\n\n\n\nonObjectLeaveScriptingZone(\n\u00a0zone, \n\u00a0enter_object)\n\n\nCalled when any object leaves any scripting zone.\n\n\n\n\n\n\n\n\nonObjectLeaveContainer(\n\u00a0container, \n\u00a0leave_object)\n\n\nCalled when any object leaves any container.\n\n\n\n\n\n\n\n\nonObjectLoopingEffect(\n\u00a0loop_object, \n\u00a0index)\n\n\nCalled whenever the looping effect of an \nAssetBundle\n is activated.\n\n\n\n\n\n\n\n\nonObjectPickUp(\n\u00a0player_color, \n\u00a0picked_up_object)\n\n\nCalled whenever a Player picks up an Object.\n\n\n\n\n\n\n\n\nonObjectRandomize(\n\u00a0randomize_object, \n\u00a0player_color)\n\n\nCalled when an Object is randomized. Like when shuffling a deck or shaking dice.\n\n\n\n\n\n\n\n\nonObjectSearchEnd(\n\u00a0obj, \n\u00a0player_color)\n\n\nCalled when a search is finished on any container.\n\n\n\n\n\n\n\n\nonObjectSearchStart(\n\u00a0obj, \n\u00a0player_color)\n\n\nCalled when a search is started on any container.\n\n\n\n\n\n\n\n\nonObjectSpawn(\n\u00a0spawn_object)\n\n\nCalled when any Object is spawned/created.\n\n\n\n\n\n\n\n\nonObjectTriggerEffect(\n\u00a0trigger_object, \n\u00a0index)\n\n\nCalled whenever the trigger effect of an \nAssetBundle\n is activated.\n\n\n\n\n\n\n\n\nonPlayerChangeColor(\n\u00a0player_color)\n\n\nCalled when a player changes color or selects it for the first time. It also returns \n\"Grey\"\n if they disconnect.\n\n\n\n\n\n\n\n\nonPlayerConnect(\n\u00a0person)\n\n\nCalled when a \nPlayer\n connects to a game.\n\n\n\n\n\n\n\n\nonPlayerDisconnect(\n\u00a0person)\n\n\nCalled when a \nPlayer\n disconnects from a game.\n\n\n\n\n\n\n\n\nonPlayerTurn(\n\u00a0player_color)\n\n\nCalled at the start of a player's turn when using the in-game turn system.\n\n\n\n\n\n\n\n\nonSave()\n\n\nCalled whenever your game is saved.\n\n\n\n\n\n\n\n\nonScriptingButtonDown(\n\u00a0index, \n\u00a0player_color)\n\n\nCalled when a scripting button (numpad by default) is pressed. The index range that is returned is 1-10.\n\n\n\n\n\n\n\n\nonScriptingButtonUp(\n\u00a0index, \n\u00a0player_color)\n\n\nCalled when a scripting button (numpad by default) is released. The index range that is returned is 1-10.\n\n\n\n\n\n\n\n\nonUpdate()\n\n\nCalled \nevery frame\n.\n\n\n\n\n\n\n\n\n\n\nDefault Events (Object Only)\n \n\n\nThese are functions which are triggered by an event taking place in-game. They only work within scripts that are on Objects, never in Global.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nonCollisionEnter(\n\u00a0collision_info)\n\n\nCalled when an Object starts colliding with the Object the function is on.\n\n\n\n\n\n\n\n\nonCollisionExit(\n\u00a0collision_info)\n\n\nCalled when an Object stops colliding with the Object the function is on.\n\n\n\n\n\n\n\n\nonCollisionStay(\n\u00a0collision_info)\n\n\nCalled \nevery frame\n that an Object is colliding with the Object this function is on.\n\n\n\n\n\n\n\n\nonDestroy()\n\n\nCalled when an Object it is on is destroyed.\n\n\n\n\n\n\n\n\nonDrop(\n\u00a0player_color)\n\n\nCalled when a player releases an Object after picking it up.\n\n\n\n\n\n\n\n\nonPickUp(\n\u00a0player_color)\n\n\nCalled when a player picks up an Object.\n\n\n\n\n\n\n\n\nonSearchEnd(\n\u00a0player_color)\n\n\nCalled when a player first searches this Object.\n\n\n\n\n\n\n\n\nonSearchStart(\n\u00a0player_color)\n\n\nCalled when a player finishes searching this Object.\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details (Global & Object)\n \n\n\nonChat(...)\n \n\n\nThis function is called when a message is sent through the in-game chat. It does not trigger when global chat messages are sent. Using \nreturn\n \nfalse\n inside of this function prevents the chat message which triggered it to be suppressed.\n\n\n\n\nonChat(message, sender)\n\n\n\n\n\u00a0\nmessage\n: Chat message which triggered the function.\n\n\n\u00a0\nsender\n: Player which sent the chat message.\n\n\n\n\n\n\nfunction\n \nonChat\n(\nmessage\n,\n \nplayer\n)\n\n    \nprint\n(\nmessage\n)\n\n    \nprint\n(\nplayer\n.\ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nonExternalMessage(...)\n \n\n\nThis function is called when an external script editor (like \nAtom\n) sends a message back to the game. Used for custom editor functionality.\n\n\n\n\nonExternalMessage(data)\n\n\n\n\n\u00a0\ndata\n: The data returned by the external editor into the game.\n\n\n\n\n\n\nfunction\n \nonExternalMessage\n(\ndata\n)\n\n    \nprint\n(\n\"External message received\"\n)\n\n\nend\n\n\n\n\n\n\n\nonFixedUpdate()\n \n\n\nCalled \nevery physics tick\n (90 times a second). This is a frame independent onUpdate().\n\n\n\n\nWarning\n\n\nThis is a very expensive function and can easily slow/crash your game if misused. Use with caution.\n\n\n\n\nfunction\n \nonFixedUpdate\n()\n\n    \nself\n.\naddTorque\n({\n0\n,\n100\n,\n0\n},\n \n1\n)\n\n\nend\n\n\n\n\n\nonLoad(...)\n \n\n\nThis function is called when a game save is finished loading every Object. This is where most setup code will go. The fast-forward and rewind feature will also cause this function to activate. If this function is in an Object's script and that Object is spawned, like by removing it from a container, it too will trigger onLoad().\n\n\n\n\nonLoad(save_state)\n\n\n\n\n\u00a0\nsave_state\n: The encoded string containing any save_state (saved) data.\n\n\nIf there is no data saved, this returns an empty String.\n\n\n\n\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nprint\n(\n\"Loading complete\"\n)\n\n\nend\n\n\n\n\n\nExample of onLoad and onSave being used to save/load data\n-- Runs whenever game is saved/autosaved\n\n\nfunction\n \nonSave\n()\n\n    \nlocal\n \ndata_to_save\n \n=\n \n{\nsomeData\n=\n50\n}\n\n    \nsaved_data\n \n=\n \nJSON\n.\nencode\n(\ndata_to_save\n)\n\n    \n--saved_data = \"\" --Remove -- at start & save to clear save data\n\n    \nreturn\n \nsaved_data\n\n\nend\n\n\n\n-- Runs when game is loaded\n\n\nfunction\n \nonLoad\n(\nsaved_data\n)\n\n    \n-- Loads the tracking for if the game has started yet\n\n    \nif\n \nsaved_data\n \n~=\n \n\"\"\n \nthen\n\n        \nlocal\n \nloaded_data\n \n=\n \nJSON\n.\ndecode\n(\nsaved_data\n)\n\n        \nsomeData\n \n=\n \nloaded_data\n.\nsomeData\n\n    \nelse\n\n        \nsomeData\n \n=\n \n50\n\n    \nend\n\n\nend\n\n\n\n\n\n\nonObjectDestroy(...)\n \n\n\nCalled whenever any object is destroyed. The dying Object has 1 frame left to live. This event fires immediately before the dying Object\u2019s \nonDestroy()\n but their lifetime is the same final frame.\n\n\n\n\nonObjectDestroy(dying_object)\n\n\n\n\n\u00a0\ndying_object\n: The object that was destroyed.\n\n\n\n\n\n\nfunction\n \nonObjectDestroy\n(\ndestroyedObj\n)\n\n    \nprint\n(\ndestroyedObj\n.\ngetName\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectDrop(...)\n \n\n\nCalled whenever any object is dropped by a player.\n\n\n\n\nonObjectDrop(player_color, dropped_object)\n\n\n\n\n\u00a0\nplayer_color\n: \nPlayer Color\n of the Player who dropped the Object.\n\n\n\u00a0\ndropped_object\n: The Object in game which was dropped.\n\n\n\n\n\n\nfunction\n \nonObjectDrop\n(\ncolorName\n,\n \nobj\n)\n\n    \nprint\n(\ncolorName\n \n..\n \n\" dropped \"\n \n..\n \nobj\n.\ngetName\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectEnterScriptingZone(...)\n \n\n\nCalled when any object enters any scripting zone.\n\n\n\n\nonObjectEnterScriptingZone(zone, enter_object)\n\n\n\n\n\u00a0\nzone\n: The Object of the scripting zone.\n\n\n\u00a0\nenter_object\n: The Object triggering the function.\n\n\n\n\n\n\nfunction\n \nonObjectEnterScriptingZone\n(\nzone\n,\n \nobj\n)\n\n    \nprint\n(\nobj\n.\ngetGUID\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectLeaveScriptingZone(...)\n \n\n\nCalled when any object leaves any scripting zone.\n\n\n\n\nonObjectLeaveScriptingZone(zone, enter_object)\n\n\n\n\n\u00a0\nzone\n: The Object of the scripting zone.\n\n\n\u00a0\nenter_object\n: The Object triggering the function.\n\n\n\n\n\n\nfunction\n \nonObjectLeaveScriptingZone\n(\nzone\n,\n \nobj\n)\n\n    \nprint\n(\nobj\n.\ngetGUID\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectLeaveContainer(...)\n \n\n\nCalled when any object leaves any container.\n\n\n\n\nonObjectLeaveContainer(container, leave_object)\n\n\n\n\n\u00a0\ncontainer\n: Container the object left.\n\n\n\u00a0\nleave_object\n: Object that left the container.\n\n\n\n\n\n\nfunction\n \nonObjectLeaveContainer\n(\nbag\n,\n \nobj\n)\n\n    \nprint\n(\nbag\n)\n\n    \nprint\n(\nobj\n)\n\n\nend\n\n\n\n\n\n\n\nonObjectLoopingEffect(...)\n \n\n\nCalled whenever the looping effect of an \nAssetBundle\n is activated.\n\n\n\n\nonObjectLoopingEffect(loop_object, index)\n\n\n\n\n\u00a0\nloop_object\n: AssetBundle which had its loop activated.\n\n\n\u00a0\nindex\n: Index number for the loop activated.\n\n\n\n\n\n\nfunction\n \nonObjectLoopingEffect\n(\nobj\n,\n \nindex\n)\n\n    \nprint\n(\n\"Loop \"\n \n..\n \nindex\n \n..\n \n\" activated.\"\n)\n\n\nend\n\n\n\n\n\n\n\nonObjectPickUp(...)\n \n\n\nCalled whenever a Player picks up an Object.\n\n\n\n\nonObjectPickUp(player_color, picked_up_object)\n\n\n\n\n\u00a0\nplayer_color\n: \nPlayer Color\n of the Player who picked up the object.\n\n\n\u00a0\npicked_up_object\n: The Object in game which was picked up.\n\n\n\n\n\n\nfunction\n \nonObjectPickUp\n(\ncolorName\n,\n \nobj\n)\n\n    \nprint\n(\ncolorName\n \n..\n \n\" picked up \"\n \n..\n \nobj\n.\ngetName\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectRandomize(...)\n \n\n\nCalled when an Object is randomized. Like when shuffling a deck or shaking dice.\n\n\n\n\nonObjectRandomize(randomize_object, player_color)\n\n\n\n\n\u00a0\nspawn_object\n: The Object which triggered this function.\n\n\n\u00a0\nplayer_color\n: \nPlayer Color\n of the player who triggered the function.\n\n\n\n\n\n\nfunction\n \nonObjectRandomize\n(\nobj\n,\n \ncolor\n)\n\n    \nprint\n(\nobj\n.\ngetName\n()\n \n..\n \n\" was randomized by \"\n \n..\n \ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nonObjectSearchEnd(...)\n \n\n\nCalled when a search is finished on any container.\n\n\n\n\nonObjectSearchEnd(obj, player_color)\n\n\n\n\n\n\n\u00a0\nobj\n: The Object which was searched.\n\n\n\u00a0\nplayer_color\n: \nPlayer Color\n of the player who triggered the function.\n\n\n\n\n\n\nonObjectSearchStart(...)\n \n\n\nCalled when a search is started on any container.\n\n\n\n\nonObjectSearchStart(obj, player_color)\n\n\n\n\n\n\n\u00a0\nobj\n: The Object which was searched.\n\n\n\u00a0\nplayer_color\n: \nPlayer Color\n of the player who triggered the function.\n\n\n\n\n\n\nonObjectSpawn(...)\n \n\n\nCalled when any Object is spawned/created.\n\n\n\n\nonObjectSpawn(spawn_object)\n\n\n\n\n\u00a0\nspawn_object\n: The Object which triggered this function.\n\n\n\n\n\n\nfunction\n \nonObjectSpawn\n(\nobj\n)\n\n    \nprint\n(\nobj\n)\n\n\nend\n\n\n\n\n\n\n\nonObjectTriggerEffect(...)\n \n\n\nCalled whenever the trigger effect of an \nAssetBundle\n is activated.\n\n\n\n\nonObjectTriggerEffect(loop_object, index)\n\n\n\n\n\u00a0\nloop_object\n: AssetBundle which had its trigger activated.\n\n\n\u00a0\nindex\n: Index number for the trigger activated.\n\n\n\n\n\n\nfunction\n \nonObjectTriggerEffect\n(\nobj\n,\n \nindex\n)\n\n    \nprint\n(\n\"Loop \"\n \n..\n \nindex\n \n..\n \n\" activated.\"\n)\n\n\nend\n\n\n\n\n\n\n\nonPlayerChangeColor(...)\n \n\n\nCalled when a player changes color or selects it for the first time. It also returns \n\"Grey\"\n if they disconnect.\n\n\n\n\nonPlayerChangeColor(player_color)\n\n\n\n\n\u00a0\nplayer_color\n: \nPlayer Color\n of the player who triggered the function.\n\n\n\n\n\n\nfunction\n \nonPlayerChangeColor\n(\ncolor\n)\n\n    \nprint\n(\ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nonPlayerConnect(...)\n \n\n\nCalled when a \nPlayer\n connects to a game.\n\n\n\n\nonPlayerConnect(person)\"\n\n\n\n\n\u00a0\nperson\n: Player reference to who connected.\n\n\n\n\n\n\n\n\nonPlayerDisconnect(...)\n \n\n\nCalled when a \nPlayer\n disconnects from a game.\n\n\n\n\nonPlayerDisconnect(person)\"\n\n\n\n\n\u00a0\nperson\n: Player reference to who disconnected.\n\n\n\n\n\n\n\n\nonPlayerTurn(...)\n \n\n\nCalled at the end of a player's turn when using the in-game turn system.\n\n\n\n\nonPlayerTurn(player_color)\n\n\n\n\n\u00a0\nplayer_color\n: \nPlayer Color\n of the player who's turn is starting.\n\n\n\n\n\n\nfunction\n \nonPlayerTurn\n(\ncolor\n)\n\n    \nprint\n(\ncolor\n \n..\n \n\"'s turn starts now.\"\n)\n\n\nend\n\n\n\n\n\n\n\nonSave()\n \n\n\nCalled whenever your game is saved, either manually or by auto-save. It is used to allow information to persist through saving/loading. It allows you to place information into a table that is written into the save file. It works on Global information and can also be used to save information onto an Object.\n\n\n\n\nImportant\n\n\nWhen using \nonSave()\n, information is saved into the save file you are using. Using \nSave & Apply\n does NOT cause it to record data, only overwriting your save will update what information \nonSave()\n is trying to record.\n\n\n\n\n\n\nWarning\n\n\nYou can save almost any data in a table using this function, but Object references \nDO NOT\n persist. If you need to record an Object using \nonSave()\n, record its GUID instead.\n\n\n\n\ndata_table\n \n=\n \n{\nanswer\n=\n42\n}\n\n\n\nfunction\n \nonSave\n()\n\n    \nsaved_data\n \n=\n \nJSON\n.\nencode\n(\ndata_table\n)\n\n    \nself\n.\nscript_state\n \n=\n \nsaved_data\n\n\nend\n\n\n\n\n\nCheck the \nonLoad()\n section for how to load the information you record into your save file.\n\n\n\n\nonScriptingButtonDown(...)\n \n\n\nCalled when a scripting button (numpad by default) is pressed. The index range that is returned is 1-10.\n\n\n\n\nonScriptingButtonDown(index, player_color)\n\n\n\n\n\u00a0\nindex\n: Index number, representing which key was pressed.\n\n\n\u00a0\nplayer_color\n: \nPlayer Color\n of the player who triggered the function.\n\n\n\n\n\n\nfunction\n \nonScriptingButtonDown\n(\nindex\n,\n \ncolor\n)\n\n    \nprint\n(\nindex\n)\n\n\nend\n\n\n\n\n\n\n\nonScriptingButtonUp(...)\n \n\n\nCalled when a scripting button (numpad by default) is released. The index range that is returned is 1-10.\n\n\n\n\nonScriptingButtonUp(index, player_color)\n\n\n\n\n\u00a0\nindex\n: Index number, representing which key was released.\n\n\n\u00a0\nplayer_color\n: \nPlayer Color\n of the player who triggered the function.\n\n\n\n\n\n\nfunction\n \nonScriptingButtonUp\n(\nindex\n,\n \ncolor\n)\n\n    \nprint\n(\nindex\n)\n\n\nend\n\n\n\n\n\n\n\nonUpdate()\n \n\n\nCalled \nevery frame\n.\n\n\n\n\nWarning\n\n\nThis is a very expensive function and can easily slow/crash your game if misused. Use with caution.\n\n\n\n\nfunction\n \nonUpdate\n()\n\n    \nprint\n(\n\"This will probably slow your game down.\"\n)\n\n\nend\n\n\n\n\n\n\n\n\n\nFunction Details (Object only)\n \n\n\nonCollisionEnter(...)\n \n\n\nThis function is called when an Object starts colliding with the Object the function is on. Does not work in Global.\n\n\n\n\nonCollisionEnter(collision_info)\n\n\n\n\n\u00a0\ncollision_info\n: A Table containing data on colliding object.\n\n\n\u00a0\ncollision_info.\ncollision_object\n: Object coming into contact with \nself\n.\n\n\n\u00a0\ncollision_info.\ncontact_points\n: Sub-table full of the Vectors where contact took place.\n\n\n \ncollision_info.\nrelative_velocity\n: Direction and magnitude at the time of collision.\n\n\n\n\n\n\n\n\n\n\n-- Example Usage\n\n\nfunction\n \nonCollisionEnter\n(\ninfo\n)\n\n    \nprint\n(\ninfo\n.\ncollision_object\n)\n\n\nend\n\n\n\n\n-- Example returned table\n\n\n{\n\n    \ncollision_object\n \n=\n \nobjectReference\n\n    \ncontact_points\n \n=\n \n{\n\n        \n{\nx\n=\n5\n,\n \ny\n=\n0\n,\n \nz\n=-\n2\n,\n \n5\n,\n \n0\n,\n \n-\n2\n},\n\n    \n}\n\n    \nrelative_velocity\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n20\n,\n \nz\n=\n0\n,\n \n0\n,\n \n20\n,\n \n0\n}\n\n\n}\n\n\n\n\n\n\nonCollisionExit(...)\n \n\n\nThis function is called when an Object stops colliding with the Object the function is on. Does not work in Global.\n\n\n\n\nonCollisionExit(collision_info)\n\n\n\n\n\u00a0\ncollision_info\n: A Table containing data on colliding object.\n\n\n\u00a0\ncollision_info.\ncollision_object\n: Object leaving contact with \nself\n.\n\n\n\u00a0\ncollision_info.\ncontact_points\n: Sub-table full of the Vectors where contact last broke off.\n\n\n \ncollision_info.\nrelative_velocity\n: Direction and magnitude of the departing Object.\n\n\n\n\n\n\n\n\n\n\n-- Example Usage\n\n\nfunction\n \nonCollisionExit\n(\ninfo\n)\n\n    \nprint\n(\ninfo\n.\ncollision_object\n)\n\n\nend\n\n\n\n\n-- Example returned table\n\n\n{\n\n    \ncollision_object\n \n=\n \nobjectReference\n\n    \ncontact_points\n \n=\n \n{\n\n        \n{\nx\n=\n5\n,\n \ny\n=\n0\n,\n \nz\n=-\n2\n,\n \n5\n,\n \n0\n,\n \n-\n2\n},\n\n    \n}\n\n    \nrelative_velocity\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n20\n,\n \nz\n=\n0\n,\n \n0\n,\n \n20\n,\n \n0\n}\n\n\n}\n\n\n\n\n\n\nonCollisionStay(...)\n \n\n\nThis function is called \nevery frame\n that an Object is colliding with the Object this function is on. Does not work in Global.\n\n\n\n\nWarning\n\n\nThis is a very expensive function and can easily slow/crash your game if misused. Use with caution.\n\n\n\n\n\n\nonCollisionExit(collision_info)\n\n\n\n\n\u00a0\ncollision_info\n: A Table containing data on colliding object.\n\n\n\u00a0\ncollision_info.\ncollision_object\n: Object coming into contact with \nself\n.\n\n\n\u00a0\ncollision_info.\ncontact_points\n: Sub-table full of the Vectors where contact is taking place.\n\n\n \ncollision_info.\nrelative_velocity\n: Direction and magnitude of the Object, currently.\n\n\n\n\n\n\n\n\n\n\n-- Example Usage\n\n\nfunction\n \nonCollisionStay\n(\ninfo\n)\n\n    \nprint\n(\ninfo\n.\ncollision_object\n)\n\n\nend\n\n\n\n\n-- Example returned table\n\n\n{\n\n    \ncollision_object\n \n=\n \nobjectReference\n\n    \ncontact_points\n \n=\n \n{\n\n        \n{\nx\n=\n5\n,\n \ny\n=\n0\n,\n \nz\n=-\n2\n,\n \n5\n,\n \n0\n,\n \n-\n2\n},\n\n    \n}\n\n    \nrelative_velocity\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n20\n,\n \nz\n=\n0\n,\n \n0\n,\n \n20\n,\n \n0\n}\n\n\n}\n\n\n\n\n\n\nonDestroy()\n \n\n\nThis function is called when an \nObject\n it is on is destroyed. When \nonDestroy()\n is called, the Object has one frame left to live but its recommended to avoid using it as a reference here. This event fires immediately after \nonObjectDestroy()\n but their lifetime is the same final frame. Does not work in Global.\n\n\nfunction\n \nonDestroy\n()\n\n    \nprint\n(\n\"This object was destroyed!\"\n)\n\n\nend\n\n\n\n\n\n\n\nonDrop(...)\n \n\n\nThis function is called when this \nObject\n is dropped. Does not work in Global.\n\n\n\n\nonDrop(player_color)\n\n\n\n\n\u00a0\nplayer_color\n: \nPlayer Color\n of the Player.\n\n\n\n\n\n\nfunction\n \nonDrop\n(\ncolor\n)\n\n    \nprint\n(\ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nonPickUp(...)\n \n\n\nCalled when a player picks up an Object.\n\n\n\n\nonPickUp(player_color)\n\n\n\n\n\u00a0\nplayer_color\n: \nPlayer Color\n of the Player.\n\n\n\n\n\n\nfunction\n \nonPickUp\n(\ncolor\n)\n\n    \nprint\n(\ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nonSearchEnd(...)\n \n\n\nCalled when a player first searches this Object.\n\n\n\n\nonSearchEnd(\n\u00a0player_color)\n\n\n\n\n\u00a0\nplayer_color\n: \nPlayer Color\n of the Player.\n\n\n\n\n\n\n\n\nonSearchStart(...)\n \n\n\nCalled when a player finishes searching this Object.\n\n\n\n\nonSearchStart(\n\u00a0player_color)\n\n\n\n\n\u00a0\nplayer_color\n: \nPlayer Color\n of the Player.",
            "title": "Event"
        },
        {
            "location": "/event/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/event/#default-events-global-object",
            "text": "These are functions which are triggered by an event taking place in-game. They work when within the script of an Object or the Global script.     Function Name  Description  \u00a0      onChat( \u00a0message,  \u00a0sender)  Called when a chat message is sent in game chat.     onExternalMessage( \u00a0data)  Called when an external script editor (like  Atom ) sends a message back to the game. Used for custom editor functionality.     onFixedUpdate()  Called  every physics tick  (90 times a second). This is a frame independent onUpdate().     onLoad( \u00a0save_state)  Called when a game save is finished loading every Object. It is where most setup code will go.     onObjectDestroy( \u00a0dying_object)  Called whenever any object is destroyed.     onObjectDrop( \u00a0player_color,  \u00a0dropped_object)  Called whenever any object is dropped by a player.     onObjectEnterScriptingZone( \u00a0zone,  \u00a0enter_object)  Called when any object enters any scripting zone.     onObjectLeaveScriptingZone( \u00a0zone,  \u00a0enter_object)  Called when any object leaves any scripting zone.     onObjectLeaveContainer( \u00a0container,  \u00a0leave_object)  Called when any object leaves any container.     onObjectLoopingEffect( \u00a0loop_object,  \u00a0index)  Called whenever the looping effect of an  AssetBundle  is activated.     onObjectPickUp( \u00a0player_color,  \u00a0picked_up_object)  Called whenever a Player picks up an Object.     onObjectRandomize( \u00a0randomize_object,  \u00a0player_color)  Called when an Object is randomized. Like when shuffling a deck or shaking dice.     onObjectSearchEnd( \u00a0obj,  \u00a0player_color)  Called when a search is finished on any container.     onObjectSearchStart( \u00a0obj,  \u00a0player_color)  Called when a search is started on any container.     onObjectSpawn( \u00a0spawn_object)  Called when any Object is spawned/created.     onObjectTriggerEffect( \u00a0trigger_object,  \u00a0index)  Called whenever the trigger effect of an  AssetBundle  is activated.     onPlayerChangeColor( \u00a0player_color)  Called when a player changes color or selects it for the first time. It also returns  \"Grey\"  if they disconnect.     onPlayerConnect( \u00a0person)  Called when a  Player  connects to a game.     onPlayerDisconnect( \u00a0person)  Called when a  Player  disconnects from a game.     onPlayerTurn( \u00a0player_color)  Called at the start of a player's turn when using the in-game turn system.     onSave()  Called whenever your game is saved.     onScriptingButtonDown( \u00a0index,  \u00a0player_color)  Called when a scripting button (numpad by default) is pressed. The index range that is returned is 1-10.     onScriptingButtonUp( \u00a0index,  \u00a0player_color)  Called when a scripting button (numpad by default) is released. The index range that is returned is 1-10.     onUpdate()  Called  every frame .",
            "title": "Default Events (Global &amp; Object)"
        },
        {
            "location": "/event/#default-events-object-only",
            "text": "These are functions which are triggered by an event taking place in-game. They only work within scripts that are on Objects, never in Global.     Function Name  Description  \u00a0      onCollisionEnter( \u00a0collision_info)  Called when an Object starts colliding with the Object the function is on.     onCollisionExit( \u00a0collision_info)  Called when an Object stops colliding with the Object the function is on.     onCollisionStay( \u00a0collision_info)  Called  every frame  that an Object is colliding with the Object this function is on.     onDestroy()  Called when an Object it is on is destroyed.     onDrop( \u00a0player_color)  Called when a player releases an Object after picking it up.     onPickUp( \u00a0player_color)  Called when a player picks up an Object.     onSearchEnd( \u00a0player_color)  Called when a player first searches this Object.     onSearchStart( \u00a0player_color)  Called when a player finishes searching this Object.",
            "title": "Default Events (Object Only)"
        },
        {
            "location": "/event/#function-details-global-object",
            "text": "",
            "title": "Function Details (Global &amp; Object)"
        },
        {
            "location": "/event/#onchat",
            "text": "This function is called when a message is sent through the in-game chat. It does not trigger when global chat messages are sent. Using  return   false  inside of this function prevents the chat message which triggered it to be suppressed.   onChat(message, sender)   \u00a0 message : Chat message which triggered the function.  \u00a0 sender : Player which sent the chat message.    function   onChat ( message ,   player ) \n     print ( message ) \n     print ( player . color )  end",
            "title": "onChat(...)"
        },
        {
            "location": "/event/#onexternalmessage",
            "text": "This function is called when an external script editor (like  Atom ) sends a message back to the game. Used for custom editor functionality.   onExternalMessage(data)   \u00a0 data : The data returned by the external editor into the game.    function   onExternalMessage ( data ) \n     print ( \"External message received\" )  end",
            "title": "onExternalMessage(...)"
        },
        {
            "location": "/event/#onfixedupdate",
            "text": "Called  every physics tick  (90 times a second). This is a frame independent onUpdate().   Warning  This is a very expensive function and can easily slow/crash your game if misused. Use with caution.   function   onFixedUpdate () \n     self . addTorque ({ 0 , 100 , 0 },   1 )  end",
            "title": "onFixedUpdate()"
        },
        {
            "location": "/event/#onload",
            "text": "This function is called when a game save is finished loading every Object. This is where most setup code will go. The fast-forward and rewind feature will also cause this function to activate. If this function is in an Object's script and that Object is spawned, like by removing it from a container, it too will trigger onLoad().   onLoad(save_state)   \u00a0 save_state : The encoded string containing any save_state (saved) data.  If there is no data saved, this returns an empty String.      function   onLoad () \n     print ( \"Loading complete\" )  end   Example of onLoad and onSave being used to save/load data -- Runs whenever game is saved/autosaved  function   onSave () \n     local   data_to_save   =   { someData = 50 } \n     saved_data   =   JSON . encode ( data_to_save ) \n     --saved_data = \"\" --Remove -- at start & save to clear save data \n     return   saved_data  end  -- Runs when game is loaded  function   onLoad ( saved_data ) \n     -- Loads the tracking for if the game has started yet \n     if   saved_data   ~=   \"\"   then \n         local   loaded_data   =   JSON . decode ( saved_data ) \n         someData   =   loaded_data . someData \n     else \n         someData   =   50 \n     end  end",
            "title": "onLoad(...)"
        },
        {
            "location": "/event/#onobjectdestroy",
            "text": "Called whenever any object is destroyed. The dying Object has 1 frame left to live. This event fires immediately before the dying Object\u2019s  onDestroy()  but their lifetime is the same final frame.   onObjectDestroy(dying_object)   \u00a0 dying_object : The object that was destroyed.    function   onObjectDestroy ( destroyedObj ) \n     print ( destroyedObj . getName ())  end",
            "title": "onObjectDestroy(...)"
        },
        {
            "location": "/event/#onobjectdrop",
            "text": "Called whenever any object is dropped by a player.   onObjectDrop(player_color, dropped_object)   \u00a0 player_color :  Player Color  of the Player who dropped the Object.  \u00a0 dropped_object : The Object in game which was dropped.    function   onObjectDrop ( colorName ,   obj ) \n     print ( colorName   ..   \" dropped \"   ..   obj . getName ())  end",
            "title": "onObjectDrop(...)"
        },
        {
            "location": "/event/#onobjectenterscriptingzone",
            "text": "Called when any object enters any scripting zone.   onObjectEnterScriptingZone(zone, enter_object)   \u00a0 zone : The Object of the scripting zone.  \u00a0 enter_object : The Object triggering the function.    function   onObjectEnterScriptingZone ( zone ,   obj ) \n     print ( obj . getGUID ())  end",
            "title": "onObjectEnterScriptingZone(...)"
        },
        {
            "location": "/event/#onobjectleavescriptingzone",
            "text": "Called when any object leaves any scripting zone.   onObjectLeaveScriptingZone(zone, enter_object)   \u00a0 zone : The Object of the scripting zone.  \u00a0 enter_object : The Object triggering the function.    function   onObjectLeaveScriptingZone ( zone ,   obj ) \n     print ( obj . getGUID ())  end",
            "title": "onObjectLeaveScriptingZone(...)"
        },
        {
            "location": "/event/#onobjectleavecontainer",
            "text": "Called when any object leaves any container.   onObjectLeaveContainer(container, leave_object)   \u00a0 container : Container the object left.  \u00a0 leave_object : Object that left the container.    function   onObjectLeaveContainer ( bag ,   obj ) \n     print ( bag ) \n     print ( obj )  end",
            "title": "onObjectLeaveContainer(...)"
        },
        {
            "location": "/event/#onobjectloopingeffect",
            "text": "Called whenever the looping effect of an  AssetBundle  is activated.   onObjectLoopingEffect(loop_object, index)   \u00a0 loop_object : AssetBundle which had its loop activated.  \u00a0 index : Index number for the loop activated.    function   onObjectLoopingEffect ( obj ,   index ) \n     print ( \"Loop \"   ..   index   ..   \" activated.\" )  end",
            "title": "onObjectLoopingEffect(...)"
        },
        {
            "location": "/event/#onobjectpickup",
            "text": "Called whenever a Player picks up an Object.   onObjectPickUp(player_color, picked_up_object)   \u00a0 player_color :  Player Color  of the Player who picked up the object.  \u00a0 picked_up_object : The Object in game which was picked up.    function   onObjectPickUp ( colorName ,   obj ) \n     print ( colorName   ..   \" picked up \"   ..   obj . getName ())  end",
            "title": "onObjectPickUp(...)"
        },
        {
            "location": "/event/#onobjectrandomize",
            "text": "Called when an Object is randomized. Like when shuffling a deck or shaking dice.   onObjectRandomize(randomize_object, player_color)   \u00a0 spawn_object : The Object which triggered this function.  \u00a0 player_color :  Player Color  of the player who triggered the function.    function   onObjectRandomize ( obj ,   color ) \n     print ( obj . getName ()   ..   \" was randomized by \"   ..   color )  end",
            "title": "onObjectRandomize(...)"
        },
        {
            "location": "/event/#onobjectsearchend",
            "text": "Called when a search is finished on any container.   onObjectSearchEnd(obj, player_color)    \u00a0 obj : The Object which was searched.  \u00a0 player_color :  Player Color  of the player who triggered the function.",
            "title": "onObjectSearchEnd(...)"
        },
        {
            "location": "/event/#onobjectsearchstart",
            "text": "Called when a search is started on any container.   onObjectSearchStart(obj, player_color)    \u00a0 obj : The Object which was searched.  \u00a0 player_color :  Player Color  of the player who triggered the function.",
            "title": "onObjectSearchStart(...)"
        },
        {
            "location": "/event/#onobjectspawn",
            "text": "Called when any Object is spawned/created.   onObjectSpawn(spawn_object)   \u00a0 spawn_object : The Object which triggered this function.    function   onObjectSpawn ( obj ) \n     print ( obj )  end",
            "title": "onObjectSpawn(...)"
        },
        {
            "location": "/event/#onobjecttriggereffect",
            "text": "Called whenever the trigger effect of an  AssetBundle  is activated.   onObjectTriggerEffect(loop_object, index)   \u00a0 loop_object : AssetBundle which had its trigger activated.  \u00a0 index : Index number for the trigger activated.    function   onObjectTriggerEffect ( obj ,   index ) \n     print ( \"Loop \"   ..   index   ..   \" activated.\" )  end",
            "title": "onObjectTriggerEffect(...)"
        },
        {
            "location": "/event/#onplayerchangecolor",
            "text": "Called when a player changes color or selects it for the first time. It also returns  \"Grey\"  if they disconnect.   onPlayerChangeColor(player_color)   \u00a0 player_color :  Player Color  of the player who triggered the function.    function   onPlayerChangeColor ( color ) \n     print ( color )  end",
            "title": "onPlayerChangeColor(...)"
        },
        {
            "location": "/event/#onplayerconnect",
            "text": "Called when a  Player  connects to a game.   onPlayerConnect(person)\"   \u00a0 person : Player reference to who connected.",
            "title": "onPlayerConnect(...)"
        },
        {
            "location": "/event/#onplayerdisconnect",
            "text": "Called when a  Player  disconnects from a game.   onPlayerDisconnect(person)\"   \u00a0 person : Player reference to who disconnected.",
            "title": "onPlayerDisconnect(...)"
        },
        {
            "location": "/event/#onplayerturn",
            "text": "Called at the end of a player's turn when using the in-game turn system.   onPlayerTurn(player_color)   \u00a0 player_color :  Player Color  of the player who's turn is starting.    function   onPlayerTurn ( color ) \n     print ( color   ..   \"'s turn starts now.\" )  end",
            "title": "onPlayerTurn(...)"
        },
        {
            "location": "/event/#onsave",
            "text": "Called whenever your game is saved, either manually or by auto-save. It is used to allow information to persist through saving/loading. It allows you to place information into a table that is written into the save file. It works on Global information and can also be used to save information onto an Object.   Important  When using  onSave() , information is saved into the save file you are using. Using  Save & Apply  does NOT cause it to record data, only overwriting your save will update what information  onSave()  is trying to record.    Warning  You can save almost any data in a table using this function, but Object references  DO NOT  persist. If you need to record an Object using  onSave() , record its GUID instead.   data_table   =   { answer = 42 }  function   onSave () \n     saved_data   =   JSON . encode ( data_table ) \n     self . script_state   =   saved_data  end   Check the  onLoad()  section for how to load the information you record into your save file.",
            "title": "onSave()"
        },
        {
            "location": "/event/#onscriptingbuttondown",
            "text": "Called when a scripting button (numpad by default) is pressed. The index range that is returned is 1-10.   onScriptingButtonDown(index, player_color)   \u00a0 index : Index number, representing which key was pressed.  \u00a0 player_color :  Player Color  of the player who triggered the function.    function   onScriptingButtonDown ( index ,   color ) \n     print ( index )  end",
            "title": "onScriptingButtonDown(...)"
        },
        {
            "location": "/event/#onscriptingbuttonup",
            "text": "Called when a scripting button (numpad by default) is released. The index range that is returned is 1-10.   onScriptingButtonUp(index, player_color)   \u00a0 index : Index number, representing which key was released.  \u00a0 player_color :  Player Color  of the player who triggered the function.    function   onScriptingButtonUp ( index ,   color ) \n     print ( index )  end",
            "title": "onScriptingButtonUp(...)"
        },
        {
            "location": "/event/#onupdate",
            "text": "Called  every frame .   Warning  This is a very expensive function and can easily slow/crash your game if misused. Use with caution.   function   onUpdate () \n     print ( \"This will probably slow your game down.\" )  end",
            "title": "onUpdate()"
        },
        {
            "location": "/event/#function-details-object-only",
            "text": "",
            "title": "Function Details (Object only)"
        },
        {
            "location": "/event/#oncollisionenter",
            "text": "This function is called when an Object starts colliding with the Object the function is on. Does not work in Global.   onCollisionEnter(collision_info)   \u00a0 collision_info : A Table containing data on colliding object.  \u00a0 collision_info. collision_object : Object coming into contact with  self .  \u00a0 collision_info. contact_points : Sub-table full of the Vectors where contact took place.    collision_info. relative_velocity : Direction and magnitude at the time of collision.      -- Example Usage  function   onCollisionEnter ( info ) \n     print ( info . collision_object )  end   -- Example returned table  { \n     collision_object   =   objectReference \n     contact_points   =   { \n         { x = 5 ,   y = 0 ,   z =- 2 ,   5 ,   0 ,   - 2 }, \n     } \n     relative_velocity   =   { x = 0 ,   y = 20 ,   z = 0 ,   0 ,   20 ,   0 }  }",
            "title": "onCollisionEnter(...)"
        },
        {
            "location": "/event/#oncollisionexit",
            "text": "This function is called when an Object stops colliding with the Object the function is on. Does not work in Global.   onCollisionExit(collision_info)   \u00a0 collision_info : A Table containing data on colliding object.  \u00a0 collision_info. collision_object : Object leaving contact with  self .  \u00a0 collision_info. contact_points : Sub-table full of the Vectors where contact last broke off.    collision_info. relative_velocity : Direction and magnitude of the departing Object.      -- Example Usage  function   onCollisionExit ( info ) \n     print ( info . collision_object )  end   -- Example returned table  { \n     collision_object   =   objectReference \n     contact_points   =   { \n         { x = 5 ,   y = 0 ,   z =- 2 ,   5 ,   0 ,   - 2 }, \n     } \n     relative_velocity   =   { x = 0 ,   y = 20 ,   z = 0 ,   0 ,   20 ,   0 }  }",
            "title": "onCollisionExit(...)"
        },
        {
            "location": "/event/#oncollisionstay",
            "text": "This function is called  every frame  that an Object is colliding with the Object this function is on. Does not work in Global.   Warning  This is a very expensive function and can easily slow/crash your game if misused. Use with caution.    onCollisionExit(collision_info)   \u00a0 collision_info : A Table containing data on colliding object.  \u00a0 collision_info. collision_object : Object coming into contact with  self .  \u00a0 collision_info. contact_points : Sub-table full of the Vectors where contact is taking place.    collision_info. relative_velocity : Direction and magnitude of the Object, currently.      -- Example Usage  function   onCollisionStay ( info ) \n     print ( info . collision_object )  end   -- Example returned table  { \n     collision_object   =   objectReference \n     contact_points   =   { \n         { x = 5 ,   y = 0 ,   z =- 2 ,   5 ,   0 ,   - 2 }, \n     } \n     relative_velocity   =   { x = 0 ,   y = 20 ,   z = 0 ,   0 ,   20 ,   0 }  }",
            "title": "onCollisionStay(...)"
        },
        {
            "location": "/event/#ondestroy",
            "text": "This function is called when an  Object  it is on is destroyed. When  onDestroy()  is called, the Object has one frame left to live but its recommended to avoid using it as a reference here. This event fires immediately after  onObjectDestroy()  but their lifetime is the same final frame. Does not work in Global.  function   onDestroy () \n     print ( \"This object was destroyed!\" )  end",
            "title": "onDestroy()"
        },
        {
            "location": "/event/#ondrop",
            "text": "This function is called when this  Object  is dropped. Does not work in Global.   onDrop(player_color)   \u00a0 player_color :  Player Color  of the Player.    function   onDrop ( color ) \n     print ( color )  end",
            "title": "onDrop(...)"
        },
        {
            "location": "/event/#onpickup",
            "text": "Called when a player picks up an Object.   onPickUp(player_color)   \u00a0 player_color :  Player Color  of the Player.    function   onPickUp ( color ) \n     print ( color )  end",
            "title": "onPickUp(...)"
        },
        {
            "location": "/event/#onsearchend",
            "text": "Called when a player first searches this Object.   onSearchEnd( \u00a0player_color)   \u00a0 player_color :  Player Color  of the Player.",
            "title": "onSearchEnd(...)"
        },
        {
            "location": "/event/#onsearchstart",
            "text": "Called when a player finishes searching this Object.   onSearchStart( \u00a0player_color)   \u00a0 player_color :  Player Color  of the Player.",
            "title": "onSearchStart(...)"
        },
        {
            "location": "/base/",
            "text": "These are a loose collection of functions which can be used to perform a variety of actions within Tabletop Simulator. Some of them are used in almost every script.\n\n\nFunction Summary\n \n\n\nGlobal Functions\n \n\n\nGeneral functions which work within any function.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nclearPixelPaint()\n\n\nRemove pixel paint from the instance.\n\n\n\n\n\n\n\n\n\n\nclearVectorPaint()\n\n\nRemove vector paint from the instance.\n\n\n\n\n\n\n\n\n\n\ncopy(\n\u00a0object_list)\n\n\nCopy a list of Objects to the clipboard. Works with \npaste(...)\n.\n\n\n\n\n\n\n\n\n\n\ndestroyObject(\n\u00a0obj)\n\n\nDestory an Object.\n\n\n\n\n\n\n\n\n\n\nflipTable()\n\n\nFlip the table.\n\n\n\n\n\n\n\n\n\n\ngetAllObjects()\n\n\nReturns Table of all spawned \nObjects\n in the game.\n\n\n\n\n\n\n\n\n\n\ngetNotes()\n\n\nReturns the contents of the on-screen notes section.\n\n\n\n\n\n\n\n\n\n\ngetObjectFromGUID(\n\u00a0guid)\n\n\nReturns Object by its GUID. Will return \nnil\n if this GUID doesn't currently exist.\n\n\n\n\n\n\n\n\n\n\ngetSeatedPlayers()\n\n\nReturns Table of the \nPlayer Colors\n strings of seated players.\n\n\n\n\n\n\n\n\n\n\npaste(\n\u00a0parameters)\n\n\nPastes Objects in-game that were copied to the in-game clipboard. Works with \ncopy(...)\n.\n\n\n\n\n\n\n\n\n\n\nsetNotes(\n\u00a0notes)\n\n\nReplace the text in the notes window with the string.\n\n\n\n\n\n\n\n\n\n\nspawnObject(\n\u00a0parameters)\n\n\nSpawns an Object. View the \nSpawnable Object\n page for Objects that can be spawned.\n\n\n\n\n\n\n\n\n\n\nspawnObjectJSON(\n\u00a0parameters)\n\n\nSpawns an Object using a JSON string. Works with \ngetJSON()\n.\n\n\n\n\n\n\n\n\n\n\nstartLuaCoroutine(\n\u00a0function_owner, \n\u00a0function_name)\n\n\nStart a coroutine.\n\n\n\n\n\n\n\n\n\n\nstringColorToRGB(\n\u00a0player_color)\n\n\nConverts a \nPlayer Color\n string into a Color Table for tinting.\n\n\n\n\n\n\n\n\n\n\n\n\nMessage Functions\n \n\n\nFunctions which handle sending and displaying data.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nbroadcastToAll(\n\u00a0message, \n\u00a0message_tint)\n\n\nPrint an on-screen message to all Players, as well as their in-game chat.\n\n\n\n\n\n\n\n\n\n\nbroadcastToColor(\n\u00a0message, \n\u00a0player_color, \n\u00a0message_tint)\n\n\nPrint an on-screen message to a specified Player, as well as their in-game chat.\n\n\n\n\n\n\n\n\n\n\nlog(\n\u00a0element, \n\u00a0label, \n\u00a0tag)\n\n\nPrint information to the log tab. (Shortcut: ~)\n\n\n\n\n\n\n\n\n\n\nlogStyle(\n\u00a0tag, \n\u00a0tint, \n\u00a0prefix, \n\u00a0postfix)\n\n\nSet style options for the specified tag type for the log.\n\n\n\n\n\n\n\n\n\n\nprint(\n\u00a0message)\n\n\nPrints a string into chat that only the host is able to see. Used for debugging scripts.\n\n\n\n\n\n\n\n\n\n\nprintToAll(\n\u00a0message, \n\u00a0message_tint)\n\n\nPrint a message into the chat of all connected players.\n\n\n\n\n\n\n\n\n\n\nprintToColor(\n\u00a0message, \n\u00a0player_color, \n\u00a0message_tint)\n\n\nPrint a message to a specific \nPlayer Color\n.\n\n\n\n\n\n\n\n\n\n\nsendExternalMessage(\n\u00a0data)\n\n\nSend a table to your external script editor, most likely Atom. This is for custom editor functionality.\n\n\n\n\n\n\n\n\n\n\n\n\nNotebook Functions\n \n\n\nFunctions that interact with the in-game notebook tabs.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\naddNotebookTab(\n\u00a0parameters)\n\n\nAdds a notebook tab, returning its index.\n\n\n\n\n\n\n\n\n\n\neditNotebookTab(\n\u00a0parameters)\n\n\nEdit an existing Tab in the notebook.\n\n\n\n\n\n\n\n\n\n\ngetNotebookTabs()\n\n\nReturns Table containing data on all tabs in the notebook.\n\n\n\n\n\n\n\n\n\n\nremoveNotebookTab(\n\u00a0index)\n\n\nRemove a notebook tab.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n \n\n\nGlobal Function details\n \n\n\ncopy(...)\n \n\n\n\u00a0Copying a list of Objects the clipboard. Works with \npaste(...)\n.\n\n\n\n\ncopy(object_list)\n\n\n\n\n \nobject_list\n: A Table of in-game objects to be copied.\n\n\nThis is similar to highlighting the objects in-game and copying them.\n\n\n\n\n\n\n\n\n\n\nobject_list\n \n=\n \n{\n\n    \ngetObjectFromGUID\n(\n\"######\"\n),\n\n    \ngetObjectFromGUID\n(\n\"######\"\n),\n\n\n}\n\n\ncopy\n(\nobject_list\n)\n\n\n\n\n\n\n\ndestroyObject(...)\n \n\n\n\u00a0Destroy an Object.\n\n\n\n\ndestroyObject(obj)\n\n\n\n\n \nobj\n: The Object you wish to delete from the instance.\n\n\n\n\n\n\n\n\ngetObjectFromGUID(...)\n \n\n\n\u00a0Returns Object by its GUID. Will return \nnil\n if this GUID doesn't currently exist.\n\n\n\n\ngetObjectFromGUID(guid)\n\n\n\n\n \nguid\n: GUID of the Object to get a reference of.\n\n\nGUID can be obtained by right clicking an object and going to Scripting.\n\n\nIn a script, it can be obtained from any Object by using .getGUID().\n\n\n\n\n\n\n\n\n\n\n\n\npaste(...)\n \n\n\n\u00a0Pastes Objects in-game that were copied to the in-game clipboard. Works with \ncopy(...)\n.\n\n\n\n\npaste(parameters)\n\n\n\n\n \nparameters\n: A Table containing instructions of where to spawn the Objects.\n\n\n \nparameters.position\n: Position of the first object to paste.\n\n\nOptional, defaults to {0, 3, 0}.\n\n\n\n\n\n\n \nparameters.snap_to_grid\n: If snap-to-grid is active on the spawned item/s.\n\n\nOptional, defaults to false (off).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsetNotes(...)\n \n\n\n\u00a0Replace the text in the notes window with the string. The notes is an area which displays text in the lower-left corner of the screen.\n\n\n\n\nsetNotes(notes)\n\n\n\n\n \nnotes\n: What to place into the notes area.\n\n\n\n\n\n\nsetNotes\n(\n\"This appears in the notes section\"\n)\n\n\n\n\n\n\n\nspawnObject(...)\n \n\n\n\u00a0Spawn an Object. View the \nSpawnable Objects\n page for Objects that can be spawned.\n\n\nIf you are spawning a \ncustom Object\n, you should call \nsetCustomObject\n immediately after spawnObject to set its custom properties.\n\n\n\n\nTip\n\n\nSpawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance.\n\n\n\n\n\n\nspawnObject(parameters)\n\n\n\n\n \nparameters\n: A Table of parameters used to determine how spawnObject will act.\n\n\n \nparameters.type\n: \nSpawnable Object\n type.\n\n\n \nparameters.position\n: Position to place Object.\n\n\nOptional, defaults to {x=0, y=3, z=0}.\n\n\n\n\n\n\n \nparameters.rotation\n: Rotation of the Object.\n\n\nOptional, defaults to {x=0, y=0, z=0}\n\n\n\n\n\n\n \nparameters.scale\n: Scale of the Object.\n\n\nOptional, defaults to {x=1, y=1, z=1}\n\n\n\n\n\n\n \nparameters.sound\n: If the spawned Object noise is played.\n\n\nOptional, defaults to true.\n\n\n\n\n\n\n \nparameters.snap_to_grid\n: If snap-to-grid is active on the Object.\n\n\nOptional, defaults to false.\n\n\n\n\n\n\n \nparameters.callback\n: Name of the function you want activated once the Object is initiated.\n\n\nOptional, no callback is triggered without it.\n\n\nA callback function has 2 parameters, the Object spawned and, if used, the Table of params.\n\n\n\n\n\n\n \nparameters.callback_owner\n: Which Object has the callback function on it. Global is a valid target as well.\n\n\nOptional, defaults to Global. Serves no purpose if callback is not also used.\n\n\n\n\n\n\n \nparameters.params\n: A Table of data to send to the callback to use as parameters. See example.\n\n\nOptional, default is to not be used.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nfutureName\n \n=\n \n\"Spawned By Script!\"\n\n    \nspawnParams\n \n=\n \n{\n\n        \ntype\n \n=\n \n\"rpg_BEAR\"\n,\n\n        \nposition\n       \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n3\n,\n \nz\n=-\n5\n},\n\n        \nrotation\n       \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n90\n,\n \nz\n=\n0\n},\n\n        \nscale\n          \n=\n \n{\nx\n=\n2\n,\n \ny\n=\n2\n,\n \nz\n=\n2\n},\n\n        \nsound\n          \n=\n \nfalse\n,\n\n        \nsnap_to_grid\n   \n=\n \ntrue\n,\n\n        \ncallback\n       \n=\n \n\"spawn_callback\"\n,\n\n        \ncallback_owner\n \n=\n \nGlobal\n,\n\n        \nparams\n         \n=\n \n{\nname\n \n=\n \nfutureName\n}\n\n    \n}\n\n    \nspawnObject\n(\nspawnParams\n)\n\n\nend\n\n\n\nfunction\n \nspawn_callback\n(\nobject_spawned\n,\n \nparams\n)\n\n    \nobject_spawned\n.\nsetName\n(\nparams\n.\nname\n)\n\n    \nobject_spawned\n.\nsetColorTint\n({\nr\n=\n0\n,\ng\n=\n1\n,\nb\n=\n0\n})\n\n\nend\n\n\n\n\n\n\n\nspawnObjectJSON(...)\n \n\n\nSpawns an Object using a JSON string. Works with \ngetJSON()\n. It works just like spawnObject, but instead of a \ntype\n, you supply a \njson\n string. The other parameters will overwrite those in the JSON.\n\n\n\n\nTip\n\n\nSpawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance.\n\n\n\n\n\n\nspawnObjectJSON(parameters)\n\n\n\n\n \nparameters\n: A Table of parameters used to determine how spawnObjectJSON will act.\n\n\n \nparameters.json\n: \ngetJSON()\n string.\n\n\n \nparameters.position\n: Position to place Object.\n\n\nOptional, defaults to JSON's value.\n\n\n\n\n\n\n \nparameters.rotation\n: Rotation of the Object.\n\n\nOptional, defaults to JSON's value.\n\n\n\n\n\n\n \nparameters.scale\n: Scale of the Object.\n\n\nOptional, defaults to JSON's value.\n\n\n\n\n\n\n \nparameters.sound\n: If the spawned Object noise is played.\n\n\nOptional, defaults to JSON's value.\n\n\n\n\n\n\n \nparameters.snap_to_grid\n: If snap-to-grid is active on the Object.\n\n\nOptional, defaults to JSON's value.\n\n\n\n\n\n\n \nparameters.callback\n: Name of the function you want activated once the Object is initiated.\n\n\nOptional, no callback is triggered without it.\n\n\nA callback function has 2 parameters, the Object spawned and, if used, the Table of params.\n\n\n\n\n\n\n \nparameters.callback_owner\n: Which Object has the callback function on it. Global is a valid target as well.\n\n\nOptional, defaults to Global. Serves no purpose if callback is not also used.\n\n\n\n\n\n\n \nparameters.params\n: A Table of data to send to the callback to use as parameters. See example.\n\n\nOptional, default is to not be used.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nfutureName\n \n=\n \n\"Spawned By Script!\"\n\n    \nspawnParams\n \n=\n \n{\n\n        \njson\n \n=\n \nself\n.\ngetJSON\n(),\n\n        \nposition\n       \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n3\n,\n \nz\n=-\n5\n},\n\n        \nrotation\n       \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n90\n,\n \nz\n=\n0\n},\n\n        \nscale\n          \n=\n \n{\nx\n=\n2\n,\n \ny\n=\n2\n,\n \nz\n=\n2\n},\n\n        \nsound\n          \n=\n \nfalse\n,\n\n        \nsnap_to_grid\n   \n=\n \ntrue\n,\n\n        \ncallback\n       \n=\n \n\"spawn_callback\"\n,\n\n        \ncallback_owner\n \n=\n \nGlobal\n,\n\n        \nparams\n         \n=\n \n{\nname\n \n=\n \nfutureName\n}\n\n    \n}\n\n    \nspawnObject\n(\nspawnParams\n)\n\n\nend\n\n\n\nfunction\n \nspawn_callback\n(\nobject_spawned\n,\n \nparams\n)\n\n    \nobject_spawned\n.\nsetName\n(\nparams\n.\nname\n)\n\n    \nobject_spawned\n.\nsetColorTint\n({\nr\n=\n0\n,\ng\n=\n1\n,\nb\n=\n0\n})\n\n\nend\n\n\n\n\n\n\n\nstartLuaCoroutine(...)\n \n\n\n\u00a0Start a coroutine. A coroutine is similar to a function, but has the unique ability to have its run paused until the next frame of the game using \ncoroutine.yield(0)\n.\n\n\n\n\nAttention\n\n\nYou MUST return a 1 at the end of any coroutine or it will throw an error.\n\n\n\n\n\n\nstartLuaCoroutine(function_owner, function_name)\n\n\n\n\n \nfunction_owner\n: The Object that the function being called is on. Global is a valid target.\n\n\n \nfunction_name\n: Name of the function being called as a coroutine.\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nstartLuaCoroutine\n(\nGlobal\n,\n \n\"print_coroutine\"\n)\n\n\nend\n\n\n\n-- Prints a message, waits 250 frames, prints another message\n\n\nfunction\n \nprint_coroutine\n()\n\n    \nprint\n(\n\"Routine has Started\"\n)\n\n    \ncount\n \n=\n \n0\n\n    \nwhile\n \ncount\n \n<\n \n250\n \ndo\n\n        \ncount\n \n=\n \ncount\n \n+\n \n1\n\n        \ncoroutine.yield\n(\n0\n)\n\n    \nend\n\n\n    \nprint\n(\n\"Routine has Finished\"\n)\n\n\n    \nreturn\n \n1\n\n\nend\n\n\n\n\n\n\n\nstringColorToRGB(...)\n \n\n\n\u00a0Converts a \nPlayer Color\n string into a Color Table for tinting.\n\n\n\n\nstringColorToRGB(player_color)\n\n\n\n\n \nplayer_color\n A String of a \nPlayer Color\n.\n\n\n\n\n\n\nprintToAll\n(\n\"Blue message\"\n,\n \nstringColorToRGB\n(\n\"Blue\"\n))\n\n\n\n\n\n\n\nMessage Function Details\n \n\n\nbroadcastToAll(...)\n \n\n\n\u00a0Print an on-screen message to all Players.\n\n\n\n\nbroadcastToAll(message, message_tint)\n\n\n\n\n \nmessage\n: Message to display on-screen.\n\n\n \nmessage_tint\n: A Table containing the RGB color tint for the text.\n\n\n\n\n\n\nmsg\n \n=\n \n\"Hello all.\"\n\n\nrgb\n \n=\n \n{\nr\n=\n1\n,\n \ng\n=\n0\n,\n \nb\n=\n0\n}\n\n\nbroadcastToAll\n(\nmsg\n,\n \nrgb\n)\n\n\n\n\n\n\n\nbroadcastToColor(...)\n \n\n\n\u00a0Print an on-screen message to a specified Player and their in-game chat.\n\n\n\n\nbroadcastToColor(message, \nplayer_color\n, message_tint)\n\n\n\n\n \nmessage\n: Message to display on-screen.\n\n\n \nplayer_color\n: \nPlayer Color\n to receive the message.\n\n\n \nmessage_tint\n: RGB color tint for the text.\n\n\n\n\n\n\nmsg\n \n=\n \n\"Hello White.\"\n\n\ncolor\n \n=\n \n\"White\"\n\n\nrgb\n \n=\n \n{\nr\n=\n1\n,\n \ng\n=\n0\n,\n \nb\n=\n0\n}\n\n\nbroadcastToColor\n(\nmsg\n,\n \ncolor\n,\n \nrgb\n)\n\n\n\n\n\n\n\nlog(...)\n \n\n\n\u00a0Print information to the log. The log is a separate chat window which is visible to all players in the instance.\n\n\nIf a table is used for \"element\", the log will automatically display the key/value contents of it.\n\n\n\n\nlog(element, label, tag)\n\n\n\n\n \nelement\n: The information you want placed into the log.\n\n\n \nlabel\n: Text to be placed before the Var element is printed to the log.\n\n\nOptional, defaults to an empty String. Empty Strings are not displayed.\n\n\n\n\n\n\n \ntag\n: Name that is usable to categorize log entries. (See: \nlogStyle\n)\n\n\nOptional, defaults to an empty String. Empty Strings are not displayed.\n\n\n\n\n\n\n\n\n\n\nlog\n(\ngetAllObjects\n(),\n \n\"table\"\n,\n \n\"All Objects:\"\n)\n\n\n\n\n\n\n\nlogStyle(...)\n \n\n\n\u00a0Set style options for the specified tag type for the log. This can also be set in the system console with the \"log_style_tag\" command.\n\n\n\n\nlogStyle(tag, tint, prefix, postfix)\n\n\n\n\n \ntag\n: A String of the log's tag.\n\n\n \ntint\n: RGB value to tint the log entry's text.\n\n\nString color will also work. Example: \"Red\"\n\n\n\n\n\n\n \nprefix\n: Text to place before this type of log entry.\n\n\nOptional, defaults to an empty String. Empty Strings are not displayed.\n\n\n\n\n\n\n \npostfix\n: Text to place after this type of log entry.\n\n\nOptional, defaults to an empty String. Empty Strings are not displayed.\n\n\n\n\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nlogStyle\n(\n\"players\"\n,\n \n{\n0.5\n,\n0.5\n,\n0.5\n},\n \n\"\"\n,\n \n\"End List\"\n)\n\n    \nlog\n(\ngetSeatedPlayers\n(),\n \n\"players\"\n)\n\n\nend\n\n\n\n\n\n\n\nprint(...)\n \n\n\n\u00a0Print a string into chat that only the host is able to see. Used for debugging scripts.\n\n\n\n\nprint(message)\n\n\n\n\n \nmessage\n: Text to print into the chat log.\n\n\n\n\n\n\n\n\nprintToAll(...)\n \n\n\n\u00a0Print a message into the in-game chat of all connected players.\n\n\n\n\nprintToAll(message, message_tint)\n\n\n\n\n \nmessage\n: Message to place into players' in-game chats.\n\n\n \nmessage_tint\n: RGB values for the text's color tint.\n\n\n\n\n\n\nprintToAll\n(\n\"Hello World!\"\n,\n \n{\nr\n=\n1\n,\ng\n=\n0\n,\nb\n=\n0\n})\n\n\n\n\n\n\n\nprintToColor(...)\n \n\n\n\u00a0Print a message to the in-game chat of a specific player.\n\n\n\n\nprintToColor(message, \nplayer_color\n, message_tint)\n\n\n\n\n \nmessage\n: Message to place into the player's in-game chat.\n\n\n \nplayer_color\n: \nPlayer Color\n of the player that will receive the message.\n\n\n \nmessage_tint\n: RGB values for the text's color tint.\n\n\n\n\n\n\nprintToColor\n(\n\"Hello Red.\"\n,\n \n\"Red\"\n,\n \n{\nr\n=\n1\n,\ng\n=\n0\n,\nb\n=\n0\n})\n\n\n\n\n\n\n\nNotebook Function Details\n \n\n\naddNotebookTab(...)\n \n\n\n\u00a0Add a new notebook tab. If it failed to create a new tab, a -1 is returned instead. Indexes for notebook tabs begin at 0.\n\n\n\n\naddNotebookTab(parameters)\n\n\n\n\n \nparameters\n: A Table containing spawning parameters.\n\n\n \nparameters.title\n: Title for the new tab.\n\n\n \nparameters.body\n: Text to place into the body of the new tab.\n\n\nOptional, defaults to an empty string\n\n\n\n\n\n\n \nparameters.color\n: \nPlayer Color\n for the new tab's color.\n\n\nOptional, defaults to \"Grey\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparameters\n \n=\n \n{\n\n    \ntitle\n \n=\n \n\"New Tab\"\n,\n\n    \nbody\n \n=\n \n\"Body text example.\"\n,\n\n    \ncolor\n \n=\n \n\"Grey\"\n\n\n}\n\n\naddNotebookTab\n(\nparameters\n)\n\n\n\n\n\n\n\neditNotebookTab(...)\n \n\n\n\u00a0Edit an existing Tab in the notebook. Indexes for notebook tabs begin at 0.\n\n\n\n\neditNotebookTab(parameters)\n\n\n\n\n \nparameters\n: A Table containing instructions for the notebook edit.\n\n\n \nparameters.index\n: Index number for the tab.\n\n\n \nparameters.title\n: Title for the tab.\n\n\nOptional, defaults to the current title of the tab begin edited.\n\n\n\n\n\n\n \nparameters.body\n: Text for the body for the tab.\n\n\nOptional, defaults to the current body of the tab begin edited.\n\n\n\n\n\n\n \nparameters.color\n: \nPlayer Color\n for who the tab belongs to.\n\n\nOptional, defaults to the current color of the tab begin edited.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparams\n \n=\n \n{\n\n    \nindex\n \n=\n \n5\n,\n\n    \ntitle\n \n=\n \n\"Edited Title\"\n,\n\n    \nbody\n \n=\n \n\"This tab was edited via script.\"\n,\n\n    \ncolor\n \n=\n \n\"Grey\"\n\n\n}\n\n\neditNotebookTab\n(\nparams\n)\n\n\n\n\n\n\n\ngetNotebookTabs()\n \n\n\n\u00a0Returns a Table containing data on all tabs in the notebook. Indexes for notebook tabs begin at 0.\n\n\n--Example Usage\n\n\ntabInfo\n \n=\n \ngetNotebookTabs\n()\n\n\n\n\n--Example Returned Table\n\n\n{\n\n    \n{\nindex\n=\n0\n,\n \ntitle\n=\n\"\"\n,\n \nbody\n=\n\"\"\n,\n \ncolor\n=\n\"Grey\"\n},\n\n    \n{\nindex\n=\n1\n,\n \ntitle\n=\n\"\"\n,\n \nbody\n=\n\"\"\n,\n \ncolor\n=\n\"Grey\"\n},\n\n    \n{\nindex\n=\n2\n,\n \ntitle\n=\n\"\"\n,\n \nbody\n=\n\"\"\n,\n \ncolor\n=\n\"Grey\"\n},\n\n\n}\n\n\n\n\n\n\nremoveNotebookTab(...)\n \n\n\n\u00a0Remove a notebook tab. Notebook tab indexes begin at 0.\n\n\n\n\nremoveNotebookTab(index)\n\n\n\n\n \nindex\n: Index for the tab to remove.\n\n\n\n\n\n\nremoveNotebookTab\n(\n0\n)",
            "title": "Base"
        },
        {
            "location": "/base/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/base/#global-functions",
            "text": "General functions which work within any function.     Function Name  Description  Return  \u00a0      clearPixelPaint()  Remove pixel paint from the instance.      clearVectorPaint()  Remove vector paint from the instance.      copy( \u00a0object_list)  Copy a list of Objects to the clipboard. Works with  paste(...) .      destroyObject( \u00a0obj)  Destory an Object.      flipTable()  Flip the table.      getAllObjects()  Returns Table of all spawned  Objects  in the game.      getNotes()  Returns the contents of the on-screen notes section.      getObjectFromGUID( \u00a0guid)  Returns Object by its GUID. Will return  nil  if this GUID doesn't currently exist.      getSeatedPlayers()  Returns Table of the  Player Colors  strings of seated players.      paste( \u00a0parameters)  Pastes Objects in-game that were copied to the in-game clipboard. Works with  copy(...) .      setNotes( \u00a0notes)  Replace the text in the notes window with the string.      spawnObject( \u00a0parameters)  Spawns an Object. View the  Spawnable Object  page for Objects that can be spawned.      spawnObjectJSON( \u00a0parameters)  Spawns an Object using a JSON string. Works with  getJSON() .      startLuaCoroutine( \u00a0function_owner,  \u00a0function_name)  Start a coroutine.      stringColorToRGB( \u00a0player_color)  Converts a  Player Color  string into a Color Table for tinting.",
            "title": "Global Functions"
        },
        {
            "location": "/base/#message-functions",
            "text": "Functions which handle sending and displaying data.     Function Name  Description  Return  \u00a0      broadcastToAll( \u00a0message,  \u00a0message_tint)  Print an on-screen message to all Players, as well as their in-game chat.      broadcastToColor( \u00a0message,  \u00a0player_color,  \u00a0message_tint)  Print an on-screen message to a specified Player, as well as their in-game chat.      log( \u00a0element,  \u00a0label,  \u00a0tag)  Print information to the log tab. (Shortcut: ~)      logStyle( \u00a0tag,  \u00a0tint,  \u00a0prefix,  \u00a0postfix)  Set style options for the specified tag type for the log.      print( \u00a0message)  Prints a string into chat that only the host is able to see. Used for debugging scripts.      printToAll( \u00a0message,  \u00a0message_tint)  Print a message into the chat of all connected players.      printToColor( \u00a0message,  \u00a0player_color,  \u00a0message_tint)  Print a message to a specific  Player Color .      sendExternalMessage( \u00a0data)  Send a table to your external script editor, most likely Atom. This is for custom editor functionality.",
            "title": "Message Functions"
        },
        {
            "location": "/base/#notebook-functions",
            "text": "Functions that interact with the in-game notebook tabs.     Function Name  Description  Return  \u00a0      addNotebookTab( \u00a0parameters)  Adds a notebook tab, returning its index.      editNotebookTab( \u00a0parameters)  Edit an existing Tab in the notebook.      getNotebookTabs()  Returns Table containing data on all tabs in the notebook.      removeNotebookTab( \u00a0index)  Remove a notebook tab.",
            "title": "Notebook Functions"
        },
        {
            "location": "/base/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/base/#global-function-details",
            "text": "",
            "title": "Global Function details"
        },
        {
            "location": "/base/#copy",
            "text": "Copying a list of Objects the clipboard. Works with  paste(...) .   copy(object_list)     object_list : A Table of in-game objects to be copied.  This is similar to highlighting the objects in-game and copying them.      object_list   =   { \n     getObjectFromGUID ( \"######\" ), \n     getObjectFromGUID ( \"######\" ),  }  copy ( object_list )",
            "title": "copy(...)"
        },
        {
            "location": "/base/#destroyobject",
            "text": "Destroy an Object.   destroyObject(obj)     obj : The Object you wish to delete from the instance.",
            "title": "destroyObject(...)"
        },
        {
            "location": "/base/#getobjectfromguid",
            "text": "Returns Object by its GUID. Will return  nil  if this GUID doesn't currently exist.   getObjectFromGUID(guid)     guid : GUID of the Object to get a reference of.  GUID can be obtained by right clicking an object and going to Scripting.  In a script, it can be obtained from any Object by using .getGUID().",
            "title": "getObjectFromGUID(...)"
        },
        {
            "location": "/base/#paste",
            "text": "Pastes Objects in-game that were copied to the in-game clipboard. Works with  copy(...) .   paste(parameters)     parameters : A Table containing instructions of where to spawn the Objects.    parameters.position : Position of the first object to paste.  Optional, defaults to {0, 3, 0}.      parameters.snap_to_grid : If snap-to-grid is active on the spawned item/s.  Optional, defaults to false (off).",
            "title": "paste(...)"
        },
        {
            "location": "/base/#setnotes",
            "text": "Replace the text in the notes window with the string. The notes is an area which displays text in the lower-left corner of the screen.   setNotes(notes)     notes : What to place into the notes area.    setNotes ( \"This appears in the notes section\" )",
            "title": "setNotes(...)"
        },
        {
            "location": "/base/#spawnobject",
            "text": "Spawn an Object. View the  Spawnable Objects  page for Objects that can be spawned.  If you are spawning a  custom Object , you should call  setCustomObject  immediately after spawnObject to set its custom properties.   Tip  Spawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance.    spawnObject(parameters)     parameters : A Table of parameters used to determine how spawnObject will act.    parameters.type :  Spawnable Object  type.    parameters.position : Position to place Object.  Optional, defaults to {x=0, y=3, z=0}.      parameters.rotation : Rotation of the Object.  Optional, defaults to {x=0, y=0, z=0}      parameters.scale : Scale of the Object.  Optional, defaults to {x=1, y=1, z=1}      parameters.sound : If the spawned Object noise is played.  Optional, defaults to true.      parameters.snap_to_grid : If snap-to-grid is active on the Object.  Optional, defaults to false.      parameters.callback : Name of the function you want activated once the Object is initiated.  Optional, no callback is triggered without it.  A callback function has 2 parameters, the Object spawned and, if used, the Table of params.      parameters.callback_owner : Which Object has the callback function on it. Global is a valid target as well.  Optional, defaults to Global. Serves no purpose if callback is not also used.      parameters.params : A Table of data to send to the callback to use as parameters. See example.  Optional, default is to not be used.        function   onLoad () \n     futureName   =   \"Spawned By Script!\" \n     spawnParams   =   { \n         type   =   \"rpg_BEAR\" , \n         position         =   { x = 0 ,   y = 3 ,   z =- 5 }, \n         rotation         =   { x = 0 ,   y = 90 ,   z = 0 }, \n         scale            =   { x = 2 ,   y = 2 ,   z = 2 }, \n         sound            =   false , \n         snap_to_grid     =   true , \n         callback         =   \"spawn_callback\" , \n         callback_owner   =   Global , \n         params           =   { name   =   futureName } \n     } \n     spawnObject ( spawnParams )  end  function   spawn_callback ( object_spawned ,   params ) \n     object_spawned . setName ( params . name ) \n     object_spawned . setColorTint ({ r = 0 , g = 1 , b = 0 })  end",
            "title": "spawnObject(...)"
        },
        {
            "location": "/base/#spawnobjectjson",
            "text": "Spawns an Object using a JSON string. Works with  getJSON() . It works just like spawnObject, but instead of a  type , you supply a  json  string. The other parameters will overwrite those in the JSON.   Tip  Spawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance.    spawnObjectJSON(parameters)     parameters : A Table of parameters used to determine how spawnObjectJSON will act.    parameters.json :  getJSON()  string.    parameters.position : Position to place Object.  Optional, defaults to JSON's value.      parameters.rotation : Rotation of the Object.  Optional, defaults to JSON's value.      parameters.scale : Scale of the Object.  Optional, defaults to JSON's value.      parameters.sound : If the spawned Object noise is played.  Optional, defaults to JSON's value.      parameters.snap_to_grid : If snap-to-grid is active on the Object.  Optional, defaults to JSON's value.      parameters.callback : Name of the function you want activated once the Object is initiated.  Optional, no callback is triggered without it.  A callback function has 2 parameters, the Object spawned and, if used, the Table of params.      parameters.callback_owner : Which Object has the callback function on it. Global is a valid target as well.  Optional, defaults to Global. Serves no purpose if callback is not also used.      parameters.params : A Table of data to send to the callback to use as parameters. See example.  Optional, default is to not be used.        function   onLoad () \n     futureName   =   \"Spawned By Script!\" \n     spawnParams   =   { \n         json   =   self . getJSON (), \n         position         =   { x = 0 ,   y = 3 ,   z =- 5 }, \n         rotation         =   { x = 0 ,   y = 90 ,   z = 0 }, \n         scale            =   { x = 2 ,   y = 2 ,   z = 2 }, \n         sound            =   false , \n         snap_to_grid     =   true , \n         callback         =   \"spawn_callback\" , \n         callback_owner   =   Global , \n         params           =   { name   =   futureName } \n     } \n     spawnObject ( spawnParams )  end  function   spawn_callback ( object_spawned ,   params ) \n     object_spawned . setName ( params . name ) \n     object_spawned . setColorTint ({ r = 0 , g = 1 , b = 0 })  end",
            "title": "spawnObjectJSON(...)"
        },
        {
            "location": "/base/#startluacoroutine",
            "text": "Start a coroutine. A coroutine is similar to a function, but has the unique ability to have its run paused until the next frame of the game using  coroutine.yield(0) .   Attention  You MUST return a 1 at the end of any coroutine or it will throw an error.    startLuaCoroutine(function_owner, function_name)     function_owner : The Object that the function being called is on. Global is a valid target.    function_name : Name of the function being called as a coroutine.    function   onLoad () \n     startLuaCoroutine ( Global ,   \"print_coroutine\" )  end  -- Prints a message, waits 250 frames, prints another message  function   print_coroutine () \n     print ( \"Routine has Started\" ) \n     count   =   0 \n     while   count   <   250   do \n         count   =   count   +   1 \n         coroutine.yield ( 0 ) \n     end \n\n     print ( \"Routine has Finished\" ) \n\n     return   1  end",
            "title": "startLuaCoroutine(...)"
        },
        {
            "location": "/base/#stringcolortorgb",
            "text": "Converts a  Player Color  string into a Color Table for tinting.   stringColorToRGB(player_color)     player_color  A String of a  Player Color .    printToAll ( \"Blue message\" ,   stringColorToRGB ( \"Blue\" ))",
            "title": "stringColorToRGB(...)"
        },
        {
            "location": "/base/#message-function-details",
            "text": "",
            "title": "Message Function Details"
        },
        {
            "location": "/base/#broadcasttoall",
            "text": "Print an on-screen message to all Players.   broadcastToAll(message, message_tint)     message : Message to display on-screen.    message_tint : A Table containing the RGB color tint for the text.    msg   =   \"Hello all.\"  rgb   =   { r = 1 ,   g = 0 ,   b = 0 }  broadcastToAll ( msg ,   rgb )",
            "title": "broadcastToAll(...)"
        },
        {
            "location": "/base/#broadcasttocolor",
            "text": "Print an on-screen message to a specified Player and their in-game chat.   broadcastToColor(message,  player_color , message_tint)     message : Message to display on-screen.    player_color :  Player Color  to receive the message.    message_tint : RGB color tint for the text.    msg   =   \"Hello White.\"  color   =   \"White\"  rgb   =   { r = 1 ,   g = 0 ,   b = 0 }  broadcastToColor ( msg ,   color ,   rgb )",
            "title": "broadcastToColor(...)"
        },
        {
            "location": "/base/#log",
            "text": "Print information to the log. The log is a separate chat window which is visible to all players in the instance.  If a table is used for \"element\", the log will automatically display the key/value contents of it.   log(element, label, tag)     element : The information you want placed into the log.    label : Text to be placed before the Var element is printed to the log.  Optional, defaults to an empty String. Empty Strings are not displayed.      tag : Name that is usable to categorize log entries. (See:  logStyle )  Optional, defaults to an empty String. Empty Strings are not displayed.      log ( getAllObjects (),   \"table\" ,   \"All Objects:\" )",
            "title": "log(...)"
        },
        {
            "location": "/base/#logstyle",
            "text": "Set style options for the specified tag type for the log. This can also be set in the system console with the \"log_style_tag\" command.   logStyle(tag, tint, prefix, postfix)     tag : A String of the log's tag.    tint : RGB value to tint the log entry's text.  String color will also work. Example: \"Red\"      prefix : Text to place before this type of log entry.  Optional, defaults to an empty String. Empty Strings are not displayed.      postfix : Text to place after this type of log entry.  Optional, defaults to an empty String. Empty Strings are not displayed.      function   onLoad () \n     logStyle ( \"players\" ,   { 0.5 , 0.5 , 0.5 },   \"\" ,   \"End List\" ) \n     log ( getSeatedPlayers (),   \"players\" )  end",
            "title": "logStyle(...)"
        },
        {
            "location": "/base/#print",
            "text": "Print a string into chat that only the host is able to see. Used for debugging scripts.   print(message)     message : Text to print into the chat log.",
            "title": "print(...)"
        },
        {
            "location": "/base/#printtoall",
            "text": "Print a message into the in-game chat of all connected players.   printToAll(message, message_tint)     message : Message to place into players' in-game chats.    message_tint : RGB values for the text's color tint.    printToAll ( \"Hello World!\" ,   { r = 1 , g = 0 , b = 0 })",
            "title": "printToAll(...)"
        },
        {
            "location": "/base/#printtocolor",
            "text": "Print a message to the in-game chat of a specific player.   printToColor(message,  player_color , message_tint)     message : Message to place into the player's in-game chat.    player_color :  Player Color  of the player that will receive the message.    message_tint : RGB values for the text's color tint.    printToColor ( \"Hello Red.\" ,   \"Red\" ,   { r = 1 , g = 0 , b = 0 })",
            "title": "printToColor(...)"
        },
        {
            "location": "/base/#notebook-function-details",
            "text": "",
            "title": "Notebook Function Details"
        },
        {
            "location": "/base/#addnotebooktab",
            "text": "Add a new notebook tab. If it failed to create a new tab, a -1 is returned instead. Indexes for notebook tabs begin at 0.   addNotebookTab(parameters)     parameters : A Table containing spawning parameters.    parameters.title : Title for the new tab.    parameters.body : Text to place into the body of the new tab.  Optional, defaults to an empty string      parameters.color :  Player Color  for the new tab's color.  Optional, defaults to \"Grey\"        parameters   =   { \n     title   =   \"New Tab\" , \n     body   =   \"Body text example.\" , \n     color   =   \"Grey\"  }  addNotebookTab ( parameters )",
            "title": "addNotebookTab(...)"
        },
        {
            "location": "/base/#editnotebooktab",
            "text": "Edit an existing Tab in the notebook. Indexes for notebook tabs begin at 0.   editNotebookTab(parameters)     parameters : A Table containing instructions for the notebook edit.    parameters.index : Index number for the tab.    parameters.title : Title for the tab.  Optional, defaults to the current title of the tab begin edited.      parameters.body : Text for the body for the tab.  Optional, defaults to the current body of the tab begin edited.      parameters.color :  Player Color  for who the tab belongs to.  Optional, defaults to the current color of the tab begin edited.        params   =   { \n     index   =   5 , \n     title   =   \"Edited Title\" , \n     body   =   \"This tab was edited via script.\" , \n     color   =   \"Grey\"  }  editNotebookTab ( params )",
            "title": "editNotebookTab(...)"
        },
        {
            "location": "/base/#getnotebooktabs",
            "text": "Returns a Table containing data on all tabs in the notebook. Indexes for notebook tabs begin at 0.  --Example Usage  tabInfo   =   getNotebookTabs ()   --Example Returned Table  { \n     { index = 0 ,   title = \"\" ,   body = \"\" ,   color = \"Grey\" }, \n     { index = 1 ,   title = \"\" ,   body = \"\" ,   color = \"Grey\" }, \n     { index = 2 ,   title = \"\" ,   body = \"\" ,   color = \"Grey\" },  }",
            "title": "getNotebookTabs()"
        },
        {
            "location": "/base/#removenotebooktab",
            "text": "Remove a notebook tab. Notebook tab indexes begin at 0.   removeNotebookTab(index)     index : Index for the tab to remove.    removeNotebookTab ( 0 )",
            "title": "removeNotebookTab(...)"
        },
        {
            "location": "/object/",
            "text": "The Object class represents any entity within tabletop simulator. Once you have a reference to an object in youre script you can call functions on it directly. Example: \nobj.getPosition(...)\n. You can get a reference to an object multiple ways;\n\n\n\n\nUsing the \nself\n property if your script is on an Object and referring to that Object.\n\n\nUsing \ngetObjectFromGUID(...)\n with the object's GUID (found by right clicking it with the pointer).\n\n\nGetting it as a return from another function, like with \nspawnObject(...)\n.\n\n\n\n\nMember Variable Summary\n \n\n\nMember Variables\n \n\n\nThese are variables that objects share. They allow for direct access to an Object's property information without a helping function. Some are read-only.\n\n\nRead Example = \nisResting = self.resting\n Write Example = \nself.resting = true\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nangular_drag\n\n\nAngular drag. \nUnity rigidbody property\n.\n\n\n \n\n\n\n\n\n\nauto_raise\n\n\nIf an object should be lifted above other objects to avoid collision when held by a player.\n\n\n\n\n\n\n\n\nbounciness\n\n\nBounciness, value of 0-1. \nUnity physics material\n.\n\n\n\n\n\n\n\n\ndrag\n\n\nDrag. \nUnity rigidbody property\n.\n\n\n\n\n\n\n\n\ndynamic_friction\n\n\nDynamic friction, value of 0-1. \nUnity physics material\n.\n\n\n\n\n\n\n\n\ngrid_projection\n\n\nIf grid lines can appear on the Object if visible grids are turned on.\n\n\n\n\n\n\n\n\nguid\n\n\nThe 6 character unique Object identifier within Tabletop Simulator.\n\n\n\n\n\n\n\n\nheld_by_color\n\n\nThe Color of the Player that is holding the object.\n\n\n\n\n\n\n\n\ninteractable\n\n\nIf an object can be interacted with by Players. Other object will still be able to interact with it.\n\n\n\n\n\n\n\n\nmass\n\n\nMass. \nUnity rigidbody property\n.\n\n\n\n\n\n\n\n\nname\n\n\nThe Object's name. Read only, use \nsetName(\"\")\n to write to it.\n\n\n\n\n\n\n\n\nresting\n\n\nIf an Object is at rest. \nUnity rigidbody property\n.\n\n\n\n\n\n\n\n\nscript_code\n\n\nThe Lua Script on the Object.\n\n\n\n\n\n\n\n\nscript_state\n\n\nThe saved data on the object. See \nonSave()\n.\n\n\n\n\n\n\n\n\nstatic_friction\n\n\nStatic friction, value of 0-1. \nUnity physics material\n.\n\n\n\n\n\n\n\n\nsticky\n\n\nIf other Objects on top of this one are also picked up when this Object is.\n\n\n\n\n\n\n\n\ntag\n\n\nThis object's type. Read only.\n\n\n\n\n\n\n\n\ntooltip\n\n\nIf the tooltip opens when a pointer hovers over the object. Tooltips display name and description.\n\n\n\n\n\n\n\n\nuse_gravity\n\n\nIf gravity affects this object.\n\n\n\n\n\n\n\n\nuse_grid\n\n\nIf snapping to grid is enabled or not.\n\n\n\n\n\n\n\n\nuse_hands\n\n\nIf this object can be held in a hand zone.\n\n\n\n\n\n\n\n\nuse_snap_points\n\n\nIf snap points are used or ignored.\n\n\n\n\n\n\n\n\n\n\nThese member variables are classes of their own, and have their own member variables. Each one is for a special type of Object.\n\n\n\n\n\n\n\n\nVariable Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAssetBundle\n\n\nAn \nAssetBundle\n, which is a type of custom object made in Unity.\n\n\n\n\n\n\nClock\n\n\nA \nClock\n, which is the in-game digital clock.\n\n\n\n\n\n\nCounter\n\n\nA \nCounter\n, which is the in-game digital counter.\n\n\n\n\n\n\nRPGFigurine\n\n\nAn \nRPGFigurine\n, which is an in-game animated figurine.\n\n\n\n\n\n\nTextTool\n\n\nA \nTextTool\n, which is an in-game text display system.\n\n\n\n\n\n\n\n\n\n\nFunction Summary\n \n\n\nTransform Functions\n \n\n\nThese functions handle the physical attributes of an Object: Position, Rotation, Scale, Bounds, Velocity. In other words, moving objects around as well as getting information on how they are moving.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\naddForce(\n\u00a0vector, \n\u00a0force_type)\n\n\nAdds force to an object in a directional Vector.\n\n\n\n\n\n\n\n\n\n\naddTorque(\n\u00a0vector, \n\u00a0force_type)\n\n\nAdds torque to an object in a rotational Vector.\n\n\n\n\n\n\n\n\n\n\ngetAngularVelocity()\n\n\nReturns a Vector of the current angular velocity.\n\n\n\n\n\n\n\n\n\n\ngetBounds()\n\n\nReturns a Vector describing the size of an object in Global terms.\n\n\n\n\n\n\n\n\n\n\ngetBoundsNormalized()\n\n\nReturns a Vector describing the size of an object in Global terms, as if it was rotated to {0,0,0}.\n\n\n\n\n\n\n\n\n\n\ngetPosition()\n\n\nReturns a Vector of the current world position.\n\n\n\n\n\n\n\n\n\n\ngetRotation()\n\n\nReturns a Vector of the current rotation.\n\n\n\n\n\n\n\n\n\n\ngetScale()\n\n\nReturns a Vector of the current scale.\n\n\n\n\n\n\n\n\n\n\ngetTransformForward()\n\n\nReturns a Vector of the forward direction of this object.\n\n\n\n\n\n\n\n\n\n\ngetTransformRight()\n\n\nReturns a Vector of the right direction of this object.\n\n\n\n\n\n\n\n\n\n\ngetTransformUp()\n\n\nReturns a Vector of the up direction of this object.\n\n\n\n\n\n\n\n\n\n\ngetVelocity()\n\n\nReturns a Vector of the current velocity.\n\n\n\n\n\n\n\n\n\n\nisSmoothMoving()\n\n\nIndicates if an object is traveling as part of a Smooth move. Smooth moving is performed by setPositionSmooth and setRotationSmooth.\n\n\n\n\n\n\n\n\n\n\npositionToLocal(\n\u00a0vector)\n\n\nReturns a Vector after converting a world Vector to a local Vector.\n\n\n\n\n\n\n\n\n\n\npositionToWorld(\n\u00a0vector)\n\n\nReturns a Vector after converting a local Vector to a world Vector.\n\n\n\n\n\n\n\n\n\n\nrotate(\n\u00a0vector)\n\n\nRotates Object smoothly in the direction of the given Vector.\n\n\n\n\n\n\n\n\n\n\nscale(\n\u00a0vector or \n)\n\n\nScales Object by a multiple.\n\n\n\n\n\n\n\n\n\n\nsetAngularVelocity(\n\u00a0vector)\n\n\nSets a Vector as the current angular velocity.\n\n\n\n\n\n\n\n\n\n\nsetPosition(\n\u00a0vector)\n\n\nInstantly moves an Object to the given Vector.\n\n\n\n\n\n\n\n\n\n\nsetPositionSmooth(\n\u00a0vector, \n\u00a0collide, \n\u00a0fast)\n\n\nMoves the Object smoothly to the given Vector.\n\n\n\n\n\n\n\n\n\n\nsetRotation(\n\u00a0vector)\n\n\nInstantly rotates an Object to the given Vector.\n\n\n\n\n\n\n\n\n\n\nsetRotationSmooth(\n\u00a0vector, \n\u00a0collide, \n\u00a0fast)\n\n\nRotates the Object smoothly to the given Vector.\n\n\n\n\n\n\n\n\n\n\nsetScale(\n\u00a0vector)\n\n\nSets a Vector as the current scale.\n\n\n\n\n\n\n\n\n\n\nsetVelocity(\n\u00a0vector)\n\n\nSets a Vector as the current velocity.\n\n\n\n\n\n\n\n\n\n\ntranslate(\n\u00a0vector)\n\n\nSmoothly moves Object by the given Vector offset.\n\n\n\n\n\n\n\n\n\n\n\n\nUI Functions\n \n\n\nThese functions allow for the creation/editing/removal of functional buttons and text inputs which themselves trigger code within your scripts.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nclearButtons()\n\n\nRemoves all scripted buttons.\n\n\n\n\n\n\n\n\n\n\nclearInputs()\n\n\nRemoves all scripted inputs.\n\n\n\n\n\n\n\n\n\n\ncreateButton(\n\u00a0parameters)\n\n\nCreates a scripted button attached to the Object.\n\n\n\n\n\n\n\n\n\n\ncreateInput(\n\u00a0parameters)\n\n\nCreates a scripted input attached to the Object.\n\n\n\n\n\n\n\n\n\n\neditButton(\n\u00a0parameters)\n\n\nModify an existing button.\n\n\n\n\n\n\n\n\n\n\neditInput(\n\u00a0parameters)\n\n\nModify an existing input.\n\n\n\n\n\n\n\n\n\n\ngetButtons()\n\n\nReturns a Table of all buttons on this Object.\n\n\n\n\n\n\n\n\n\n\ngetInputs()\n\n\nReturns a Table of all inputs on this Object.\n\n\n\n\n\n\n\n\n\n\nremoveButton(\n\u00a0index)\n\n\nRemoves a specific button.\n\n\n\n\n\n\n\n\n\n\nremoveInput(\n\u00a0index)\n\n\nRemoves a specific button.\n\n\n\n\n\n\n\n\n\n\n\n\nGet Functions\n \n\n\nThese functions obtain information from an object.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\ngetColorTint()\n\n\nColor tint.\n\n\n\n\n\n\n\n\n\n\ngetCustomObject()\n\n\nReturns a Table with the Custom Object information of a Custom Object.\n\n\n\n\n\n\n\n\n\n\ngetDescription()\n\n\nDescription, also shows as part of Object's tooltip.\n\n\n\n\n\n\n\n\n\n\ngetGUID()\n\n\nString of the Object's unique identifier.\n\n\n\n\n\n\n\n\n\n\ngetJSON()\n\n\nReturns a serialization of the JSON string which represents this item. Works with \nspawnObjectJSON()\n.\n\n\n\n\n\n\n\n\n\n\ngetLock()\n\n\nIf the Object is locked.\n\n\n\n\n\n\n\n\n\n\ngetLuaScript()\n\n\nGet a Lua script as a string.\n\n\n\n\n\n\n\n\n\n\ngetName()\n\n\nName, also shows as part of Object's tooltip.\n\n\n\n\n\n\n\n\n\n\ngetObjects()\n\n\nReturns a Table of Objects in the script zone/bag/deck.\n\n\n\n\n\n\n\n\n\n\ngetQuantity()\n\n\nHow many objects are in the stack. Returns -1 if the Object is not a stack.\n\n\n\n\n\n\n\n\n\n\ngetRotationValues()\n\n\nReturns a Table of rotation values. Rotation values are used to give value to different rotations (like dice).\n\n\n\n\n\n\n\n\n\n\ngetStateId()\n\n\nCurrent \nstate\n ID (index) an object is in. Returns -1 if there are no other states. State ids (indexes) start at 1.\n\n\n\n\n\n\n\n\n\n\ngetStates()\n\n\nReturns a Table of information on the \nstates\n of an Object.\n\n\n\n\n\n\n\n\n\n\ngetTable(\n\u00a0func_name)\n\n\nData value of a variable in another Object's script. Can only return a table.\n\n\n\n\n\n\n\n\n\n\ngetValue()\n\n\nObject value. What the value represents depends on what type of Object this function is used on.\n\n\n\n\n\n\n\n\n\n\ngetVar(\n\u00a0func_name)\n\n\nData value of a variable in another Object's script. Cannot return a table.\n\n\n\n\n\n\n\n\n\n\n\n\nSet Functions\n \n\n\nThese functions apply action to an object. They take some property in order to work.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nsetColorTint(\n\u00a0Color)\n\n\nSets the Color tint.\n\n\n\n\n\n\n\n\n\n\nsetCustomObject(\n\u00a0parameters)\n\n\nSets a custom Object's properties.\n\n\n\n\n\n\n\n\n\n\nsetDescription(\n\u00a0description)\n\n\nSets a description for an Object. Shows in tooltip after delay.\n\n\n\n\n\n\n\n\n\n\nsetLock(\n\u00a0lock)\n\n\nSets if an object is locked in place.\n\n\n\n\n\n\n\n\n\n\nsetLuaScript(\n\u00a0script)\n\n\nInput a string as an Object's Lua script. Generally only used after spawning a new Object.\n\n\n\n\n\n\n\n\n\n\nsetName(\n\u00a0name)\n\n\nSets a name for an Object. Shows in tooltip.\n\n\n\n\n\n\n\n\n\n\nsetRotationValues(\n\u00a0rotation_values)\n\n\nSets rotation values of an object. Rotation values are used to give value to different rotations (like dice).\n\n\n\n\n\n\n\n\n\n\nsetState(\n\u00a0state_id)\n\n\nSets \nstate\n of an Object. State ids (indexes) start at 1.\n\n\n\n\n\n\n\n\n\n\nsetTable(\n\u00a0func_name, \n\u00a0data)\n\n\nCreates/updates a variable in another Object's script. Only used for tables.\n\n\n\n\n\n\n\n\n\n\nsetValue(\n\u00a0value)\n\n\nSets an Int as the value. What the value represents depends on what type of Object it is.\n\n\n\n\n\n\n\n\n\n\nsetVar(\n\u00a0func_name, \n\u00a0data)\n\n\nCreates/updates a variable in another Object's script. Cannot set a table.\n\n\n\n\n\n\n\n\n\n\n\n\nAction Function\n \n\n\nThese functions perform general actions on objects and do not require any input parameters.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\ncall(\n\u00a0func_name, \n\u00a0func_params)\n\n\nUsed to call a Lua function on this Object.\n\n\n\n\n\n\n\n\n\n\nflip()\n\n\nFlip Object over.\n\n\n\n\n\n\n\n\n\n\nclone(\n\u00a0parameters)\n\n\nCopy/Paste this Object, returning a reference to the new Object.\n\n\n\n\n\n\n\n\n\n\ncut()\n\n\nCuts (splits in half) a deck or stack Object.\n\n\n\n\n\n\n\n\n\n\ndeal(\n\u00a0number, \n\u00a0player_color, \n\u00a0index)\n\n\nDeals Objects. Will deal from decks/bags/stacks/individual items.\n\n\n\n\n\n\n\n\n\n\ndealToColorWithOffset(\n\u00a0offset, \n\u00a0flip, \n\u00a0player_color)\n\n\nDeals from a deck to a position relative to the hand zone.\n\n\n\n\n\n\n\n\n\n\ndestruct()\n\n\nDestroys Object. Allows for \nself.destruct()\n.\n\n\n\n\n\n\n\n\n\n\nhighlightOn(\n\u00a0color, \n\u00a0duration)\n\n\nCreates a highlight around an Object.\n\n\n\n\n\n\n\n\n\n\nhighlightOff(\n\u00a0color)\n\n\nRemoves a highlight from around an Object.\n\n\n\n\n\n\n\n\n\n\nputObject(\n\u00a0put_object)\n\n\nPlaces an object into a container (chip stacks/bags/decks).\n\n\n\n\n\n\n\n\n\n\nrandomize()\n\n\nShuffles deck/bag, rolls dice/coin, lifts other objects into the air. Same as pressing \nR\n by default.\n\n\n\n\n\n\n\n\n\n\nreload()\n\n\nReturns Object reference of itself after it respawns itself.\n\n\n\n\n\n\n\n\n\n\nreset()\n\n\nResets this Object. Resetting a Deck brings all the Cards back into it. Resetting a Bag clears its contents (works for both Loot and Infinite Bags).\n\n\n\n\n\n\n\n\n\n\nroll()\n\n\nRolls dice/coins.\n\n\n\n\n\n\n\n\n\n\nshuffle()\n\n\nShuffles/shakes up contents of a deck or bag.\n\n\n\n\n\n\n\n\n\n\nshuffleStates()\n\n\nReturns an Object reference to a new \nstate\n after randomly selecting and changing to one.\n\n\n\n\n\n\n\n\n\n\ntakeObject(\n\u00a0parameters)\n\n\nReturns an Object reference of Object taken from a container (bag/deck/chip stack) and placed into the world.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n \n\n\nTransform Function Details\n \n\n\naddForce(...)\n \n\n\n\u00a0Adds force to an object in a directional Vector.\n\n\n\n\naddForce(vector, force_type)\n\n\n\n\n \nVector\n: A Vector of the direction and magnitude of force.\n\n\n \nforce_type\n: An Int representing the force type to apply. Options below.\n\n\nOptional, defaults to 3.\n\n\n1\n: Continuous force, uses mass. \n(Force)\n\n\n2\n: Continuous acceleration, ignores mass. \n(Acceleration)\n\n\n3\n: Instant force impulse, uses mass. \n(Impulse)\n\n\n4\n: Instant velocity change, ignores mass. \n(Velocity Change)\n\n\n\n\n\n\n\n\n\n\n\n\naddTorque(...)\n \n\n\n\u00a0Adds torque to an object in a rotational Vector.\n\n\n\n\naddTorque(vector, force_type)\n\n\n\n\n \nVector\n: A Vector of the direction and magnitude of rotational force.\n\n\n \nForce Type\n: An Int representing the force type to apply. Options below.\n\n\nOptional, defaults to 3.\n\n\n1\n: Continuous force, uses mass. \n(Force)\n\n\n2\n: Continuous acceleration, ignores mass. \n(Acceleration)\n\n\n3\n: Instant force impulse, uses mass. \n(Impulse)\n\n\n4\n: Instant velocity change, ignores mass. \n(Velocity Change)\n\n\n\n\n\n\n\n\n\n\n\n\ngetBounds()\n \n\n\n\u00a0Returns a Table of Vector information describing the size of an object in Global terms. \nBounds\n are part of Unity, and represent an imaginary square box that can be drawn around an object. Unlike scale, it can help indicate the size of an object in in-game units, not just relative model size.\n\n\n\n\nReturn Table\n\n\n\n\n \ncenter\n: The Vector of the center of the bounding box.\n\n\n \nsize\n: The Vector of the size of the bounding box.\n\n\n \noffset\n: The Vector of the offset of the center of the bounding box from the middle of the Object model.\n\n\n\n\n\n\n-- Example returned Table\n\n\n{\n\n    \ncenter\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n3\n,\n \nz\n=\n0\n,\n \n0\n,\n \n3\n,\n \n0\n},\n\n    \nsize\n \n=\n \n{\nx\n=\n5\n,\n \ny\n=\n5\n,\n \nz\n=\n5\n},\n \n5\n,\n \n5\n,\n \n5\n},\n\n    \noffset\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=-\n1\n,\n \nz\n=\n0\n,\n \n0\n,\n \n-\n1\n,\n \n0\n}\n\n\n}\n\n\n\n\n\n\n\ngetBoundsNormalized()\n \n\n\n\u00a0Returns a Table of Vector information describing the size of an object in Global terms, as if it was rotated to {0,0,0}. \nBounds\n are part of Unity, and represent an imaginary square box that can be drawn around an object. Unlike scale, it can help indicate the size of an object in in-game units, not just relative model size.\n\n\n\n\nReturn Table\n\n\n\n\n \ncenter\n: The Vector of the center of the bounding box.\n\n\n \nsize\n: The Vector of the size of the bounding box.\n\n\n \noffset\n: The Vector of the offset of the center of the bounding box from the middle of the Object model.\n\n\n\n\n\n\n-- Example returned Table\n\n\n{\n\n    \ncenter\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n3\n,\n \nz\n=\n0\n,\n \n0\n,\n \n3\n,\n \n0\n},\n\n    \nsize\n \n=\n \n{\nx\n=\n5\n,\n \ny\n=\n5\n,\n \nz\n=\n5\n},\n \n5\n,\n \n5\n,\n \n5\n},\n\n    \noffset\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=-\n1\n,\n \nz\n=\n0\n,\n \n0\n,\n \n-\n1\n,\n \n0\n}\n\n\n}\n\n\n\n\n\n\n\ngetScale()\n \n\n\n\u00a0Returns a Vector of the current scale. Scale is not an absolute measurement, it is a multiple of the Object's default model size. So {x=2, y=2, z=2} would be a model twice its default size, not 2 units large.\n\n\n\n\ngetTransformForward()\n \n\n\n\u00a0Returns a Vector of the forward direction of this Object. The direction is relative to how the object is facing.\n\n\n-- Example of moving forward 5 units\n\n\nfunction\n \nonLoad\n()\n\n    \ndistance\n \n=\n \n5\n\n    \npos_target\n \n=\n \nself\n.\ngetTransformForward\n()\n\n    \npos_current\n \n=\n \nself\n.\ngetPosition\n()\n\n    \npos\n \n=\n \n{\n\n        \nx\n \n=\n \npos_current\n.\nx\n \n+\n \npos_target\n.\nx\n \n*\n \ndistance\n,\n\n        \ny\n \n=\n \npos_current\n.\ny\n \n+\n \npos_target\n.\ny\n \n*\n \ndistance\n,\n\n        \nz\n \n=\n \npos_current\n.\nz\n \n+\n \npos_target\n.\nz\n \n*\n \ndistance\n,\n\n    \n}\n\n    \nself\n.\nsetPositionSmooth\n(\npos\n)\n\n\nend\n\n\n\n\n\n\n\ngetTransformRight()\n \n\n\n\u00a0Returns a Vector of the forward direction of this object. The direction is relative to how the object is facing.\n\n\n-- Example of moving right 5 units\n\n\nfunction\n \nonLoad\n()\n\n    \ndistance\n \n=\n \n5\n\n    \npos_target\n \n=\n \nself\n.\ngetTransformRight\n()\n\n    \npos_current\n \n=\n \nself\n.\ngetPosition\n()\n\n    \npos\n \n=\n \n{\n\n        \nx\n \n=\n \npos_current\n.\nx\n \n+\n \npos_target\n.\nx\n \n*\n \ndistance\n,\n\n        \ny\n \n=\n \npos_current\n.\ny\n \n+\n \npos_target\n.\ny\n \n*\n \ndistance\n,\n\n        \nz\n \n=\n \npos_current\n.\nz\n \n+\n \npos_target\n.\nz\n \n*\n \ndistance\n,\n\n    \n}\n\n    \nself\n.\nsetPositionSmooth\n(\npos\n)\n\n\nend\n\n\n\n\n\n\n\ngetTransformUp()\n \n\n\n\u00a0Returns a Vector of the up direction of this Object. The direction is relative to how the object is facing.\n\n\n-- Example of moving up 5 units\n\n\nfunction\n \nonLoad\n()\n\n    \ndistance\n \n=\n \n5\n\n    \npos_target\n \n=\n \nself\n.\ngetTransformUp\n()\n\n    \npos_current\n \n=\n \nself\n.\ngetPosition\n()\n\n    \npos\n \n=\n \n{\n\n        \nx\n \n=\n \npos_current\n.\nx\n \n+\n \npos_target\n.\nx\n \n*\n \ndistance\n,\n\n        \ny\n \n=\n \npos_current\n.\ny\n \n+\n \npos_target\n.\ny\n \n*\n \ndistance\n,\n\n        \nz\n \n=\n \npos_current\n.\nz\n \n+\n \npos_target\n.\nz\n \n*\n \ndistance\n,\n\n    \n}\n\n    \nself\n.\nsetPositionSmooth\n(\npos\n)\n\n\nend\n\n\n\n\n\n\n\npositionToLocal(...)\n \n\n\n\u00a0Returns a Vector after converting a world vector to a local Vector. A world Vector is a positional Vector using the world's coordinate system. A Local Vector is a positional Vector that is relative to the position of the given object.\n\n\n\n\nObject Scale\n\n\nThis function takes the Object's scale into account, as the Object is the key relative point.\n\n\n\n\n\n\npositionToLocal(vector)\n\n\n\n\n \nvector\n: The world position to convert into a local position.\n\n\n\n\n\n\n\n\npositionToWorld(...)\n \n\n\n\u00a0Returns a Vector after converting a local Vector to a world Vector. A world Vector is a positional Vector using the world's coordinate system. A Local Vector is a positional Vector that is relative to the position of the given object.\n\n\n\n\nObject Scale\n\n\nThis function takes the Object's scale into account, as the Object is the key relative point.\n\n\n\n\n\n\npositionToLocal(vector)\n\n\n\n\n \nvector\n: The local position to convert into a world position.\n\n\n\n\n\n\n\n\nrotate(...)\n \n\n\n\u00a0Rotates Object smoothly in the direction of the given Vector. This does not set the Object to face a specific rotation, it rotates the Object around by the number of degrees given for x/y/z.\n\n\n\n\nrotate(vector)\n\n\n\n\n \nvector\n: The amount of x/y/z to rotate by.\n\n\n\n\n\n\n--Rotates object 90 degrees around its Y axis\n\n\nself\n.\nrotate\n({\nx\n=\n0\n,\n \ny\n=\n90\n,\n \nz\n=\n0\n})\n\n\n\n\n\n\n\nscale(...)\n \n\n\n\u00a0Scales Object by a multiple. This does not set the Object to a specific scale, it scales the Object by the given multiple.\n\n\n\n\nscale(scale)\n\n\n\n\n \nscale\n: Multiplier for scale.\n\n\n{x=1, y=1, z=1} would not change the scale.\n\n\n\n\n\n\n\n\n\n\n\n\nscale(scale)\n\n\n\n\n \nscale\n: Multiplier for scale which is applied to the X/Y/Z.\n\n\n1 would not change the scale.\n\n\n\n\n\n\n\n\n\n\n-- Both examples work to scale an object to be twice its current scale\n\n\nself\n.\nscale\n({\nx\n=\n2\n,\n \ny\n=\n2\n,\n \nz\n=\n2\n})\n\n\nself\n.\nscale\n(\n2\n)\n\n\n\n\n\n\n\nsetPositionSmooth(...)\n \n\n\n\u00a0Moves the Object smoothly to the given Vector.\n\n\n\n\nsetPositionSmooth(vector, collide, fast)\n\n\n\n\n \nVector\n: A positional Vector.\n\n\n \ncollide\n: If the Object will collide with other Objects while moving.\n\n\n \nfast\n: If the Object is moved quickly.\n\n\n\n\n\n\n\n\nsetRotationSmooth(...)\n \n\n\n\u00a0Rotates the Object smoothly to the given Vector.\n\n\n\n\nsetRotationSmooth(vector, collide, fast)\n\n\n\n\n \nVector\n: A rotational Vector.\n\n\n \ncollide\n: If the Object will collide with other Objects while rotating.\n\n\n \nfast\n: If the Object is rotated quickly.\n\n\n\n\n\n\n\n\nUI Function Details\n \n\n\ncreateButton(...)\n \n\n\n\u00a0Creates a scripted button attached to the Object. Scripted buttons are buttons that can be clicked while in-game that trigger a function in a script.\n\n\nButton Tips\nButtons can not be clicked from their back side.\nButtons can not be clicked if there is another object between the pointer and the button. This does not include the Object the button is attached to.\nButtons are placed relative to the Object they are attached to.\nThe maximum font size is capped at 1000.\nThe minimum width/height is 60. Any lower number (besides 0) will appear to be 60. This prevents visual glitches involving the corner rounding.\nA button width/height of 0 will cause the button not to be drawn, but its label will be. This can be a way to attach text to an Object.\nYou cannot assign an index to a button. It is given one automatically.\n\n\ncreateButton(parameters)\n\n\n\n\n \nparameters\n: A Table containing the information used to spawn the button.\n\n\n \nparameters.click_function\n: A String of the function's name that will be run when button is clicked.\n\n\n \nparameters.function_owner\n: The Object which contains the click_function function.\n\n\nOptional, Defaults to Global.\n\n\n\n\n\n\n \nparameters.label\n: Text that appears on the button.\n\n\nOptional, defaults to an empty string.\n\n\n\n\n\n\n \nparameters.position\n: Where the button appears, relative to the Object's center.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\n \nparameters.rotation\n: How the button is rotated, relative to the Object's rotation.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\n \nparameters.scale\n: Scale of the button, relative to the Object's scale.\n\n\nOptional, defaults to {x=1, y=1, z=1}.\n\n\n\n\n\n\n \nparameters.width\n: How wide the button will be, relative to the Object.\n\n\nOptional, defaults to 100.\n\n\n\n\n\n\n \nparameters.height\n: How tall the button will be, relative to the Object.\n\n\nOptional, defaults to 100.\n\n\n\n\n\n\n \nparameters.font_size\n: Size the label font will be, relative to the Object.\n\n\nOptional, defaults to 100.\n\n\n\n\n\n\n \nparameters.color\n: A Color for the clickable button.\n\n\nOptional, defaults to {r=1, g=1, b=1}.\n\n\n\n\n\n\n \nparameters.font_color\n: A Color for the label text.\n\n\nOptional, defaults to {r=0, g=0, b=0}.\n\n\n\n\n\n\n \nparameters.hover_color\n: A Color for the background during mouse-over.\n\n\nOptional.\n\n\n\n\n\n\n \nparameters.press_color\n: A Color for the background when clicked.\n\n\nOptional.\n\n\n\n\n\n\n \nparameters.tooltip\n: Popup of text, similar to how an Object's name is displayed on mouseover.\n\n\nOptional, defaults to an empty string.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick_function(obj, player_clicker_color, alt_click)\n\n\nThe click function which is activated by clicking this button has its own parameters it is passed automatically.\n\n\n\n\n \nobj\n: The Object the button is attached to.\n\n\n \nplayer_clicker_color\n: \nPlayer Color\n of the player that pressed the button.\n\n\n \nalt_click\n: True if a button other than left-click was used to click the button.\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nparams\n \n=\n \n{\n\n        \nclick_function\n \n=\n \n\"click_func\"\n,\n\n        \nfunction_owner\n \n=\n \nself\n,\n\n        \nlabel\n          \n=\n \n\"Test\"\n,\n\n        \nposition\n       \n=\n \n{\n0\n,\n \n1\n,\n \n0\n},\n\n        \nrotation\n       \n=\n \n{\n0\n,\n \n180\n,\n \n0\n},\n\n        \nwidth\n          \n=\n \n800\n,\n\n        \nheight\n         \n=\n \n400\n,\n\n        \nfont_size\n      \n=\n \n340\n,\n\n        \ncolor\n          \n=\n \n{\n0.5\n,\n \n0.5\n,\n \n0.5\n},\n\n        \nfont_color\n     \n=\n \n{\n1\n,\n \n1\n,\n \n1\n},\n\n        \ntooltip\n        \n=\n \n\"This text appears on mouseover.\"\n,\n\n    \n}\n\n    \nself\n.\ncreateButton\n(\nparams\n)\n\n\nend\n\n\n\nfunction\n \nclick_func\n(\nobj\n,\n \ncolor\n,\n \nalt_click\n)\n\n    \nprint\n(\nobj\n)\n\n    \nprint\n(\ncolor\n)\n\n    \nprint\n(\nalt_click\n)\n\n\nend\n\n\n\n\n\n\n\nBug\n\n\nButton scale currently distorts button height and width if the button is rotated at anything besides \n{0,0,0}\n.\n\n\n\n\n\n\ncreateInput(...)\n \n\n\n\u00a0Creates a scripted input attached to the Object. Scripted inputs are boxes you can click inside of in-game to input/edit text. Every letter typed triggers the function. The bool that is returned as part of the input_function allows you to determine when a player has finished editing the input.\n\n\nInput Tips\nInputs can not be clicked from their back side.\nInputs can not be clicked if there is another object between the pointer and the inputs. This does not include the Object the input is attached to.\nInputs are placed relative to the Object they are attached to.\nThe maximum font size is capped at 1000.\nThe minimum width/height is 60. Any lower number (besides 0) will appear to be 60. This prevents visual glitches involving the corner rounding.\nFont that does not fit in the input window's width/height does NOT display. To know how much height you need for each line, the formula is \n(font_size * # of lines) + 23\n. In other words, multiply how many lines of text you want to display by your font_size and add 23. That is your height value.\nYou cannot assign an index to an input. It is given one automatically.\n\n\ncreateInput(parameters)\n\n\n\n\n \nparameters\n: A Table containing the information used to spawn the input.\n\n\n \nparameters.input_function\n: A String of the function's name that will be run when a key is used or when it is deselected.\n\n\n \nparameters.function_owner\n: The Object which contains the input_function function.\n\n\nOptional, Defaults to Global.\n\n\n\n\n\n\n \nparameters.label\n: Text that appears as greyed out text when there is no value in the input.\n\n\nOptional, defaults to an empty string.\n\n\n\n\n\n\n \nparameters.position\n: Where the input appears, relative to the Object's center.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\n \nparameters.rotation\n: How the input is rotated, relative to the Object's rotation.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\n \nparameters.scale\n: Scale of the input, relative to the Object's scale.\n\n\nOptional, defaults to {x=1, y=1, z=1}.\n\n\n\n\n\n\n \nparameters.width\n: How wide the input will be, relative to the Object.\n\n\nOptional, defaults to 100.\n\n\n\n\n\n\n \nparameters.height\n: How tall the input will be, relative to the Object.\n\n\nOptional, defaults to 100.\n\n\n\n\n\n\n \nparameters.font_size\n: Size the label/value font will be, relative to the Object.\n\n\nOptional, defaults to 100.\n\n\n\n\n\n\n \nparameters.color\n: A Color for the input's background.\n\n\nOptional, defaults to {r=1, g=1, b=1}.\n\n\n\n\n\n\n \nparameters.font_color\n: A Color for the value text.\n\n\nOptional, defaults to {r=0, g=0, b=0}.\n\n\n\n\n\n\n \nparameters.tooltip\n: A popup of text, similar to how an Object's name is displayed on mouseover.\n\n\nOptional, defaults to an empty string.\n\n\n\n\n\n\n \nparameters.alignment\n: How text is aligned in the input box.\n\n\nOptional, defaults to 1.\n\n\n1\n: Automatic\n\n\n2\n: Left\n\n\n3\n: Center\n\n\n4\n: Right\n\n\n5\n: Justified\n\n\n\n\n\n\n \nparameters.value\n: Text entered into the input.\n\n\nOptional, defaults to an empty string.\n\n\n\n\n\n\n \nparameters.validation\n: What characters can be input into the input value field.\n\n\nOptional, defaults to 1.\n\n\n1\n: None\n\n\n2\n: Integer\n\n\n3\n: Float\n\n\n4\n: Alphanumeric\n\n\n5\n: Username\n\n\n6\n: Name\n\n\n\n\n\n\n \nparameters.tab\n: How the pressing of \"tab\" is handled when inputting.\n\n\nOptional, defaults to 1.\n\n\n1\n: None\n\n\n2\n: Select Next Input\n\n\n3\n: Indent\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninput_function(obj, player_clicker_color, input_value, selected)\n\n\nThe click function which is activated by editing the text in this input has its own parameters it is passed automatically.\n\n\n\n\n \nobj\n: The Object the input is attached to.\n\n\n \nplayer_clicker_color\n: \nPlayer Color\n of the player that has selected/edited the input.\n\n\n \ninput_value\n: Text currently in the input.\n\n\n \nselected\n: If the value box is still being edited or not.\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nself\n.\ncreateInput\n({\n\n        \ninput_function\n \n=\n \n\"input_func\"\n,\n\n        \nfunction_owner\n \n=\n \nself\n,\n\n        \nlabel\n          \n=\n \n\"Gold\"\n,\n\n        \nalignment\n      \n=\n \n4\n,\n\n        \nposition\n       \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n1\n,\n \nz\n=\n0\n},\n\n        \nwidth\n          \n=\n \n800\n,\n\n        \nheight\n         \n=\n \n300\n,\n\n        \nfont_size\n      \n=\n \n323\n,\n\n        \nvalidation\n     \n=\n \n2\n,\n\n    \n})\n\n\nend\n\n\n\nfunction\n \ninput_func\n(\nobj\n,\n \ncolor\n,\n \ninput\n,\n \nstillEditing\n)\n\n    \nprint\n(\ninput\n)\n\n    \nif\n \nnot\n \nstillEditing\n \nthen\n\n        \nprint\n(\n\"Finished editing.\"\n)\n\n    \nend\n\n\nend\n\n\n\n\n\n\n\neditButton(...)\n \n\n\n\u00a0Modify an existing button. The only parameter that is required is the index. The rest are optional, and not using them will cause the edited button's element to remain. Indexes start at 0. The first button on any given Object has an index of 0, the next button on it has an index of 1, etc. Each Object has its own indexes.\n\n\n\n\neditButton(parameters)\n\n\n\n\n \nparameters\n: A Table containing the information used to spawn the button.\n\n\n \nparameters.index\n: Index of the button you want to edit.\n\n\n \nparameters.click_function\n: Function's name that will be run when button is clicked.\n\n\n \nparameters.function_owner\n: The Object which contains the click_function function.\n\n\n \nparameters.label\n: Text that appears on the button.\n\n\n \nparameters.position\n: Where the button appears, relative to the Object's center.\n\n\n \nparameters.rotation\n: How the button is rotated, relative to the Object's rotation.\n\n\n \nparameters.scale\n: Scale of the button, relative to the Object's scale.\n\n\n \nparameters.width\n: How wide the button will be, relative to the Object.\n\n\n \nparameters.height\n: How tall the button will be, relative to the Object.\n\n\n \nparameters.font_size\n: Size the label font will be, relative to the Object.\n\n\n \nparameters.color\n: A Color for the clickable button.\n\n\n \nparameters.font_color\n: A Color for the label text.\n\n\n \nparameters.hover_color\n: A Color for the background during mouse-over.\n\n\n \nparameters.press_color\n: A Color for the background when clicked.\n\n\n \nparameters.tooltip\n: Text of a popup of text, similar to how an Object's name is displayed on mouseover.\n\n\n\n\n\n\n\n\n\n\nself\n.\neditButton\n({\nindex\n=\n0\n,\n \nlabel\n=\n\"New Label\"\n})\n\n\n\n\n\n\n\neditInput(...)\n \n\n\n\u00a0Modify an existing input. The only parameter that is required is the index. The rest are optional, and not using them will cause the edited input's element to remain. Indexes start at 0. The first input on any given Object has an index of 0, the next input on it has an index of 1, etc. Each Object has its own indexes.\n\n\n\n\neditInput(parameters)\n\n\nAll fields besides \nindex\n are optional. If not used, the element will default to the element's current setting.\n\n\n\n\n \nparameters\n: A Table containing the information used to spawn the input.\n\n\n \nparameters.index\n: Index of the input you want to edit.\n\n\n \nparameters.input_function\n: The function's name that will be run when the input is selected.\n\n\n \nparameters.function_owner\n: The Object which contains the input_function function.\n\n\n \nparameters.label\n: Text that appears as greyed out text when there is no value in the input.\n\n\n \nparameters.position\n: Where the input appears, relative to the Object's center.\n\n\n \nparameters.rotation\n: How the input is rotated, relative to the Object's rotation.\n\n\n \nparameters.scale\n: Scale of the input, relative to the Object's scale.\n\n\n \nparameters.width\n: How wide the input will be, relative to the Object.\n\n\n \nparameters.height\n: How tall the input will be, relative to the Object.\n\n\n \nparameters.font_size\n: Size the label/value font will be, relative to the Object.\n\n\n \nparameters.color\n: A Color for the input's background.\n\n\n\u00a0\nparameters.font_color\n: A Color for the value text.\n\n\n \nparameters.tooltip\n: A popup of text, similar to how an Object's name is displayed on mouseover.\n\n\n \nparameters.alignment\n: How text is aligned in the input box.\n\n\n1\n: Automatic\n\n\n2\n: Left\n\n\n3\n: Center\n\n\n4\n: Right\n\n\n5\n: Justified\n\n\n\n\n\n\n \nparameters.value\n: A String of the text entered into the input.\n\n\n \nparameters.validation\n: An Int which determines what characters can be input into the value.\n\n\n1\n: None\n\n\n2\n: Integer\n\n\n3\n: Float\n\n\n4\n: Alphanumeric\n\n\n5\n: Username\n\n\n6\n: Name\n\n\n\n\n\n\n \nparameters.tab\n: An Int which determines how pressing tab is handled when inputting.\n\n\n1\n: None\n\n\n2\n: Select Next Input\n\n\n3\n: Indent\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nself\n.\neditInput\n({\nindex\n=\n0\n,\n \nvalue\n=\n\"New Value\"\n})\n\n\n\n\n\n\n\ngetButtons()\n \n\n\n\u00a0Returns a Table of all buttons on this Object. The Table contains parameters tables with the same keys as seen in the \ncreateButton\n section, except each Table of parameters also contains an \nindex\n entry. This is used to identify each button, used by \neditButton\n and \nremoveButton\n.\n\n\nIndexes start at 0.\n\n\n\n\ngetInputs()\n \n\n\n\u00a0Returns a Table of all inputs on this Object. The Table contains parameters tables with the same keys as seen in the \ncreateInput\n section, except each Table of parameters also contains an \nindex\n entry. This is used to identify each input, used by \neditInput\n and \nremoveInput\n.\n\n\nIndexes start at 0.\n\n\n\n\nremoveButton(...)\n \n\n\n\u00a0Removes a specific button. Indexes start at 0. The first button on any given Object has an index of 0, the next button on it has an index of 1, etc. Each Object has its own indexes.\n\n\nRemoving an index instantly causes all other higher indexes to shift down 1.\n\n\n\n\nremoveButton(index)\n\n\n\n\n \nindex\n: Button index to remove.\n\n\n\n\n\n\n\n\nremoveInput(...)\n \n\n\n\u00a0Removes a specific input. Indexes start at 0. The first button on any given Object has an index of 0, the next input on it has an index of 1, etc. Each Object has its own indexes.\n\n\nRemoving an index instantly causes all other higher indexes to shift down 1.\n\n\n\n\nremoveInput(index)\n\n\n\n\n \nindex\n: Input index to remove.\n\n\n\n\n\n\n\n\nGet Function Details\n \n\n\ngetCustomObject()\n \n\n\n\u00a0Returns a Table with the Custom Object information of a Custom Object. See the \nSpawnable Objects\n page for the kind of information returned.\n\n\n-- Example returned Table for a custom token\n\n\n{\n\n    \nimage\n \n=\n \n\"SOME URL HERE\"\n,\n\n    \nthickness\n \n=\n \n0.2\n,\n\n    \nmerge_distance\n \n=\n \n15\n,\n\n    \nstackable\n \n=\n \nfalse\n,\n\n\n}\n\n\n\n\n\n\n\ngetObjects()\n \n\n\n\u00a0Returns a Table of objects in the script zone/bag/deck. What it returns varies depending on the type of Object it is used on.\n\n\nIf an Object is inside of a container, it does not exist in-game. As a result, you only get data on each Object, not an Object reference.\n\n\n\n\nReturn Table by Object Type\n\n\n\n\nScripting Zone\n\n\nReturns a Table of Object references to every object in the scripting zone.\n\n\n{\n\n    \nobject_1\n,\n\n    \nobject_2\n,\n\n\n}\n\n\n\n\n\n\n\n\n\nBag\n\n\nReturns a Table of sub-Tables, each sub-Table containing data on 1 bagged item. Indexes start at 0.\n\n\n\n\n \nname\n: Name of the Object.\n\n\n \nguid\n: GUID of the Object.\n\n\n \nindex\n: Index of the Object, represents the Object's place in the bag.\n\n\n\n\n{\n\n    \n{\n\n        \nname\n  \n=\n \n\"Object Name\"\n,\n\n        \nguid\n  \n=\n \n\"AAA111\"\n,\n\n        \nindex\n \n=\n \n0\n,\n\n    \n},\n\n\n}\n\n\n\n\n\n\n\n\n\nDeck\n\n\nReturns a Table of sub-Tables, each sub-Table containing data on 1 card. Indexes start at 0.\n\n\n\n\n \nnickname\n: Name of the card.\n\n\n \ndescription\n: Description of the card.\n\n\n \nguid\n: GUID of the card.\n\n\n \nindex\n: Index of the card, represents the card's order in the deck.\n\n\n \nlua_script\n: Any Lua scripting saved on the card.\n\n\n\n\n{\n\n    \n{\n\n        \nnickname\n    \n=\n \n\"Object Name\"\n,\n\n        \ndescription\n \n=\n \n\"Object Descripotion\"\n,\n\n        \nguid\n        \n=\n \n\"AAA111\"\n,\n\n        \nindex\n       \n=\n \n0\n,\n\n        \nlua_script\n  \n=\n \n\"Any Lua Script On This Card\"\n,\n\n    \n},\n\n\n}\n\n\n\n\n\n\n\n\n\nThis function is often used with \ntakeObject(...)\n to remove objects from containers.\n\n\n\n\ngetRotationValues()\n \n\n\n\u00a0Returns a Table of rotation values. Rotation values are used to give value to different rotations (like dice) based on which side is pointed \"up\". It works by checking all of the rotation values assigned to an object and determining which one of them is closest to pointing up, and then displaying the value associated with that rotation.\n\n\nYou can manually assign rotation values to objects using the Rotation Value Gizmo tool (in the left side Gizmo menu) or using \nsetRotationValues(...)\n.\n\n\n\n\nReturn Table\n\n\nThe returned Table contains sub-Tables, each sub-Table containing these 2 key/value pairs.\n\n\n\n\n \nvalue\n: What value is associated with a given rotation. Often a String or Int.\n\n\n\u00a0\nrotation\n: Rotation of the Object that best represents the given value pointing up.\n\n\n\n\n\n\n-- Example returned Table for a coin\n\n\n{\n\n    \n{\nvalue\n=\n\"Heads\"\n,\n \nrotation\n=\n{\nx\n=\n0\n,\n \ny\n=\n0\n,\n \nz\n=\n0\n}},\n\n    \n{\nvalue\n=\n\"Tails\"\n,\n \nrotation\n=\n{\nx\n=\n180\n,\n \ny\n=\n0\n,\n \nz\n=\n0\n}},\n\n\n}\n\n\n\n\n\n\n\ngetStates()\n \n\n\n\u00a0Returns a Table of information on the \nstates\n of an Object. Stated Objects have ids (indexes) starting with 1.\n\n\n\n\nReturn Table\n\n\n\n\n\u00a0\nname\n: Name of the Object.\n\n\n\u00a0\nguid\n: GUID of the Object.\n\n\n\u00a0\nid\n: ID (index) of the state.\n\n\n\n\n\n\n-- Example returned Table\n\n\n{\n\n    \n{\n\n        \nname\n \n=\n \n\"First State\"\n,\n\n        \nguid\n \n=\n \n\"AAA111\"\n,\n\n        \nid\n   \n=\n \n1\n,\n\n    \n},\n\n    \n{\n\n        \nname\n \n=\n \n\"Second State\"\n,\n\n        \nguid\n \n=\n \n\"BBB222\"\n,\n\n        \nid\n   \n=\n \n2\n,\n\n    \n},\n\n\n}\n\n\n\n\n\n\n\ngetValue()\n \n\n\n\u00a0Gets a value. What the value represents depends on what type of Object this function is used on.\n\n\n\n\n\n\n\n\nObject\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nClock\n\n\nReturns Int of stopwatch/timer current time \n(in seconds)\n.\n\n\n\n\n\n\nCounter\n\n\nReturns Int of counter value.\n\n\n\n\n\n\nRotation Value\n\n\nReturns Var of the face-up value.\n\n\n\n\n\n\nHidden Zone\n\n\nReturns String of the Player \nColor\n of the zone.\n\n\n\n\n\n\nPoker Chip\n\n\nReturns Int of the face value. \nDoes not work on custom chips.\n\n\n\n\n\n\nTablet\n\n\nReturns String of the current URL.\n\n\n\n\n\n\n\n\n\n\nSet Function Details\n \n\n\nsetCustomObject(...)\n \n\n\n\u00a0Sets a custom Object's properties. It can be used after \nspawnObject\n or on an already existing custom Object. If used on an already existing custom Object, you must use \nreload\n on the object after setCustomObject for the changes to be displayed.\n\n\n\n\nsetCustomObject(parameters)\n\n\nThe Table of parameters varies, depending on which type of custom Object it is. See the \nSpawnable Object\n page for the parameters needed.\n\n\n\n\n-- Example of a custom token\n\n\nparams\n \n=\n \n{\n\n    \nimage\n \n=\n \n\"SOME URL HERE\"\n,\n\n    \nthickness\n \n=\n \n0.2\n,\n\n    \nmerge_distance\n \n=\n \n15\n,\n\n    \nstackable\n \n=\n \nfalse\n,\n\n\n}\n\n\nobj\n.\nsetCustomObject\n(\nparams\n)\n\n\n\n\n\n\n\nsetRotationValues(...)\n \n\n\n\u00a0Sets rotation values of an object. Rotation values are used to give value to different rotations (like dice). It works by checking all of the rotation values assigned to an object and determining which one of them is closest to pointing up, and then displaying the value associated with that rotation.\n\n\n\n\nsetRotationValues(rotation_values)\n\n\n\n\n\u00a0\nrotation_values\n: A Table containing Tables with the following values. 1 sub-Table per \"face\".\n\n\n\u00a0\nrotation_values.value\n: What value is associated with a given rotation. Often a String or Int.\n\n\n\u00a0\nrotation_values.rotation\n: The rotation Vector of the Object that best represents the given value pointing up.\n\n\n\n\n\n\n\n\n\n\n-- Example setting of rotation values for a coin\n\n\nrotation_values\n \n=\n \n{\n\n    \n{\nvalue\n=\n\"Heads\"\n,\n \nrotation\n=\n{\nx\n=\n0\n,\n \ny\n=\n0\n,\n \nz\n=\n0\n}},\n\n    \n{\nvalue\n=\n\"Tails\"\n,\n \nrotation\n=\n{\nx\n=\n180\n,\n \ny\n=\n0\n,\n \nz\n=\n0\n}},\n\n\n}\n\n\nself\n.\nsetRotationValues\n(\nrotation_values\n)\n\n\n\n\n\n\n\nsetValue(...)\n \n\n\n\u00a0Sets a value on an Object. What the value represents depends on what type of Object it is.\n\n\n\n\n\n\n\n\nObject\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nClock\n\n\nSet Int for stopwatch/timer current time \n(in seconds)\n.\n\n\n\n\n\n\nCounter\n\n\nSet Int for counter value.\n\n\n\n\n\n\nRotation Value\n\n\nSet Var for the face-up value.\n\n\n\n\n\n\nHidden Zone\n\n\nSet String for the Player \nColor\n of the zone.\n\n\n\n\n\n\nTablet\n\n\nSet String for the current URL.\n\n\n\n\n\n\n\n\n\n\nAction Function Details\n \n\n\ncall(...)\n \n\n\n\u00a0Used to call a Lua function on this Object. This is used to remotely call functions in other scripts, either in Global or Object scripts. \nGlobal\n is the \"Object\" to use to call a function in the Global script.\n\n\nVar is only returned if the function called has a \nreturn\n. Otherwise return is \nnil\n. See example.\n\n\n\n\ncall(func_name, func_params)\n\n\n\n\n \nfunc_name\n: Function name you want to activate.\n\n\n \nfunc_params\n: A Table containing any data you want to pass to that function.\n\n\nOptional, will not be sent by default.\n\n\n\n\n\n\n\n\n\n\n-- Call, used from an Object script\n\n\nparams\n \n=\n \n{\n\n    \nmsg\n   \n=\n \n\"Hello world!\"\n,\n\n    \ncolor\n \n=\n \n{\nr\n=\n0.2\n,\n \ng\n=\n1\n,\n \nb\n=\n0.2\n},\n\n\n}\n\n\n-- Success would be set to true by the return value in the function\n\n\nsuccess\n \n=\n \nGlobal\n.\ncall\n(\n\"testFunc\"\n,\n \nparams\n)\n\n\n\n\n-- Function in Global\n\n\nfunction\n \ntestFunc\n(\nparams\n)\n\n    \nbroadcastToAll\n(\nparams\n.\nmsg\n,\n \nparams\n.\ncolor\n)\n\n    \nreturn\n \ntrue\n\n\nend\n\n\n\n\n\n\nclone(...)\n \n\n\n\u00a0Copy/Paste this Object.\n\n\n\n\nclone(parameters)\n\n\n\n\n \nparameters\n: A Table with information used when pasting.\n\n\n \nparameters.position\n: Where the Object is placed.\n\n\nOptional, defaults to {x=0, y=3, z=0}.\n\n\n\n\n\n\n \nparameters.snap_to_grid\n: If the Object snaps to grid.\n\n\nOptional, defaults to false.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndeal(...)\n \n\n\n\u00a0Deals Objects to hand zones. Will deal from decks/bags/stacks as well as individual items. If dealing an individual item to a hand zone, it is a good idea to make sure that its \nMember Variable\n for \nuse_hands\n is \ntrue\n.\n\n\n\n\ndeal(number, player_color, index)\n\n\n\n\n \nnumber\n: How many to deal.\n\n\n \nplayer_color\n: The \nPlayer Color\n to deal to.\n\n\nOptional, defaults to an empty string. If not supplied, it will attempt to deal to all seated players.\n\n\n\n\n\n\n \nindex\n: Index of which Object to deal from a container.\n\n\nOptional, defaults to 0. If not supplied it will deal in regular order.\n\n\n\n\n\n\n\n\n\n\n\n\ndealToColorWithOffset(...)\n \n\n\n\u00a0Deals from a deck to a position relative to the hand zone.\n\n\n\n\ndealToColorWithOffset(offset, flip, player_color)\n\n\n\n\n \noffset\n: The x/y/z offset to deal to around the given hand zone.\n\n\n \nflip\n: If the card is flipped over when dealt.\n\n\n \nplayer_color\n: Hand zone \nPlayer Color\n to offset dealing to.\n\n\n\n\n\n\n-- Example of dealing 2 cards in front of the White player, face up.\n\n\nself\n.\ndealToColorWithOffset\n({\n-\n2\n,\n0\n,\n5\n},\n \ntrue\n,\n \n\"White\"\n)\n\n\nself\n.\ndealToColorWithOffset\n({\n \n2\n,\n0\n,\n5\n},\n \ntrue\n,\n \n\"White\"\n)\n\n\n\n\n\nputObject(...)\n \n\n\n\u00a0Places an object into a container (chip stacks/bags/decks).\n\n\n\n\nputObject(put_object)\n\n\n\n\n \nput_object\n: An Object to place into the container.\n\n\n\n\n\n\n-- Example of a script on a bag that places Object into itself\n\n\nlocal\n \nobj\n \n=\n \ngetObjectFromGUID\n(\n\"AAA111\"\n)\n\n\nself\n.\nputObject\n(\nobj\n)\n\n\n\n\n\n\n\nreload()\n \n\n\n\u00a0Returns Object reference of itself after it respawns itself. This function causes the Object to be deleted and respawned instantly to refresh it, so its old Object reference will no longer be valid.\n\n\nMost often this is used after using \nsetCustomObject(...)\n to modify a custom object.\n\n\n\n\ntakeObject(...)\n \n\n\n\u00a0Takes an object from a container (bag/deck/chip stack) and places it in the world.\n\n\n\n\nTip\n\n\nSpawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance. It is also possible to add a delay using a \ncoroutine\n.\n\n\n\n\n\n\ntakeObject(parameters)\n\n\n\n\n \nparameters\n: A Table of parameters used to determine how takeObject will act.\n\n\n \nparameters.position\n: A Vector of the position to place Object.\n\n\nOptional, defaults to container's position + 2 on the x axis.\n\n\n\n\n\n\n \nparameters.rotation\n: A Vector of the rotation of the Object.\n\n\nOptional, defaults to the container's rotation.\n\n\n\n\n\n\n \nparameters.flip\n: If the Object is flipped over.\n\n\nOptional, defaults to false. Only used with decks, not bags/stacks.\n\n\nIf rotation is used, flip's Bool will be ignored.\n\n\n\n\n\n\n \nparameters.guid\n: GUID of the Object to take.\n\n\nOptional,  no default. Only use index or guid, never both.\n\n\n\n\n\n\n \nparameters.index\n: Index of the Object to take.\n\n\nOptional,  no default. Only use index or guid, never both.\n\n\n\n\n\n\n \nparameters.top\n: If an object is taken from the top (vs bottom).\n\n\nOptional, defaults to true.\n\n\n\n\n\n\n \nparameters.smooth\n: If the taken Object moves smoothly or instantly.\n\n\nOptional, defaults to true.\n\n\n\n\n\n\n \nparameters.callback\n: Function name you want activated once the Object is initiated.\n\n\nOptional, no default.\n\n\nA callback function has 2 parameters, the Object spawned and, if used, the Table of params.\n\n\n\n\n\n\n \nparameters.callback_owner\n: What Object has the callback function in its script. Global is a valid target.\n\n\nOptional, defaults to container Object. Serves no purpose if callback is not also used.\n\n\n\n\n\n\n \nparameters.params\n: Data to send to the callback to use as parameters. See example.\n\n\nOptional, no default. Serves no purpose if callback is not also used.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nfutureName\n \n=\n \n\"Taken from container!\"\n\n    \ntakeParams\n \n=\n \n{\n\n        \nposition\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n3\n,\n \nz\n=\n5\n},\n\n        \ncallback\n \n=\n \n\"take_callback\"\n,\n\n        \ncallback_owner\n \n=\n \nself\n,\n\n        \nparams\n \n=\n \n{\nname\n \n=\n \nfutureName\n},\n\n    \n}\n\n    \nself\n.\ntakeObject\n(\ntakeParams\n)\n\n\nend\n\n\n\nfunction\n \ntake_callback\n(\nobject_spawned\n,\n \nparams\n)\n\n    \nobject_spawned\n.\nsetName\n(\nparams\n.\nname\n)\n\n\nend\n\n\n\n\n\nTip for using GUID to pull Object\nWhen getting the GUIDs of objects in a container, it is possible items can have the same GUID while in a container. This is because only once two items try to exist at the same time is one of them given a new GUID, and Objects in a container do not currently exist. Removing all Objects from the container at once will force all of them to be given unique GUIDs.\nTip for using index to pull Object\nWhen you take an Object from the container, all higher indexes are reduced by 1 instantly. If you pull more than once Object at once by their index, you must account for this index changing.",
            "title": "Object"
        },
        {
            "location": "/object/#member-variable-summary",
            "text": "",
            "title": "Member Variable Summary"
        },
        {
            "location": "/object/#member-variables",
            "text": "These are variables that objects share. They allow for direct access to an Object's property information without a helping function. Some are read-only.  Read Example =  isResting = self.resting  Write Example =  self.resting = true     Variable  Description  Type      angular_drag  Angular drag.  Unity rigidbody property .       auto_raise  If an object should be lifted above other objects to avoid collision when held by a player.     bounciness  Bounciness, value of 0-1.  Unity physics material .     drag  Drag.  Unity rigidbody property .     dynamic_friction  Dynamic friction, value of 0-1.  Unity physics material .     grid_projection  If grid lines can appear on the Object if visible grids are turned on.     guid  The 6 character unique Object identifier within Tabletop Simulator.     held_by_color  The Color of the Player that is holding the object.     interactable  If an object can be interacted with by Players. Other object will still be able to interact with it.     mass  Mass.  Unity rigidbody property .     name  The Object's name. Read only, use  setName(\"\")  to write to it.     resting  If an Object is at rest.  Unity rigidbody property .     script_code  The Lua Script on the Object.     script_state  The saved data on the object. See  onSave() .     static_friction  Static friction, value of 0-1.  Unity physics material .     sticky  If other Objects on top of this one are also picked up when this Object is.     tag  This object's type. Read only.     tooltip  If the tooltip opens when a pointer hovers over the object. Tooltips display name and description.     use_gravity  If gravity affects this object.     use_grid  If snapping to grid is enabled or not.     use_hands  If this object can be held in a hand zone.     use_snap_points  If snap points are used or ignored.      These member variables are classes of their own, and have their own member variables. Each one is for a special type of Object.     Variable Name  Description      AssetBundle  An  AssetBundle , which is a type of custom object made in Unity.    Clock  A  Clock , which is the in-game digital clock.    Counter  A  Counter , which is the in-game digital counter.    RPGFigurine  An  RPGFigurine , which is an in-game animated figurine.    TextTool  A  TextTool , which is an in-game text display system.",
            "title": "Member Variables"
        },
        {
            "location": "/object/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/object/#transform-functions",
            "text": "These functions handle the physical attributes of an Object: Position, Rotation, Scale, Bounds, Velocity. In other words, moving objects around as well as getting information on how they are moving.     Function Name  Description  Return  \u00a0      addForce( \u00a0vector,  \u00a0force_type)  Adds force to an object in a directional Vector.      addTorque( \u00a0vector,  \u00a0force_type)  Adds torque to an object in a rotational Vector.      getAngularVelocity()  Returns a Vector of the current angular velocity.      getBounds()  Returns a Vector describing the size of an object in Global terms.      getBoundsNormalized()  Returns a Vector describing the size of an object in Global terms, as if it was rotated to {0,0,0}.      getPosition()  Returns a Vector of the current world position.      getRotation()  Returns a Vector of the current rotation.      getScale()  Returns a Vector of the current scale.      getTransformForward()  Returns a Vector of the forward direction of this object.      getTransformRight()  Returns a Vector of the right direction of this object.      getTransformUp()  Returns a Vector of the up direction of this object.      getVelocity()  Returns a Vector of the current velocity.      isSmoothMoving()  Indicates if an object is traveling as part of a Smooth move. Smooth moving is performed by setPositionSmooth and setRotationSmooth.      positionToLocal( \u00a0vector)  Returns a Vector after converting a world Vector to a local Vector.      positionToWorld( \u00a0vector)  Returns a Vector after converting a local Vector to a world Vector.      rotate( \u00a0vector)  Rotates Object smoothly in the direction of the given Vector.      scale( \u00a0vector or  )  Scales Object by a multiple.      setAngularVelocity( \u00a0vector)  Sets a Vector as the current angular velocity.      setPosition( \u00a0vector)  Instantly moves an Object to the given Vector.      setPositionSmooth( \u00a0vector,  \u00a0collide,  \u00a0fast)  Moves the Object smoothly to the given Vector.      setRotation( \u00a0vector)  Instantly rotates an Object to the given Vector.      setRotationSmooth( \u00a0vector,  \u00a0collide,  \u00a0fast)  Rotates the Object smoothly to the given Vector.      setScale( \u00a0vector)  Sets a Vector as the current scale.      setVelocity( \u00a0vector)  Sets a Vector as the current velocity.      translate( \u00a0vector)  Smoothly moves Object by the given Vector offset.",
            "title": "Transform Functions"
        },
        {
            "location": "/object/#ui-functions",
            "text": "These functions allow for the creation/editing/removal of functional buttons and text inputs which themselves trigger code within your scripts.     Function Name  Description  Return  \u00a0      clearButtons()  Removes all scripted buttons.      clearInputs()  Removes all scripted inputs.      createButton( \u00a0parameters)  Creates a scripted button attached to the Object.      createInput( \u00a0parameters)  Creates a scripted input attached to the Object.      editButton( \u00a0parameters)  Modify an existing button.      editInput( \u00a0parameters)  Modify an existing input.      getButtons()  Returns a Table of all buttons on this Object.      getInputs()  Returns a Table of all inputs on this Object.      removeButton( \u00a0index)  Removes a specific button.      removeInput( \u00a0index)  Removes a specific button.",
            "title": "UI Functions"
        },
        {
            "location": "/object/#get-functions",
            "text": "These functions obtain information from an object.     Function Name  Description  Return  \u00a0      getColorTint()  Color tint.      getCustomObject()  Returns a Table with the Custom Object information of a Custom Object.      getDescription()  Description, also shows as part of Object's tooltip.      getGUID()  String of the Object's unique identifier.      getJSON()  Returns a serialization of the JSON string which represents this item. Works with  spawnObjectJSON() .      getLock()  If the Object is locked.      getLuaScript()  Get a Lua script as a string.      getName()  Name, also shows as part of Object's tooltip.      getObjects()  Returns a Table of Objects in the script zone/bag/deck.      getQuantity()  How many objects are in the stack. Returns -1 if the Object is not a stack.      getRotationValues()  Returns a Table of rotation values. Rotation values are used to give value to different rotations (like dice).      getStateId()  Current  state  ID (index) an object is in. Returns -1 if there are no other states. State ids (indexes) start at 1.      getStates()  Returns a Table of information on the  states  of an Object.      getTable( \u00a0func_name)  Data value of a variable in another Object's script. Can only return a table.      getValue()  Object value. What the value represents depends on what type of Object this function is used on.      getVar( \u00a0func_name)  Data value of a variable in another Object's script. Cannot return a table.",
            "title": "Get Functions"
        },
        {
            "location": "/object/#set-functions",
            "text": "These functions apply action to an object. They take some property in order to work.     Function Name  Description  Return  \u00a0      setColorTint( \u00a0Color)  Sets the Color tint.      setCustomObject( \u00a0parameters)  Sets a custom Object's properties.      setDescription( \u00a0description)  Sets a description for an Object. Shows in tooltip after delay.      setLock( \u00a0lock)  Sets if an object is locked in place.      setLuaScript( \u00a0script)  Input a string as an Object's Lua script. Generally only used after spawning a new Object.      setName( \u00a0name)  Sets a name for an Object. Shows in tooltip.      setRotationValues( \u00a0rotation_values)  Sets rotation values of an object. Rotation values are used to give value to different rotations (like dice).      setState( \u00a0state_id)  Sets  state  of an Object. State ids (indexes) start at 1.      setTable( \u00a0func_name,  \u00a0data)  Creates/updates a variable in another Object's script. Only used for tables.      setValue( \u00a0value)  Sets an Int as the value. What the value represents depends on what type of Object it is.      setVar( \u00a0func_name,  \u00a0data)  Creates/updates a variable in another Object's script. Cannot set a table.",
            "title": "Set Functions"
        },
        {
            "location": "/object/#action-function",
            "text": "These functions perform general actions on objects and do not require any input parameters.     Function Name  Description  Return  \u00a0      call( \u00a0func_name,  \u00a0func_params)  Used to call a Lua function on this Object.      flip()  Flip Object over.      clone( \u00a0parameters)  Copy/Paste this Object, returning a reference to the new Object.      cut()  Cuts (splits in half) a deck or stack Object.      deal( \u00a0number,  \u00a0player_color,  \u00a0index)  Deals Objects. Will deal from decks/bags/stacks/individual items.      dealToColorWithOffset( \u00a0offset,  \u00a0flip,  \u00a0player_color)  Deals from a deck to a position relative to the hand zone.      destruct()  Destroys Object. Allows for  self.destruct() .      highlightOn( \u00a0color,  \u00a0duration)  Creates a highlight around an Object.      highlightOff( \u00a0color)  Removes a highlight from around an Object.      putObject( \u00a0put_object)  Places an object into a container (chip stacks/bags/decks).      randomize()  Shuffles deck/bag, rolls dice/coin, lifts other objects into the air. Same as pressing  R  by default.      reload()  Returns Object reference of itself after it respawns itself.      reset()  Resets this Object. Resetting a Deck brings all the Cards back into it. Resetting a Bag clears its contents (works for both Loot and Infinite Bags).      roll()  Rolls dice/coins.      shuffle()  Shuffles/shakes up contents of a deck or bag.      shuffleStates()  Returns an Object reference to a new  state  after randomly selecting and changing to one.      takeObject( \u00a0parameters)  Returns an Object reference of Object taken from a container (bag/deck/chip stack) and placed into the world.",
            "title": "Action Function"
        },
        {
            "location": "/object/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/object/#transform-function-details",
            "text": "",
            "title": "Transform Function Details"
        },
        {
            "location": "/object/#addforce",
            "text": "Adds force to an object in a directional Vector.   addForce(vector, force_type)     Vector : A Vector of the direction and magnitude of force.    force_type : An Int representing the force type to apply. Options below.  Optional, defaults to 3.  1 : Continuous force, uses mass.  (Force)  2 : Continuous acceleration, ignores mass.  (Acceleration)  3 : Instant force impulse, uses mass.  (Impulse)  4 : Instant velocity change, ignores mass.  (Velocity Change)",
            "title": "addForce(...)"
        },
        {
            "location": "/object/#addtorque",
            "text": "Adds torque to an object in a rotational Vector.   addTorque(vector, force_type)     Vector : A Vector of the direction and magnitude of rotational force.    Force Type : An Int representing the force type to apply. Options below.  Optional, defaults to 3.  1 : Continuous force, uses mass.  (Force)  2 : Continuous acceleration, ignores mass.  (Acceleration)  3 : Instant force impulse, uses mass.  (Impulse)  4 : Instant velocity change, ignores mass.  (Velocity Change)",
            "title": "addTorque(...)"
        },
        {
            "location": "/object/#getbounds",
            "text": "Returns a Table of Vector information describing the size of an object in Global terms.  Bounds  are part of Unity, and represent an imaginary square box that can be drawn around an object. Unlike scale, it can help indicate the size of an object in in-game units, not just relative model size.   Return Table     center : The Vector of the center of the bounding box.    size : The Vector of the size of the bounding box.    offset : The Vector of the offset of the center of the bounding box from the middle of the Object model.    -- Example returned Table  { \n     center   =   { x = 0 ,   y = 3 ,   z = 0 ,   0 ,   3 ,   0 }, \n     size   =   { x = 5 ,   y = 5 ,   z = 5 },   5 ,   5 ,   5 }, \n     offset   =   { x = 0 ,   y =- 1 ,   z = 0 ,   0 ,   - 1 ,   0 }  }",
            "title": "getBounds()"
        },
        {
            "location": "/object/#getboundsnormalized",
            "text": "Returns a Table of Vector information describing the size of an object in Global terms, as if it was rotated to {0,0,0}.  Bounds  are part of Unity, and represent an imaginary square box that can be drawn around an object. Unlike scale, it can help indicate the size of an object in in-game units, not just relative model size.   Return Table     center : The Vector of the center of the bounding box.    size : The Vector of the size of the bounding box.    offset : The Vector of the offset of the center of the bounding box from the middle of the Object model.    -- Example returned Table  { \n     center   =   { x = 0 ,   y = 3 ,   z = 0 ,   0 ,   3 ,   0 }, \n     size   =   { x = 5 ,   y = 5 ,   z = 5 },   5 ,   5 ,   5 }, \n     offset   =   { x = 0 ,   y =- 1 ,   z = 0 ,   0 ,   - 1 ,   0 }  }",
            "title": "getBoundsNormalized()"
        },
        {
            "location": "/object/#getscale",
            "text": "Returns a Vector of the current scale. Scale is not an absolute measurement, it is a multiple of the Object's default model size. So {x=2, y=2, z=2} would be a model twice its default size, not 2 units large.",
            "title": "getScale()"
        },
        {
            "location": "/object/#gettransformforward",
            "text": "Returns a Vector of the forward direction of this Object. The direction is relative to how the object is facing.  -- Example of moving forward 5 units  function   onLoad () \n     distance   =   5 \n     pos_target   =   self . getTransformForward () \n     pos_current   =   self . getPosition () \n     pos   =   { \n         x   =   pos_current . x   +   pos_target . x   *   distance , \n         y   =   pos_current . y   +   pos_target . y   *   distance , \n         z   =   pos_current . z   +   pos_target . z   *   distance , \n     } \n     self . setPositionSmooth ( pos )  end",
            "title": "getTransformForward()"
        },
        {
            "location": "/object/#gettransformright",
            "text": "Returns a Vector of the forward direction of this object. The direction is relative to how the object is facing.  -- Example of moving right 5 units  function   onLoad () \n     distance   =   5 \n     pos_target   =   self . getTransformRight () \n     pos_current   =   self . getPosition () \n     pos   =   { \n         x   =   pos_current . x   +   pos_target . x   *   distance , \n         y   =   pos_current . y   +   pos_target . y   *   distance , \n         z   =   pos_current . z   +   pos_target . z   *   distance , \n     } \n     self . setPositionSmooth ( pos )  end",
            "title": "getTransformRight()"
        },
        {
            "location": "/object/#gettransformup",
            "text": "Returns a Vector of the up direction of this Object. The direction is relative to how the object is facing.  -- Example of moving up 5 units  function   onLoad () \n     distance   =   5 \n     pos_target   =   self . getTransformUp () \n     pos_current   =   self . getPosition () \n     pos   =   { \n         x   =   pos_current . x   +   pos_target . x   *   distance , \n         y   =   pos_current . y   +   pos_target . y   *   distance , \n         z   =   pos_current . z   +   pos_target . z   *   distance , \n     } \n     self . setPositionSmooth ( pos )  end",
            "title": "getTransformUp()"
        },
        {
            "location": "/object/#positiontolocal",
            "text": "Returns a Vector after converting a world vector to a local Vector. A world Vector is a positional Vector using the world's coordinate system. A Local Vector is a positional Vector that is relative to the position of the given object.   Object Scale  This function takes the Object's scale into account, as the Object is the key relative point.    positionToLocal(vector)     vector : The world position to convert into a local position.",
            "title": "positionToLocal(...)"
        },
        {
            "location": "/object/#positiontoworld",
            "text": "Returns a Vector after converting a local Vector to a world Vector. A world Vector is a positional Vector using the world's coordinate system. A Local Vector is a positional Vector that is relative to the position of the given object.   Object Scale  This function takes the Object's scale into account, as the Object is the key relative point.    positionToLocal(vector)     vector : The local position to convert into a world position.",
            "title": "positionToWorld(...)"
        },
        {
            "location": "/object/#rotate",
            "text": "Rotates Object smoothly in the direction of the given Vector. This does not set the Object to face a specific rotation, it rotates the Object around by the number of degrees given for x/y/z.   rotate(vector)     vector : The amount of x/y/z to rotate by.    --Rotates object 90 degrees around its Y axis  self . rotate ({ x = 0 ,   y = 90 ,   z = 0 })",
            "title": "rotate(...)"
        },
        {
            "location": "/object/#scale",
            "text": "Scales Object by a multiple. This does not set the Object to a specific scale, it scales the Object by the given multiple.   scale(scale)     scale : Multiplier for scale.  {x=1, y=1, z=1} would not change the scale.       scale(scale)     scale : Multiplier for scale which is applied to the X/Y/Z.  1 would not change the scale.      -- Both examples work to scale an object to be twice its current scale  self . scale ({ x = 2 ,   y = 2 ,   z = 2 })  self . scale ( 2 )",
            "title": "scale(...)"
        },
        {
            "location": "/object/#setpositionsmooth",
            "text": "Moves the Object smoothly to the given Vector.   setPositionSmooth(vector, collide, fast)     Vector : A positional Vector.    collide : If the Object will collide with other Objects while moving.    fast : If the Object is moved quickly.",
            "title": "setPositionSmooth(...)"
        },
        {
            "location": "/object/#setrotationsmooth",
            "text": "Rotates the Object smoothly to the given Vector.   setRotationSmooth(vector, collide, fast)     Vector : A rotational Vector.    collide : If the Object will collide with other Objects while rotating.    fast : If the Object is rotated quickly.",
            "title": "setRotationSmooth(...)"
        },
        {
            "location": "/object/#ui-function-details",
            "text": "",
            "title": "UI Function Details"
        },
        {
            "location": "/object/#createbutton",
            "text": "Creates a scripted button attached to the Object. Scripted buttons are buttons that can be clicked while in-game that trigger a function in a script.  Button Tips Buttons can not be clicked from their back side. Buttons can not be clicked if there is another object between the pointer and the button. This does not include the Object the button is attached to. Buttons are placed relative to the Object they are attached to. The maximum font size is capped at 1000. The minimum width/height is 60. Any lower number (besides 0) will appear to be 60. This prevents visual glitches involving the corner rounding. A button width/height of 0 will cause the button not to be drawn, but its label will be. This can be a way to attach text to an Object. You cannot assign an index to a button. It is given one automatically.  createButton(parameters)     parameters : A Table containing the information used to spawn the button.    parameters.click_function : A String of the function's name that will be run when button is clicked.    parameters.function_owner : The Object which contains the click_function function.  Optional, Defaults to Global.      parameters.label : Text that appears on the button.  Optional, defaults to an empty string.      parameters.position : Where the button appears, relative to the Object's center.  Optional, defaults to {x=0, y=0, z=0}.      parameters.rotation : How the button is rotated, relative to the Object's rotation.  Optional, defaults to {x=0, y=0, z=0}.      parameters.scale : Scale of the button, relative to the Object's scale.  Optional, defaults to {x=1, y=1, z=1}.      parameters.width : How wide the button will be, relative to the Object.  Optional, defaults to 100.      parameters.height : How tall the button will be, relative to the Object.  Optional, defaults to 100.      parameters.font_size : Size the label font will be, relative to the Object.  Optional, defaults to 100.      parameters.color : A Color for the clickable button.  Optional, defaults to {r=1, g=1, b=1}.      parameters.font_color : A Color for the label text.  Optional, defaults to {r=0, g=0, b=0}.      parameters.hover_color : A Color for the background during mouse-over.  Optional.      parameters.press_color : A Color for the background when clicked.  Optional.      parameters.tooltip : Popup of text, similar to how an Object's name is displayed on mouseover.  Optional, defaults to an empty string.         click_function(obj, player_clicker_color, alt_click)  The click function which is activated by clicking this button has its own parameters it is passed automatically.     obj : The Object the button is attached to.    player_clicker_color :  Player Color  of the player that pressed the button.    alt_click : True if a button other than left-click was used to click the button.    function   onLoad () \n     params   =   { \n         click_function   =   \"click_func\" , \n         function_owner   =   self , \n         label            =   \"Test\" , \n         position         =   { 0 ,   1 ,   0 }, \n         rotation         =   { 0 ,   180 ,   0 }, \n         width            =   800 , \n         height           =   400 , \n         font_size        =   340 , \n         color            =   { 0.5 ,   0.5 ,   0.5 }, \n         font_color       =   { 1 ,   1 ,   1 }, \n         tooltip          =   \"This text appears on mouseover.\" , \n     } \n     self . createButton ( params )  end  function   click_func ( obj ,   color ,   alt_click ) \n     print ( obj ) \n     print ( color ) \n     print ( alt_click )  end    Bug  Button scale currently distorts button height and width if the button is rotated at anything besides  {0,0,0} .",
            "title": "createButton(...)"
        },
        {
            "location": "/object/#createinput",
            "text": "Creates a scripted input attached to the Object. Scripted inputs are boxes you can click inside of in-game to input/edit text. Every letter typed triggers the function. The bool that is returned as part of the input_function allows you to determine when a player has finished editing the input.  Input Tips Inputs can not be clicked from their back side. Inputs can not be clicked if there is another object between the pointer and the inputs. This does not include the Object the input is attached to. Inputs are placed relative to the Object they are attached to. The maximum font size is capped at 1000. The minimum width/height is 60. Any lower number (besides 0) will appear to be 60. This prevents visual glitches involving the corner rounding. Font that does not fit in the input window's width/height does NOT display. To know how much height you need for each line, the formula is  (font_size * # of lines) + 23 . In other words, multiply how many lines of text you want to display by your font_size and add 23. That is your height value. You cannot assign an index to an input. It is given one automatically.  createInput(parameters)     parameters : A Table containing the information used to spawn the input.    parameters.input_function : A String of the function's name that will be run when a key is used or when it is deselected.    parameters.function_owner : The Object which contains the input_function function.  Optional, Defaults to Global.      parameters.label : Text that appears as greyed out text when there is no value in the input.  Optional, defaults to an empty string.      parameters.position : Where the input appears, relative to the Object's center.  Optional, defaults to {x=0, y=0, z=0}.      parameters.rotation : How the input is rotated, relative to the Object's rotation.  Optional, defaults to {x=0, y=0, z=0}.      parameters.scale : Scale of the input, relative to the Object's scale.  Optional, defaults to {x=1, y=1, z=1}.      parameters.width : How wide the input will be, relative to the Object.  Optional, defaults to 100.      parameters.height : How tall the input will be, relative to the Object.  Optional, defaults to 100.      parameters.font_size : Size the label/value font will be, relative to the Object.  Optional, defaults to 100.      parameters.color : A Color for the input's background.  Optional, defaults to {r=1, g=1, b=1}.      parameters.font_color : A Color for the value text.  Optional, defaults to {r=0, g=0, b=0}.      parameters.tooltip : A popup of text, similar to how an Object's name is displayed on mouseover.  Optional, defaults to an empty string.      parameters.alignment : How text is aligned in the input box.  Optional, defaults to 1.  1 : Automatic  2 : Left  3 : Center  4 : Right  5 : Justified      parameters.value : Text entered into the input.  Optional, defaults to an empty string.      parameters.validation : What characters can be input into the input value field.  Optional, defaults to 1.  1 : None  2 : Integer  3 : Float  4 : Alphanumeric  5 : Username  6 : Name      parameters.tab : How the pressing of \"tab\" is handled when inputting.  Optional, defaults to 1.  1 : None  2 : Select Next Input  3 : Indent         input_function(obj, player_clicker_color, input_value, selected)  The click function which is activated by editing the text in this input has its own parameters it is passed automatically.     obj : The Object the input is attached to.    player_clicker_color :  Player Color  of the player that has selected/edited the input.    input_value : Text currently in the input.    selected : If the value box is still being edited or not.    function   onLoad () \n     self . createInput ({ \n         input_function   =   \"input_func\" , \n         function_owner   =   self , \n         label            =   \"Gold\" , \n         alignment        =   4 , \n         position         =   { x = 0 ,   y = 1 ,   z = 0 }, \n         width            =   800 , \n         height           =   300 , \n         font_size        =   323 , \n         validation       =   2 , \n     })  end  function   input_func ( obj ,   color ,   input ,   stillEditing ) \n     print ( input ) \n     if   not   stillEditing   then \n         print ( \"Finished editing.\" ) \n     end  end",
            "title": "createInput(...)"
        },
        {
            "location": "/object/#editbutton",
            "text": "Modify an existing button. The only parameter that is required is the index. The rest are optional, and not using them will cause the edited button's element to remain. Indexes start at 0. The first button on any given Object has an index of 0, the next button on it has an index of 1, etc. Each Object has its own indexes.   editButton(parameters)     parameters : A Table containing the information used to spawn the button.    parameters.index : Index of the button you want to edit.    parameters.click_function : Function's name that will be run when button is clicked.    parameters.function_owner : The Object which contains the click_function function.    parameters.label : Text that appears on the button.    parameters.position : Where the button appears, relative to the Object's center.    parameters.rotation : How the button is rotated, relative to the Object's rotation.    parameters.scale : Scale of the button, relative to the Object's scale.    parameters.width : How wide the button will be, relative to the Object.    parameters.height : How tall the button will be, relative to the Object.    parameters.font_size : Size the label font will be, relative to the Object.    parameters.color : A Color for the clickable button.    parameters.font_color : A Color for the label text.    parameters.hover_color : A Color for the background during mouse-over.    parameters.press_color : A Color for the background when clicked.    parameters.tooltip : Text of a popup of text, similar to how an Object's name is displayed on mouseover.      self . editButton ({ index = 0 ,   label = \"New Label\" })",
            "title": "editButton(...)"
        },
        {
            "location": "/object/#editinput",
            "text": "Modify an existing input. The only parameter that is required is the index. The rest are optional, and not using them will cause the edited input's element to remain. Indexes start at 0. The first input on any given Object has an index of 0, the next input on it has an index of 1, etc. Each Object has its own indexes.   editInput(parameters)  All fields besides  index  are optional. If not used, the element will default to the element's current setting.     parameters : A Table containing the information used to spawn the input.    parameters.index : Index of the input you want to edit.    parameters.input_function : The function's name that will be run when the input is selected.    parameters.function_owner : The Object which contains the input_function function.    parameters.label : Text that appears as greyed out text when there is no value in the input.    parameters.position : Where the input appears, relative to the Object's center.    parameters.rotation : How the input is rotated, relative to the Object's rotation.    parameters.scale : Scale of the input, relative to the Object's scale.    parameters.width : How wide the input will be, relative to the Object.    parameters.height : How tall the input will be, relative to the Object.    parameters.font_size : Size the label/value font will be, relative to the Object.    parameters.color : A Color for the input's background.  \u00a0 parameters.font_color : A Color for the value text.    parameters.tooltip : A popup of text, similar to how an Object's name is displayed on mouseover.    parameters.alignment : How text is aligned in the input box.  1 : Automatic  2 : Left  3 : Center  4 : Right  5 : Justified      parameters.value : A String of the text entered into the input.    parameters.validation : An Int which determines what characters can be input into the value.  1 : None  2 : Integer  3 : Float  4 : Alphanumeric  5 : Username  6 : Name      parameters.tab : An Int which determines how pressing tab is handled when inputting.  1 : None  2 : Select Next Input  3 : Indent        self . editInput ({ index = 0 ,   value = \"New Value\" })",
            "title": "editInput(...)"
        },
        {
            "location": "/object/#getbuttons",
            "text": "Returns a Table of all buttons on this Object. The Table contains parameters tables with the same keys as seen in the  createButton  section, except each Table of parameters also contains an  index  entry. This is used to identify each button, used by  editButton  and  removeButton .  Indexes start at 0.",
            "title": "getButtons()"
        },
        {
            "location": "/object/#getinputs",
            "text": "Returns a Table of all inputs on this Object. The Table contains parameters tables with the same keys as seen in the  createInput  section, except each Table of parameters also contains an  index  entry. This is used to identify each input, used by  editInput  and  removeInput .  Indexes start at 0.",
            "title": "getInputs()"
        },
        {
            "location": "/object/#removebutton",
            "text": "Removes a specific button. Indexes start at 0. The first button on any given Object has an index of 0, the next button on it has an index of 1, etc. Each Object has its own indexes.  Removing an index instantly causes all other higher indexes to shift down 1.   removeButton(index)     index : Button index to remove.",
            "title": "removeButton(...)"
        },
        {
            "location": "/object/#removeinput",
            "text": "Removes a specific input. Indexes start at 0. The first button on any given Object has an index of 0, the next input on it has an index of 1, etc. Each Object has its own indexes.  Removing an index instantly causes all other higher indexes to shift down 1.   removeInput(index)     index : Input index to remove.",
            "title": "removeInput(...)"
        },
        {
            "location": "/object/#get-function-details",
            "text": "",
            "title": "Get Function Details"
        },
        {
            "location": "/object/#getcustomobject",
            "text": "Returns a Table with the Custom Object information of a Custom Object. See the  Spawnable Objects  page for the kind of information returned.  -- Example returned Table for a custom token  { \n     image   =   \"SOME URL HERE\" , \n     thickness   =   0.2 , \n     merge_distance   =   15 , \n     stackable   =   false ,  }",
            "title": "getCustomObject()"
        },
        {
            "location": "/object/#getobjects",
            "text": "Returns a Table of objects in the script zone/bag/deck. What it returns varies depending on the type of Object it is used on.  If an Object is inside of a container, it does not exist in-game. As a result, you only get data on each Object, not an Object reference.   Return Table by Object Type   Scripting Zone  Returns a Table of Object references to every object in the scripting zone.  { \n     object_1 , \n     object_2 ,  }     Bag  Returns a Table of sub-Tables, each sub-Table containing data on 1 bagged item. Indexes start at 0.     name : Name of the Object.    guid : GUID of the Object.    index : Index of the Object, represents the Object's place in the bag.   { \n     { \n         name    =   \"Object Name\" , \n         guid    =   \"AAA111\" , \n         index   =   0 , \n     },  }     Deck  Returns a Table of sub-Tables, each sub-Table containing data on 1 card. Indexes start at 0.     nickname : Name of the card.    description : Description of the card.    guid : GUID of the card.    index : Index of the card, represents the card's order in the deck.    lua_script : Any Lua scripting saved on the card.   { \n     { \n         nickname      =   \"Object Name\" , \n         description   =   \"Object Descripotion\" , \n         guid          =   \"AAA111\" , \n         index         =   0 , \n         lua_script    =   \"Any Lua Script On This Card\" , \n     },  }     This function is often used with  takeObject(...)  to remove objects from containers.",
            "title": "getObjects()"
        },
        {
            "location": "/object/#getrotationvalues",
            "text": "Returns a Table of rotation values. Rotation values are used to give value to different rotations (like dice) based on which side is pointed \"up\". It works by checking all of the rotation values assigned to an object and determining which one of them is closest to pointing up, and then displaying the value associated with that rotation.  You can manually assign rotation values to objects using the Rotation Value Gizmo tool (in the left side Gizmo menu) or using  setRotationValues(...) .   Return Table  The returned Table contains sub-Tables, each sub-Table containing these 2 key/value pairs.     value : What value is associated with a given rotation. Often a String or Int.  \u00a0 rotation : Rotation of the Object that best represents the given value pointing up.    -- Example returned Table for a coin  { \n     { value = \"Heads\" ,   rotation = { x = 0 ,   y = 0 ,   z = 0 }}, \n     { value = \"Tails\" ,   rotation = { x = 180 ,   y = 0 ,   z = 0 }},  }",
            "title": "getRotationValues()"
        },
        {
            "location": "/object/#getstates",
            "text": "Returns a Table of information on the  states  of an Object. Stated Objects have ids (indexes) starting with 1.   Return Table   \u00a0 name : Name of the Object.  \u00a0 guid : GUID of the Object.  \u00a0 id : ID (index) of the state.    -- Example returned Table  { \n     { \n         name   =   \"First State\" , \n         guid   =   \"AAA111\" , \n         id     =   1 , \n     }, \n     { \n         name   =   \"Second State\" , \n         guid   =   \"BBB222\" , \n         id     =   2 , \n     },  }",
            "title": "getStates()"
        },
        {
            "location": "/object/#getvalue",
            "text": "Gets a value. What the value represents depends on what type of Object this function is used on.     Object  Value      Clock  Returns Int of stopwatch/timer current time  (in seconds) .    Counter  Returns Int of counter value.    Rotation Value  Returns Var of the face-up value.    Hidden Zone  Returns String of the Player  Color  of the zone.    Poker Chip  Returns Int of the face value.  Does not work on custom chips.    Tablet  Returns String of the current URL.",
            "title": "getValue()"
        },
        {
            "location": "/object/#set-function-details",
            "text": "",
            "title": "Set Function Details"
        },
        {
            "location": "/object/#setcustomobject",
            "text": "Sets a custom Object's properties. It can be used after  spawnObject  or on an already existing custom Object. If used on an already existing custom Object, you must use  reload  on the object after setCustomObject for the changes to be displayed.   setCustomObject(parameters)  The Table of parameters varies, depending on which type of custom Object it is. See the  Spawnable Object  page for the parameters needed.   -- Example of a custom token  params   =   { \n     image   =   \"SOME URL HERE\" , \n     thickness   =   0.2 , \n     merge_distance   =   15 , \n     stackable   =   false ,  }  obj . setCustomObject ( params )",
            "title": "setCustomObject(...)"
        },
        {
            "location": "/object/#setrotationvalues",
            "text": "Sets rotation values of an object. Rotation values are used to give value to different rotations (like dice). It works by checking all of the rotation values assigned to an object and determining which one of them is closest to pointing up, and then displaying the value associated with that rotation.   setRotationValues(rotation_values)   \u00a0 rotation_values : A Table containing Tables with the following values. 1 sub-Table per \"face\".  \u00a0 rotation_values.value : What value is associated with a given rotation. Often a String or Int.  \u00a0 rotation_values.rotation : The rotation Vector of the Object that best represents the given value pointing up.      -- Example setting of rotation values for a coin  rotation_values   =   { \n     { value = \"Heads\" ,   rotation = { x = 0 ,   y = 0 ,   z = 0 }}, \n     { value = \"Tails\" ,   rotation = { x = 180 ,   y = 0 ,   z = 0 }},  }  self . setRotationValues ( rotation_values )",
            "title": "setRotationValues(...)"
        },
        {
            "location": "/object/#setvalue",
            "text": "Sets a value on an Object. What the value represents depends on what type of Object it is.     Object  Value      Clock  Set Int for stopwatch/timer current time  (in seconds) .    Counter  Set Int for counter value.    Rotation Value  Set Var for the face-up value.    Hidden Zone  Set String for the Player  Color  of the zone.    Tablet  Set String for the current URL.",
            "title": "setValue(...)"
        },
        {
            "location": "/object/#action-function-details",
            "text": "",
            "title": "Action Function Details"
        },
        {
            "location": "/object/#call",
            "text": "Used to call a Lua function on this Object. This is used to remotely call functions in other scripts, either in Global or Object scripts.  Global  is the \"Object\" to use to call a function in the Global script.  Var is only returned if the function called has a  return . Otherwise return is  nil . See example.   call(func_name, func_params)     func_name : Function name you want to activate.    func_params : A Table containing any data you want to pass to that function.  Optional, will not be sent by default.      -- Call, used from an Object script  params   =   { \n     msg     =   \"Hello world!\" , \n     color   =   { r = 0.2 ,   g = 1 ,   b = 0.2 },  }  -- Success would be set to true by the return value in the function  success   =   Global . call ( \"testFunc\" ,   params )   -- Function in Global  function   testFunc ( params ) \n     broadcastToAll ( params . msg ,   params . color ) \n     return   true  end",
            "title": "call(...)"
        },
        {
            "location": "/object/#clone",
            "text": "Copy/Paste this Object.   clone(parameters)     parameters : A Table with information used when pasting.    parameters.position : Where the Object is placed.  Optional, defaults to {x=0, y=3, z=0}.      parameters.snap_to_grid : If the Object snaps to grid.  Optional, defaults to false.",
            "title": "clone(...)"
        },
        {
            "location": "/object/#deal",
            "text": "Deals Objects to hand zones. Will deal from decks/bags/stacks as well as individual items. If dealing an individual item to a hand zone, it is a good idea to make sure that its  Member Variable  for  use_hands  is  true .   deal(number, player_color, index)     number : How many to deal.    player_color : The  Player Color  to deal to.  Optional, defaults to an empty string. If not supplied, it will attempt to deal to all seated players.      index : Index of which Object to deal from a container.  Optional, defaults to 0. If not supplied it will deal in regular order.",
            "title": "deal(...)"
        },
        {
            "location": "/object/#dealtocolorwithoffset",
            "text": "Deals from a deck to a position relative to the hand zone.   dealToColorWithOffset(offset, flip, player_color)     offset : The x/y/z offset to deal to around the given hand zone.    flip : If the card is flipped over when dealt.    player_color : Hand zone  Player Color  to offset dealing to.    -- Example of dealing 2 cards in front of the White player, face up.  self . dealToColorWithOffset ({ - 2 , 0 , 5 },   true ,   \"White\" )  self . dealToColorWithOffset ({   2 , 0 , 5 },   true ,   \"White\" )",
            "title": "dealToColorWithOffset(...)"
        },
        {
            "location": "/object/#putobject",
            "text": "Places an object into a container (chip stacks/bags/decks).   putObject(put_object)     put_object : An Object to place into the container.    -- Example of a script on a bag that places Object into itself  local   obj   =   getObjectFromGUID ( \"AAA111\" )  self . putObject ( obj )",
            "title": "putObject(...)"
        },
        {
            "location": "/object/#reload",
            "text": "Returns Object reference of itself after it respawns itself. This function causes the Object to be deleted and respawned instantly to refresh it, so its old Object reference will no longer be valid.  Most often this is used after using  setCustomObject(...)  to modify a custom object.",
            "title": "reload()"
        },
        {
            "location": "/object/#takeobject",
            "text": "Takes an object from a container (bag/deck/chip stack) and places it in the world.   Tip  Spawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance. It is also possible to add a delay using a  coroutine .    takeObject(parameters)     parameters : A Table of parameters used to determine how takeObject will act.    parameters.position : A Vector of the position to place Object.  Optional, defaults to container's position + 2 on the x axis.      parameters.rotation : A Vector of the rotation of the Object.  Optional, defaults to the container's rotation.      parameters.flip : If the Object is flipped over.  Optional, defaults to false. Only used with decks, not bags/stacks.  If rotation is used, flip's Bool will be ignored.      parameters.guid : GUID of the Object to take.  Optional,  no default. Only use index or guid, never both.      parameters.index : Index of the Object to take.  Optional,  no default. Only use index or guid, never both.      parameters.top : If an object is taken from the top (vs bottom).  Optional, defaults to true.      parameters.smooth : If the taken Object moves smoothly or instantly.  Optional, defaults to true.      parameters.callback : Function name you want activated once the Object is initiated.  Optional, no default.  A callback function has 2 parameters, the Object spawned and, if used, the Table of params.      parameters.callback_owner : What Object has the callback function in its script. Global is a valid target.  Optional, defaults to container Object. Serves no purpose if callback is not also used.      parameters.params : Data to send to the callback to use as parameters. See example.  Optional, no default. Serves no purpose if callback is not also used.        function   onLoad () \n     futureName   =   \"Taken from container!\" \n     takeParams   =   { \n         position   =   { x = 0 ,   y = 3 ,   z = 5 }, \n         callback   =   \"take_callback\" , \n         callback_owner   =   self , \n         params   =   { name   =   futureName }, \n     } \n     self . takeObject ( takeParams )  end  function   take_callback ( object_spawned ,   params ) \n     object_spawned . setName ( params . name )  end   Tip for using GUID to pull Object When getting the GUIDs of objects in a container, it is possible items can have the same GUID while in a container. This is because only once two items try to exist at the same time is one of them given a new GUID, and Objects in a container do not currently exist. Removing all Objects from the container at once will force all of them to be given unique GUIDs. Tip for using index to pull Object When you take an Object from the container, all higher indexes are reduced by 1 instantly. If you pull more than once Object at once by their index, you must account for this index changing.",
            "title": "takeObject(...)"
        },
        {
            "location": "/assetbundle/",
            "text": "AssetBundle is a special \nObject\n type that has access to \ncustom AssetBundle\n related functions like looping and trigger effects.\n\n\nExample Usage: \nself.AssetBundle.getLoopingEffects()\n\n\nFunction Summary\n \n\n\nObject Functions\n \n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\ngetLoopingEffectIndex()\n\n\nIndex of the currently looping effect. Indexs starts at 0.\n\n\n\n\n\n\n\n\n\n\ngetLoopingEffects()\n\n\nReturns a Table with the keys \"index\" and \"name\" for each looping effect.\n\n\n\n\n\n\n\n\n\n\ngetTriggerEffects()\n\n\nReturns a Table with the keys \"index\" and \"name\" for each trigger effect.\n\n\n\n\n\n\n\n\n\n\nplayLoopingEffect(\n\u00a0index)\n\n\nStarts playing a looping effect. Indexs starts at 0.\n\n\n\n\n\n\n\n\n\n\nplayTriggerEffect(\n\u00a0index)\n\n\nStarts playing a trigger effect. Indexs starts at 0.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n \n\n\ngetLoopingEffects()\n \n\n\n\u00a0Returns a Table with the keys \"index\" and \"name\" for each looping effect.\n\n\n    \n-- Example usage\n\n    \neffectTable\n \n=\n \nself\n.\nAssetBundle\n.\ngetLoopingEffects\n()\n\n\n\n\n    \n-- Example returned table\n\n    \n{\n\n        \n{\nindex\n=\n0\n,\n \nname\n=\n\"Effect Name 1\"\n},\n\n        \n{\nindex\n=\n1\n,\n \nname\n=\n\"Effect Name 2\"\n},\n\n    \n}\n\n\n\n\n\n\ngetTriggerEffects()\n \n\n\n\u00a0Returns a Table with the keys \"index\" and \"name\" for each trigger effect.\n\n\n    \n-- Example usage\n\n    \neffectTable\n \n=\n \nself\n.\nAssetBundle\n.\ngetTriggerEffects\n()\n\n\n\n\n    \n-- Example returned table\n\n    \n{\n\n        \n{\nindex\n=\n0\n,\n \nname\n=\n\"Effect Name 1\"\n},\n\n        \n{\nindex\n=\n1\n,\n \nname\n=\n\"Effect Name 2\"\n},\n\n    \n}",
            "title": "AssetBundle"
        },
        {
            "location": "/assetbundle/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/assetbundle/#object-functions",
            "text": "Function Name  Description  Return  \u00a0      getLoopingEffectIndex()  Index of the currently looping effect. Indexs starts at 0.      getLoopingEffects()  Returns a Table with the keys \"index\" and \"name\" for each looping effect.      getTriggerEffects()  Returns a Table with the keys \"index\" and \"name\" for each trigger effect.      playLoopingEffect( \u00a0index)  Starts playing a looping effect. Indexs starts at 0.      playTriggerEffect( \u00a0index)  Starts playing a trigger effect. Indexs starts at 0.",
            "title": "Object Functions"
        },
        {
            "location": "/assetbundle/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/assetbundle/#getloopingeffects",
            "text": "Returns a Table with the keys \"index\" and \"name\" for each looping effect.       -- Example usage \n     effectTable   =   self . AssetBundle . getLoopingEffects ()        -- Example returned table \n     { \n         { index = 0 ,   name = \"Effect Name 1\" }, \n         { index = 1 ,   name = \"Effect Name 2\" }, \n     }",
            "title": "getLoopingEffects()"
        },
        {
            "location": "/assetbundle/#gettriggereffects",
            "text": "Returns a Table with the keys \"index\" and \"name\" for each trigger effect.       -- Example usage \n     effectTable   =   self . AssetBundle . getTriggerEffects ()        -- Example returned table \n     { \n         { index = 0 ,   name = \"Effect Name 1\" }, \n         { index = 1 ,   name = \"Effect Name 2\" }, \n     }",
            "title": "getTriggerEffects()"
        },
        {
            "location": "/clock/",
            "text": "The clock is an in-game Object which either tells time or acts as a timer. It has its own class, Clock, with functions/members associated with it. This allows you to manipulate the special properties of a clock.\n\n\nExample Usage: \nself.Clock.pauseStart()\n\n\n\n\n\n\nClock Modes:\n\n\nCurrent Time\n: Displays the current time of the host.\n\n\nStopwatch\n: Displays a running count up.\n\n\nTimer\n: Displays a countdown and beeps once complete.\n\n\n\n\n\n\n\n\n\n\nMember Variables\n \n\n\nLike \nObject member variables\n, Clocks have their own member variable.\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\npaused\n\n\nIf the clock timer is paused.\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Summary\n \n\n\nObject Functions\n \n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\ngetValue()\n\n\nCurrent time in stopwatch or timer mode. Clock mode returns 0. This function acts the same as \nObject's getValue()\n.\n\n\n\n\n\n\n\n\n\n\npauseStart()\n\n\nPauses/resumes a Clock in stopwatch or timer mode.\n\n\n\n\n\n\n\n\n\n\nsetValue(Int seconds)\n\n\nSwitches clock to timer and sets countdown time. This function acts the same as \nObject's setValue()\n.\n\n\n\n\n\n\n\n\n\n\nshowCurrentTime()\n\n\nSwitches clock to display current time. It will clear any stopwatch or timer.\n\n\n\n\n\n\n\n\n\n\nstartStopwatch()\n\n\nSwitches clock to stopwatch, setting time to 0. It will reset time if already in stopwatch mode.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n \n\n\nsetValue(...)\n \n\n\n\u00a0Set the timer to display a number of seconds. This function acts the same as \nObject's setValue()\n. If the Clock is not in timer mode, it will be switched. If it is in timer mode, it will be paused and the remaining time will be changed. This will not start the countdown on its own.\n\n\n\n\nsetValue(seconds)\n\n\n\n\n \nseconds\n: How many seconds will be counted down.\n\n\n\n\n\n\nself\n.\nClock\n.\nsetValue\n(\n30\n)",
            "title": "Clock"
        },
        {
            "location": "/clock/#member-variables",
            "text": "Like  Object member variables , Clocks have their own member variable.     Variable  Description  Type      paused  If the clock timer is paused.",
            "title": "Member Variables"
        },
        {
            "location": "/clock/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/clock/#object-functions",
            "text": "Function Name  Description  Return  \u00a0      getValue()  Current time in stopwatch or timer mode. Clock mode returns 0. This function acts the same as  Object's getValue() .      pauseStart()  Pauses/resumes a Clock in stopwatch or timer mode.      setValue(Int seconds)  Switches clock to timer and sets countdown time. This function acts the same as  Object's setValue() .      showCurrentTime()  Switches clock to display current time. It will clear any stopwatch or timer.      startStopwatch()  Switches clock to stopwatch, setting time to 0. It will reset time if already in stopwatch mode.",
            "title": "Object Functions"
        },
        {
            "location": "/clock/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/clock/#setvalue",
            "text": "Set the timer to display a number of seconds. This function acts the same as  Object's setValue() . If the Clock is not in timer mode, it will be switched. If it is in timer mode, it will be paused and the remaining time will be changed. This will not start the countdown on its own.   setValue(seconds)     seconds : How many seconds will be counted down.    self . Clock . setValue ( 30 )",
            "title": "setValue(...)"
        },
        {
            "location": "/counter/",
            "text": "The Counter is an in-game Object of a digital counter. It has its own class, Counter, with functions/members associated with it. This allows you to manipulate the special properties of a Counter. You call these functions like this: \nself.Counter.increment()\n.\n\n\nFunction Summary\n \n\n\nObject Functions\n \n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\n\n\n\n\n\n\n\nclear()\n\n\nResets Counter to 0.\n\n\n\n\n\n\n\n\ndecrement()\n\n\nReduces Counter's value by 1.\n\n\n\n\n\n\n\n\ngetValue()\n\n\nReturns Int of the current value displayed by the Counter. This function acts the same as \nObject's getValue()\n.\n\n\n\n\n\n\n\n\nincrement()\n\n\nIncreases Counter's value by 1.\n\n\n\n\n\n\n\n\nsetValue()\n\n\nSets the current value of the Counter. This function acts the same as \nObject's setValue()\n.",
            "title": "Counter"
        },
        {
            "location": "/counter/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/counter/#object-functions",
            "text": "Function Name  Description  Return      clear()  Resets Counter to 0.     decrement()  Reduces Counter's value by 1.     getValue()  Returns Int of the current value displayed by the Counter. This function acts the same as  Object's getValue() .     increment()  Increases Counter's value by 1.     setValue()  Sets the current value of the Counter. This function acts the same as  Object's setValue() .",
            "title": "Object Functions"
        },
        {
            "location": "/json/",
            "text": "The static global JSON class provides the ability to encode/decode data into JSON strings. This is largely used by the \nonSave()\n event function, but has other potential applications as well. The JSON class can be used on any String, Int, Float or Table. You call these functions like this: \nJSON.encode(...)\n.\n\n\n\n\nWarning\n\n\nThis class \ndoes not\n work with Object references. Use the Object's GUID instead.\n\n\n\n\nFunction Summary\n \n\n\nObject Functions\n \n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\ndecode(\n\u00a0json_string)\n\n\nValue obtained from the encoded string. Can return a number, string or Table.\n\n\n\n\n\n\n\n\n\n\nencode(\n\u00a0data)\n\n\nEncodes data from a number, string or Table into a JSON string.\n\n\n\n\n\n\n\n\n\n\nencode_pretty(\n\u00a0data)\n\n\nSame as encode(...) but this version is slightly less efficient but is easier to read.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n \n\n\ndecode(...)\n \n\n\n\u00a0Value obtained from the encoded string. Can return a number, string or Table.\n\n\n\n\ndecode(json_string)\n\n\n\n\n \njson_string\n: A String that is decoded, generally created by encode(...) or encode_pretty(...).\n\n\n\n\n\n\ncoded\n \n=\n \nJSON\n.\nencode\n(\n\"Test\"\n)\n\n\nprint\n(\ncoded\n)\n \n--Prints \"Test\"\n\n\ndecoded\n \n=\n \nJSON\n.\ndecode\n(\ncoded\n)\n\n\nprint\n(\ndecoded\n)\n \n--Prints Test\n\n\n\n\n\n\n\nencode(...)\n \n\n\n\u00a0Encodes data from a number, string or Table into a JSON string.\n\n\n\n\nencode(data)\n\n\n\n\n \ndata\n: A Var, either String, Int, Float or Table, to encode as a string.\n\n\n\n\n\n\n\n\nencode_pretty(...)\n \n\n\n\u00a0Encodes data from a number, string or Table into a JSON string. This version is slightly less efficient but is easier to read.\n\n\n\n\nencode_pretty(data)\n\n\n\n\n \ndata\n: A Var, either String, Int, Float or Table, to encode as a string.",
            "title": "JSON"
        },
        {
            "location": "/json/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/json/#object-functions",
            "text": "Function Name  Description  Return  \u00a0      decode( \u00a0json_string)  Value obtained from the encoded string. Can return a number, string or Table.      encode( \u00a0data)  Encodes data from a number, string or Table into a JSON string.      encode_pretty( \u00a0data)  Same as encode(...) but this version is slightly less efficient but is easier to read.",
            "title": "Object Functions"
        },
        {
            "location": "/json/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/json/#decode",
            "text": "Value obtained from the encoded string. Can return a number, string or Table.   decode(json_string)     json_string : A String that is decoded, generally created by encode(...) or encode_pretty(...).    coded   =   JSON . encode ( \"Test\" )  print ( coded )   --Prints \"Test\"  decoded   =   JSON . decode ( coded )  print ( decoded )   --Prints Test",
            "title": "decode(...)"
        },
        {
            "location": "/json/#encode",
            "text": "Encodes data from a number, string or Table into a JSON string.   encode(data)     data : A Var, either String, Int, Float or Table, to encode as a string.",
            "title": "encode(...)"
        },
        {
            "location": "/json/#encode_pretty",
            "text": "Encodes data from a number, string or Table into a JSON string. This version is slightly less efficient but is easier to read.   encode_pretty(data)     data : A Var, either String, Int, Float or Table, to encode as a string.",
            "title": "encode_pretty(...)"
        },
        {
            "location": "/lighting/",
            "text": "Lighting, a static global class, is the in-game light of the map. It allows you to modify the lighting of the instance in the same way that the \nin-game lighting menu\n does. You call these functions like this: \nLighting.apply()\n.\n\n\nFor more information on lighting in Unity, \nrefer to the Unity documentation\n.\n\n\nMember Variables\n \n\n\nLike \nObject member variables\n, Lighting has its own member variables. They are all numbers, and have specific valid ranges.\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nambient_type\n\n\nThe source of ambient light. 1 = background, 2 = gradient.\n\n\n\n\n\n\n\n\nambient_intensity\n\n\nThe strength of the ambient light. Range = 0 to 4.\n\n\n\n\n\n\n\n\nlight_intensity\n\n\nThe strength of the directional light shining down in the scene. Range = 0 to 4.\n\n\n\n\n\n\n\n\nreflection_intensity\n\n\nThe strength of the reflections from the background. Range = 0 to 1.\n\n\n\n\n\n\n\n\n\n\nFunction Summary\n \n\n\nFunctions\n \n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\n\n\n\n\n\n\n\napply()\n\n\nApplies changes made to the lighting Class using these functions or member variables.\n\n\n\n\n\n\n\n\ngetAmbientEquatorColor()\n\n\nReturns Color Table of the gradient equator. Not used if \nambient_type = 1\n.\n\n\n\n\n\n\n\n\ngetAmbientGroundColor()\n\n\nReturns Color Table of the gradient ground. Not used if \nambient_type = 1\n.\n\n\n\n\n\n\n\n\ngetAmbientSkyColor()\n\n\nReturns Color Table of the gradient sky. Not used if \nambient_type = 1\n.\n\n\n\n\n\n\n\n\ngetLightColor()\n\n\nReturns Color Table of the directional light, which shines straight down on the table.\n\n\n\n\n\n\n\n\nsetAmbientEquatorColor(\n\u00a0tint)\n\n\nSets the color of the gradient equator. Not used if \nambient_type = 1\n.\n\n\n\n\n\n\n\n\nsetAmbientGroundColor(\n\u00a0tint)\n\n\nSets the color of the gradient ground. Not used if \nambient_type = 1\n.\n\n\n\n\n\n\n\n\nsetAmbientSkyColor(\n\u00a0tint)\n\n\nSets the color of the gradient sky. Not used if \nambient_type = 1\n.\n\n\n\n\n\n\n\n\nsetLightColor(\n\u00a0tint)\n\n\nSets the color of the directional light, which shines straight down on the table.\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n \n\n\nExample of making light red and bright\n \n\n\nfunction\n \nonLoad\n()\n\n    \nred\n \n=\n \n{\nr\n=\n1\n,\n \ng\n=\n0.6\n,\n \nb\n=\n0.6\n}\n\n    \nLighting\n.\nlight_intensity\n \n=\n \n2\n\n    \nLighting\n.\nsetLightColor\n(\nred\n)\n\n    \nLighting\n.\napply\n()\n\n\nend",
            "title": "Lighting"
        },
        {
            "location": "/lighting/#member-variables",
            "text": "Like  Object member variables , Lighting has its own member variables. They are all numbers, and have specific valid ranges.     Variable  Description  Type      ambient_type  The source of ambient light. 1 = background, 2 = gradient.     ambient_intensity  The strength of the ambient light. Range = 0 to 4.     light_intensity  The strength of the directional light shining down in the scene. Range = 0 to 4.     reflection_intensity  The strength of the reflections from the background. Range = 0 to 1.",
            "title": "Member Variables"
        },
        {
            "location": "/lighting/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/lighting/#functions",
            "text": "Function Name  Description  Return      apply()  Applies changes made to the lighting Class using these functions or member variables.     getAmbientEquatorColor()  Returns Color Table of the gradient equator. Not used if  ambient_type = 1 .     getAmbientGroundColor()  Returns Color Table of the gradient ground. Not used if  ambient_type = 1 .     getAmbientSkyColor()  Returns Color Table of the gradient sky. Not used if  ambient_type = 1 .     getLightColor()  Returns Color Table of the directional light, which shines straight down on the table.     setAmbientEquatorColor( \u00a0tint)  Sets the color of the gradient equator. Not used if  ambient_type = 1 .     setAmbientGroundColor( \u00a0tint)  Sets the color of the gradient ground. Not used if  ambient_type = 1 .     setAmbientSkyColor( \u00a0tint)  Sets the color of the gradient sky. Not used if  ambient_type = 1 .     setLightColor( \u00a0tint)  Sets the color of the directional light, which shines straight down on the table.",
            "title": "Functions"
        },
        {
            "location": "/lighting/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/lighting/#example-of-making-light-red-and-bright",
            "text": "function   onLoad () \n     red   =   { r = 1 ,   g = 0.6 ,   b = 0.6 } \n     Lighting . light_intensity   =   2 \n     Lighting . setLightColor ( red ) \n     Lighting . apply ()  end",
            "title": "Example of making light red and bright"
        },
        {
            "location": "/physics/",
            "text": "Physics, a static global class, allows access to casts and gravity. Physics casts are a way to detect Objects. You call these functions like this: \nPhysics.getGravity()\n.\n\n\nFor more information on physics casts in Unity, \nrefer to the Unity documentation\n under BoxCast/RayCast/SphereCast.\n\n\nFunction Summary\n \n\n\nFunctions\n \n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\ncast(\n\u00a0parameters)\n\n\nReturns Table containing information on hit Objects.\n\n\n\n\n\n\n\n\n\n\ngetGravity()\n\n\nReturns directional Vector of the direction gravity is pulling.\n\n\n\n\n\n\n\n\n\n\nsetGravity(\n\u00a0direction)\n\n\nSets the direction gravity gravity pulls.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n \n\n\ncast(...)\n \n\n\n\u00a0Returns Table containing information on hit Objects. There are three kinds of casts:\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRay\n\n\nA line.\n\n\n\n\n\n\nBox\n\n\nA cube, rectangle, plane.\n\n\n\n\n\n\nSphere\n\n\nA round ball. You cannot make ovals.\n\n\n\n\n\n\n\n\nIt draws the imaginary cast, then moves the rap/box/sphere along that path instantly. The debug Bool in the parameters allows you to see this shape, to aid in setup, but the visual is not instant (due to that making it pointless, if you can't see it).\n\n\n\n\nWarning\n\n\nPhysics casts are somewhat expensive. When running 30+ at once it will cause your game to stutter and/or crash. Do not overuse.\n\n\n\n\n\n\ncast(parameters)\n\n\n\n\n \nparameters\n: A Table of parameters used to guide the function.\n\n\n \nparameters.origin\n: Position of the starting point.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\n \nparameters.direction\n: A direction for the cast to move in.\n\n\nOptional, but cast is motionless without a direction.\n\n\n\n\n\n\n \nparameters.type\n: The type of cast. \n1 = Ray, 2 = Sphere, 3= Box\n\n\nOptional, defaults to 1.\n\n\n\n\n\n\n \nparameters.size\n: Size of the cast shape. Sphere/Box only.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\n \nparameters.orientation\n: Rotation of the cast shape. Box only.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\n \nparameters.max_distance\n: How far the cast will travel.\n\n\nOptional, defaults to infinity. Won't move without direction.\n\n\n\n\n\n\n \nparameters.debug\n: If the cast is visualized for the user.\n\n\nOptional, defaults to false.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturned Table of Hit Objects\n\n\n\n\n \ntable\n: A numerically indexed Table, one entry for each hit Object. Entries are in the order of being hit.\n\n\n \ntable.point\n: Position the cast impacted the Object.\n\n\n \ntable.normal\n: The surface normal of the impact point.\n\n\n \ntable.distance\n: Distance between cast origin and impact point.\n\n\n \ntable.hit_object\n: An Object reference to the Object hit by the cast.\n\n\n\n\n\n\n\n\n\n\n-- Example usage\n\n\n-- This function, when called, returns a table of hit data\n\n\nfunction\n \nfindHitsInRadius\n(\npos\n,\n \nradius\n)\n\n    \nlocal\n \nradius\n \n=\n \n(\nradius\n \nor\n \n1\n)\n\n    \nlocal\n \nhitList\n \n=\n \nPhysics\n.\ncast\n({\n\n        \norigin\n       \n=\n \npos\n,\n\n        \ndirection\n    \n=\n \n{\n0\n,\n1\n,\n0\n},\n\n        \ntype\n         \n=\n \n2\n,\n\n        \nsize\n         \n=\n \n{\nradius\n,\nradius\n,\nradius\n},\n\n        \nmax_distance\n \n=\n \n0\n,\n\n        \ndebug\n        \n=\n \ntrue\n,\n\n    \n})\n\n\n    \nreturn\n \nhitList\n\n\nend\n\n\n\n\n\n-- Example returned Table\n\n\n{\n\n    \n{\n\n        \npoint\n \n=\n \n{\nx\n=\n0\n,\ny\n=\n0\n,\nz\n=\n0\n},\n\n        \nnormal\n \n=\n \n{\nx\n=\n1\n,\n0\n,\n0\n},\n\n        \ndistance\n \n=\n \n4\n,\n\n        \nhit_object\n \n=\n \nobjectreference1\n,\n\n    \n},\n\n    \n{\n\n        \npoint\n \n=\n \n{\nx\n=\n1\n,\ny\n=\n0\n,\nz\n=\n0\n},\n\n        \nnormal\n \n=\n \n{\nx\n=\n2\n,\n0\n,\n0\n},\n\n        \ndistance\n \n=\n \n5\n,\n\n        \nhit_object\n \n=\n \nobjectreference2\n,\n\n    \n},\n\n\n}",
            "title": "Physics"
        },
        {
            "location": "/physics/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/physics/#functions",
            "text": "Function Name  Description  Return  \u00a0      cast( \u00a0parameters)  Returns Table containing information on hit Objects.      getGravity()  Returns directional Vector of the direction gravity is pulling.      setGravity( \u00a0direction)  Sets the direction gravity gravity pulls.",
            "title": "Functions"
        },
        {
            "location": "/physics/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/physics/#cast",
            "text": "Returns Table containing information on hit Objects. There are three kinds of casts:     Type  Description      Ray  A line.    Box  A cube, rectangle, plane.    Sphere  A round ball. You cannot make ovals.     It draws the imaginary cast, then moves the rap/box/sphere along that path instantly. The debug Bool in the parameters allows you to see this shape, to aid in setup, but the visual is not instant (due to that making it pointless, if you can't see it).   Warning  Physics casts are somewhat expensive. When running 30+ at once it will cause your game to stutter and/or crash. Do not overuse.    cast(parameters)     parameters : A Table of parameters used to guide the function.    parameters.origin : Position of the starting point.  Optional, defaults to {x=0, y=0, z=0}.      parameters.direction : A direction for the cast to move in.  Optional, but cast is motionless without a direction.      parameters.type : The type of cast.  1 = Ray, 2 = Sphere, 3= Box  Optional, defaults to 1.      parameters.size : Size of the cast shape. Sphere/Box only.  Optional, defaults to {x=0, y=0, z=0}.      parameters.orientation : Rotation of the cast shape. Box only.  Optional, defaults to {x=0, y=0, z=0}.      parameters.max_distance : How far the cast will travel.  Optional, defaults to infinity. Won't move without direction.      parameters.debug : If the cast is visualized for the user.  Optional, defaults to false.         Returned Table of Hit Objects     table : A numerically indexed Table, one entry for each hit Object. Entries are in the order of being hit.    table.point : Position the cast impacted the Object.    table.normal : The surface normal of the impact point.    table.distance : Distance between cast origin and impact point.    table.hit_object : An Object reference to the Object hit by the cast.      -- Example usage  -- This function, when called, returns a table of hit data  function   findHitsInRadius ( pos ,   radius ) \n     local   radius   =   ( radius   or   1 ) \n     local   hitList   =   Physics . cast ({ \n         origin         =   pos , \n         direction      =   { 0 , 1 , 0 }, \n         type           =   2 , \n         size           =   { radius , radius , radius }, \n         max_distance   =   0 , \n         debug          =   true , \n     }) \n\n     return   hitList  end   -- Example returned Table  { \n     { \n         point   =   { x = 0 , y = 0 , z = 0 }, \n         normal   =   { x = 1 , 0 , 0 }, \n         distance   =   4 , \n         hit_object   =   objectreference1 , \n     }, \n     { \n         point   =   { x = 1 , y = 0 , z = 0 }, \n         normal   =   { x = 2 , 0 , 0 }, \n         distance   =   5 , \n         hit_object   =   objectreference2 , \n     },  }",
            "title": "cast(...)"
        },
        {
            "location": "/player/",
            "text": "Player, a static global class, allows control over in-game players and their \nhand zones\n. \n\n\nExample Usage: \nPlayer[\"White\"].seated\n or \nPlayer[\"Green\"].mute()\n\n\nMember Variables\n \n\n\nLike \nObject member variables\n, Player has its own member variables.\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nadmin\n\n\nIf the player is promoted or the host of the game. Read only.\n\n\n\n\n\n\n\n\nblindfolded\n\n\nIf the player is blindfolded.\n\n\n\n\n\n\n\n\ncolor\n\n\nThe player's \nPlayer Color\n. Read only.\n\n\n\n\n\n\n\n\nhost\n\n\nIf the player is the host. Read only.\n\n\n\n\n\n\n\n\nlift_height\n\n\nThe lift height for the player. This is how far an object is raised when held in a player's hand. Value is ranged 0 to 1.\n\n\n\n\n\n\n\n\npromoted\n\n\nIf the current player is promoted.\n\n\n\n\n\n\n\n\nseated\n\n\nIf a player is currently seated at this color. Read only.\n\n\n\n\n\n\n\n\nsteam_id\n\n\nThe Steam ID of the player. This is unique to each player's Steam account. Read only.\n\n\n\n\n\n\n\n\nsteam_name\n\n\nThe Steam name of the player. Read only.\n\n\n\n\n\n\n\n\nteam\n\n\nThe team of the player.\nOptions: \n\"None\", \"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\", \"Jokers\"\n.\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Summary\n \n\n\nClass Functions\n \n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nattachCameraToObject(\n\u00a0parameters)\n\n\nMakes a Player's camera follow an Object.\n\n\n\n\n\n\n\n\n\n\nbroadcast(\n\u00a0message, \n\u00a0Color)\n\n\nPrint message on Player's screen and their game chat log.\n\n\n\n\n\n\n\n\n\n\nchangeColor(\n\u00a0player_color)\n\n\nChanges player to this \nPlayer Color\n.\n\n\n\n\n\n\n\n\n\n\ngetHandCount()\n\n\nNumber of \nhand zones\n owned by this color.\n\n\n\n\n\n\n\n\n\n\ngetHandObjects(\n\u00a0hand_index)\n\n\nObjects that are in this \nhand zone\n.\n\n\n\n\n\n\n\n\n\n\ngetHandTransform(\n\u00a0hand_index)\n\n\nReturns a Table of data on this \nhand zone\n.\n\n\n\n\n\n\n\n\n\n\ngetHoldingObjects()\n\n\nObjects a Player is holding in their hand.\n\n\n\n\n\n\n\n\n\n\ngetHoverObject()\n\n\nObject that the Player's pointer is hovering over.\n\n\n\n\n\n\n\n\n\n\ngetPointerPosition()\n\n\nPlayer's pointer coordinates.\n\n\n\n\n\n\n\n\n\n\ngetPointerRotation()\n\n\nPlayer's pointer rotation.\n\n\n\n\n\n\n\n\n\n\ngetSelectedObjects()\n\n\nObjects that the Player has selected with an area selection.\n\n\n\n\n\n\n\n\n\n\nkick()\n\n\nKicks Player out of the room.\n\n\n\n\n\n\n\n\n\n\nlookAt(\n\u00a0parameters)\n\n\nMoves a Player's camera, forcing 3'rd person camera mode.\n\n\n\n\n\n\n\n\n\n\nmute()\n\n\nMutes or unmutes Player, preventing/allowing voice chat.\n\n\n\n\n\n\n\n\n\n\nprint(\n\u00a0message, \n\u00a0message_color)\n\n\nPrints a message into the Player's game chat.\n\n\n\n\n\n\n\n\n\n\npromote()\n\n\nPromotes/demotes a Player. Promoted players have access to most host privileges.\n\n\n\n\n\n\n\n\n\n\nsetHandTransform(\n\u00a0parameters, \n\u00a0hand_index)\n\n\nSets transform elements of a hand zone.\n\n\n\n\n\n\n\n\n\n\n\n\nDirect Class Functions\n \n\n\nThese functions return direct references to Players, not a Player Color. See details section for usage.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\ngetPlayers()\n\n\nReturns Table of all Players in the instance.\n\n\n\n\n\n\n\n\n\n\ngetSpectators()\n\n\nReturns Table of all Players in spectator (Grey).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n \n\n\nClass Function Details\n \n\n\nattachCameraToObject(...)\n \n\n\n\u00a0Makes a Player's camera follow an Object.\n\n\n\n\nattachCameraToObject(parameters)\n\n\n\n\n \nparameters\n: A Table with parameters which guide the function.\n\n\n \nparameters.object\n: The Object to attach the camera to.\n\n\n \nparameters.offset\n: A Vector to offset the camera by.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nself\n.\nattachCameraToObject\n({\nobject\n=\nself\n})\n\n\n\n\n\n\n\nbroadcast(...)\n \n\n\n\u00a0Print message on Player's screen and their game chat log.\n\n\n\n\nbroadcast(message, message_color)\n\n\n\n\n \nmessage\n: The message to be displayed.\n\n\n \nmessage_color\n: Tint of the message text.\n\n\nOptional, defaults to {r=1, g=1, b=1}.\n\n\n\n\n\n\n\n\n\n\n\n\nchangeColor(...)\n \n\n\n\u00a0Changes player to this \nPlayer Color\n (seat).\n\n\n\n\nchangeColor(player_color)\n\n\n\n\n \nplayer_color\n: The \nPlayer Color\n seat to move the Player to.\n\n\n\n\n\n\nPlayer\n[\n\"White\"\n].\nchangeColor\n(\n\"Red\"\n)\n\n\n\n\n\n\n\ngetHandObjects(...)\n \n\n\n\u00a0Returns a Table of Objects that are in this \nhand zone\n.\n\n\n\n\ngetHandObjects(hand_index)\n\n\n\n\n \nhand_index\n: An index, representing which hand zone to return Objects for.\n\n\nOptional, defaults to 1.\n\n\n\n\n\n\n\n\n\n\n\n\nIndexing\n\n\nHand indexes start at 1 and are numbered in the order of their creation. Each Player color has its own indexes.\n\n\n\n\n\n\ngetHandTransform(...)\n \n\n\n\u00a0Returns a Table of data on this \nhand zone\n.\n\n\n\n\ngetHandTransform(hand_index)\n\n\n\n\n \nhand_index\n: An index, representing which hand zone to return data on.\n\n\nOptional, defaults to 1.\n\n\n\n\n\n\n\n\n\n\n\n\nReturn Data Table\n\n\n\n\n \ndata\n: The Table the data is returned in.\n\n\n \ndata.position\n: Position of the hand zone.\n\n\n \ndata.rotation\n: Rotation of the hand zone.\n\n\n \ndata.scale\n: Scale of the hand zone.\n\n\n \ndata.forward\n: Forward direction of the hand zone.\n\n\n \ndata.right\n: Right direction of the hand zone.\n\n\n \ndata.up\n: Up direction of the hand zone.\n\n\n\n\n\n\n\n\n\n\n\n\nIndexing\n\n\nHand indexes start at 1 and are numbered in the order of their creation. Each Player color has its own indexes.\n\n\n\n\n\n\nlookAt(...)\n \n\n\n\u00a0Moves a Player's camera, forcing 3'rd person camera mode.\n\n\n\n\nlookAt(parameters)\n\n\n\n\n \nparameters\n: A Table of controlling parameters to point the player camera.\n\n\n \nparameters.position\n: Position to center the camera on.\n\n\n \nparameters.pitch\n: Pitch angle of the camera. 0 to 90.\n\n\nOptional, defaults to 0.\n\n\n\n\n\n\n \nparameters.yaw\n: Yaw angle of the camera. -180 to 180.\n\n\nOptional, defaults to 0.\n\n\n\n\n\n\n \nparameters.distance\n: Distance the camera is from the position Vector.\n\n\nOptional, defaults to 40.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-- Assuming someone is in the White seat\n\n\nPlayer\n[\n\"White\"\n].\nlookAt\n({\n\n    \nposition\n \n=\n \n{\nx\n=\n0\n,\ny\n=\n0\n,\nz\n=\n0\n},\n\n    \npitch\n    \n=\n \n25\n,\n\n    \nyaw\n      \n=\n \n180\n,\n\n    \ndistance\n \n=\n \n20\n,\n\n\n})\n\n\n\n\n\n\n\nprint(...)\n \n\n\n\u00a0Prints a message into the Player's game chat.\n\n\n\n\nprint(message, message_color)\n\n\n\n\n \nmessage\n: The text to be displayed.\n\n\n \nmessage_color\n: Color for the message text to be tinted.\n\n\nOptional, defaults to {r=1, g=1, b=1}.\n\n\n\n\n\n\n\n\n\n\n\n\nsetHandTransform(...)\n \n\n\n\u00a0Sets transform elements of a \nhand zone\n.\n\n\n\n\nsetHandTransform(parameters, hand_index)\n\n\n\n\n \nparameters\n: The Table the data to transform the hand zone with.\n\n\n \nparameters.position\n: Position of the hand zone.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\n \nparameters.rotation\n: Rotation of the hand zone.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\n \nparameters.scale\n: Scale of the hand zone.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\n\n\n\n\n \nhand_index\n: Index, representing which hand zone to modify.\n\n\nOptional, defaults to 1.\n\n\n\n\n\n\n\n\n\n\n\n\nIndexing\n\n\nHand indexes start at 1 and are numbered in the order of their creation. Each Player color has its own indexes.\n\n\n\n\n-- Example of moving/rotating/scaling hand zone\n\n\nparams\n \n=\n \n{\n\n    \nposition\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n5\n,\n \nz\n=\n0\n},\n\n    \nrotation\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n45\n,\n \nz\n=\n0\n},\n\n    \nscale\n    \n=\n \n{\nx\n=\n2\n,\n \ny\n=\n2\n,\n \nz\n=\n2\n},\n\n\n}\n\n\nPlayer\n[\n\"White\"\n].\nsetHandTransform\n(\nparams\n,\n \n2\n)\n\n\n\n\n\n\n\nDirect Class Function Details\n \n\n\ngetPlayers()\n \n\n\n\u00a0Returns Table of all Players in the instance.\n\n\n-- Blindfolding all players\n\n\nplayerList\n \n=\n \nPlayer\n.\ngetPlayers\n()\n\n\nfor\n \n_\n,\n \nplayerReference\n \nin\n \nipairs\n(\nplayerList\n)\n \ndo\n\n    \nplayerReference\n.\nblindfolded\n \n=\n \ntrue\n\n\nend\n\n\n\n\n\n\n\ngetSpectators()\n \n\n\n\u00a0Returns Table of all Players in spectator (Grey).\n\n\n-- Printing steam name of all players to host chat\n\n\nplayerList\n \n=\n \nPlayer\n.\ngetSpectators\n()\n\n\nfor\n \n_\n,\n \nplayerReference\n \nin\n \nipairs\n(\nplayerList\n)\n \ndo\n\n    \nprint\n(\nplayerReference\n.\nsteam_name\n)\n\n\nend",
            "title": "Player"
        },
        {
            "location": "/player/#member-variables",
            "text": "Like  Object member variables , Player has its own member variables.     Variable  Description  Type      admin  If the player is promoted or the host of the game. Read only.     blindfolded  If the player is blindfolded.     color  The player's  Player Color . Read only.     host  If the player is the host. Read only.     lift_height  The lift height for the player. This is how far an object is raised when held in a player's hand. Value is ranged 0 to 1.     promoted  If the current player is promoted.     seated  If a player is currently seated at this color. Read only.     steam_id  The Steam ID of the player. This is unique to each player's Steam account. Read only.     steam_name  The Steam name of the player. Read only.     team  The team of the player. Options:  \"None\", \"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\", \"Jokers\" .",
            "title": "Member Variables"
        },
        {
            "location": "/player/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/player/#class-functions",
            "text": "Function Name  Description  Return  \u00a0      attachCameraToObject( \u00a0parameters)  Makes a Player's camera follow an Object.      broadcast( \u00a0message,  \u00a0Color)  Print message on Player's screen and their game chat log.      changeColor( \u00a0player_color)  Changes player to this  Player Color .      getHandCount()  Number of  hand zones  owned by this color.      getHandObjects( \u00a0hand_index)  Objects that are in this  hand zone .      getHandTransform( \u00a0hand_index)  Returns a Table of data on this  hand zone .      getHoldingObjects()  Objects a Player is holding in their hand.      getHoverObject()  Object that the Player's pointer is hovering over.      getPointerPosition()  Player's pointer coordinates.      getPointerRotation()  Player's pointer rotation.      getSelectedObjects()  Objects that the Player has selected with an area selection.      kick()  Kicks Player out of the room.      lookAt( \u00a0parameters)  Moves a Player's camera, forcing 3'rd person camera mode.      mute()  Mutes or unmutes Player, preventing/allowing voice chat.      print( \u00a0message,  \u00a0message_color)  Prints a message into the Player's game chat.      promote()  Promotes/demotes a Player. Promoted players have access to most host privileges.      setHandTransform( \u00a0parameters,  \u00a0hand_index)  Sets transform elements of a hand zone.",
            "title": "Class Functions"
        },
        {
            "location": "/player/#direct-class-functions",
            "text": "These functions return direct references to Players, not a Player Color. See details section for usage.     Function Name  Description  Return  \u00a0      getPlayers()  Returns Table of all Players in the instance.      getSpectators()  Returns Table of all Players in spectator (Grey).",
            "title": "Direct Class Functions"
        },
        {
            "location": "/player/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/player/#class-function-details",
            "text": "",
            "title": "Class Function Details"
        },
        {
            "location": "/player/#attachcameratoobject",
            "text": "Makes a Player's camera follow an Object.   attachCameraToObject(parameters)     parameters : A Table with parameters which guide the function.    parameters.object : The Object to attach the camera to.    parameters.offset : A Vector to offset the camera by.  Optional, defaults to {x=0, y=0, z=0}.        self . attachCameraToObject ({ object = self })",
            "title": "attachCameraToObject(...)"
        },
        {
            "location": "/player/#broadcast",
            "text": "Print message on Player's screen and their game chat log.   broadcast(message, message_color)     message : The message to be displayed.    message_color : Tint of the message text.  Optional, defaults to {r=1, g=1, b=1}.",
            "title": "broadcast(...)"
        },
        {
            "location": "/player/#changecolor",
            "text": "Changes player to this  Player Color  (seat).   changeColor(player_color)     player_color : The  Player Color  seat to move the Player to.    Player [ \"White\" ]. changeColor ( \"Red\" )",
            "title": "changeColor(...)"
        },
        {
            "location": "/player/#gethandobjects",
            "text": "Returns a Table of Objects that are in this  hand zone .   getHandObjects(hand_index)     hand_index : An index, representing which hand zone to return Objects for.  Optional, defaults to 1.       Indexing  Hand indexes start at 1 and are numbered in the order of their creation. Each Player color has its own indexes.",
            "title": "getHandObjects(...)"
        },
        {
            "location": "/player/#gethandtransform",
            "text": "Returns a Table of data on this  hand zone .   getHandTransform(hand_index)     hand_index : An index, representing which hand zone to return data on.  Optional, defaults to 1.       Return Data Table     data : The Table the data is returned in.    data.position : Position of the hand zone.    data.rotation : Rotation of the hand zone.    data.scale : Scale of the hand zone.    data.forward : Forward direction of the hand zone.    data.right : Right direction of the hand zone.    data.up : Up direction of the hand zone.       Indexing  Hand indexes start at 1 and are numbered in the order of their creation. Each Player color has its own indexes.",
            "title": "getHandTransform(...)"
        },
        {
            "location": "/player/#lookat",
            "text": "Moves a Player's camera, forcing 3'rd person camera mode.   lookAt(parameters)     parameters : A Table of controlling parameters to point the player camera.    parameters.position : Position to center the camera on.    parameters.pitch : Pitch angle of the camera. 0 to 90.  Optional, defaults to 0.      parameters.yaw : Yaw angle of the camera. -180 to 180.  Optional, defaults to 0.      parameters.distance : Distance the camera is from the position Vector.  Optional, defaults to 40.        -- Assuming someone is in the White seat  Player [ \"White\" ]. lookAt ({ \n     position   =   { x = 0 , y = 0 , z = 0 }, \n     pitch      =   25 , \n     yaw        =   180 , \n     distance   =   20 ,  })",
            "title": "lookAt(...)"
        },
        {
            "location": "/player/#print",
            "text": "Prints a message into the Player's game chat.   print(message, message_color)     message : The text to be displayed.    message_color : Color for the message text to be tinted.  Optional, defaults to {r=1, g=1, b=1}.",
            "title": "print(...)"
        },
        {
            "location": "/player/#sethandtransform",
            "text": "Sets transform elements of a  hand zone .   setHandTransform(parameters, hand_index)     parameters : The Table the data to transform the hand zone with.    parameters.position : Position of the hand zone.  Optional, defaults to {x=0, y=0, z=0}.      parameters.rotation : Rotation of the hand zone.  Optional, defaults to {x=0, y=0, z=0}.      parameters.scale : Scale of the hand zone.  Optional, defaults to {x=0, y=0, z=0}.        hand_index : Index, representing which hand zone to modify.  Optional, defaults to 1.       Indexing  Hand indexes start at 1 and are numbered in the order of their creation. Each Player color has its own indexes.   -- Example of moving/rotating/scaling hand zone  params   =   { \n     position   =   { x = 0 ,   y = 5 ,   z = 0 }, \n     rotation   =   { x = 0 ,   y = 45 ,   z = 0 }, \n     scale      =   { x = 2 ,   y = 2 ,   z = 2 },  }  Player [ \"White\" ]. setHandTransform ( params ,   2 )",
            "title": "setHandTransform(...)"
        },
        {
            "location": "/player/#direct-class-function-details",
            "text": "",
            "title": "Direct Class Function Details"
        },
        {
            "location": "/player/#getplayers",
            "text": "Returns Table of all Players in the instance.  -- Blindfolding all players  playerList   =   Player . getPlayers ()  for   _ ,   playerReference   in   ipairs ( playerList )   do \n     playerReference . blindfolded   =   true  end",
            "title": "getPlayers()"
        },
        {
            "location": "/player/#getspectators",
            "text": "Returns Table of all Players in spectator (Grey).  -- Printing steam name of all players to host chat  playerList   =   Player . getSpectators ()  for   _ ,   playerReference   in   ipairs ( playerList )   do \n     print ( playerReference . steam_name )  end",
            "title": "getSpectators()"
        },
        {
            "location": "/player-color/",
            "text": "Each person able to interact with objects in-game is assigned a Player Color to represent them. This is chosen when a Player picks a seat color or is assigned one by the host. Many functions refer to these Players or their hand zones, and it does so via color names. All color names are strings and are case sensitive within functions.\n\n\nEach color also has an RGB value associated with it. For more information on the RGB Color standard, view the \nColor section\n.\n\n\n\n    \n\n        \n\n            \nColor Name\n\n            \nColor Swatch\n\n            \nRGB\n\n        \n\n    \n\n    \n\n        \n\n            \nWhite\n\n            \n\n            \n{1, 1, 1}\n\n        \n\n        \n\n            \nBrown\n\n            \n\n            \n{0.443, 0.231, 0.09}\n\n        \n\n        \n\n            \nRed\n\n            \n\n            \n{0.856, 0.1, 0.094}\n\n        \n\n        \n\n            \nOrange\n\n            \n\n            \n{0.956, 0.392, 0.113}\n\n        \n\n        \n\n            \nYellow\n\n            \n\n            \n{0.905, 0.898, 0.172}\n\n        \n\n        \n\n            \nGreen\n\n            \n\n            \n{0.192, 0.701, 0.168}\n\n        \n\n        \n\n            \nTeal\n\n            \n\n            \n{0.129, 0.694, 0.607}\n\n        \n\n        \n\n            \nBlue\n\n            \n\n            \n{0.118, 0.53, 1}\n\n        \n\n        \n\n            \nPurple\n\n            \n\n            \n{0.627, 0.125, 0.941}\n\n        \n\n        \n\n            \nPink\n\n            \n\n            \n{0.96, 0.439, 0.807}\n\n        \n\n        \n\n            \nGrey\n(spectator)\n\n            \n\n            \n{0.5, 0.5, 0.5}\n\n        \n\n        \n\n            \nBlack\n(GM/DM)\n\n            \n\n            \n{0.25, 0.25, 0.25}",
            "title": "Player Color"
        },
        {
            "location": "/rpgfigurine/",
            "text": "An RPGFigurine is an in-game Object of a figurine with built-in animations. It has its own class, RPGFigurine, with functions associated with it. This allows you to manipulate the special properties of these figurines.\n\n\nFunction Summary\n \n\n\nObject Functions\n \n\n\nThese functions are called like this: \nself.RPGFigurine.attack()\n.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\n\n\n\n\n\n\n\nattack()\n\n\nPlays a random attack animation.\n\n\n\n\n\n\n\n\nchangeMode()\n\n\nChanges the figurine's current mode. What the mode represents is based on the figurine.\n\n\n\n\n\n\n\n\ndie()\n\n\nPlays the death animation or causes it to return to life.\n\n\n\n\n\n\n\n\n\n\nEvent Functions\n \n\n\nThese functions are called by the game whenever a figurine attacks or is attacked. See details for example usage.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nonAttack(\n\u00a0hit_list)\n\n\nActivates when an attack is performed by an identified RPGFigurine Object.\n\n\n\n\n\n\n\n\nonHit(\n\u00a0attacker)\n\n\nActivates when an attack is performed on this RPGFigurine Object.\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n \n\n\nEvent Function Details\n \n\n\nonAttack(...)\n \n\n\nActivates when an attack is performed by an identified RPGFigurine Object. An attack is triggered via the context menu or pressing the appropriate number key. If another RPGFigurine is within its attack arch, then the function will be triggered with the figurine hit passed as a parameter.\n\n\n\n\nonAttack(hit_list)\n\n\n\n\n\u00a0\nhit_list\n: A Table of RPGFigurine Object references within the reach of the attack.\n\n\n\n\n\n\n-- Monitoring and announcing a cyclops attacks\n\n\nfunction\n \nonLoad\n()\n\n    \ncyclops\n \n=\n \ngetObjectFromGUID\n(\n\"aaa111\"\n)\n\n\n    \nfunction\n \ncyclops\n.\nRPGFigurine\n.\nonAttack\n(\nhit_list\n)\n\n        \nfor\n \n_\n,\n \nv\n \nin\n \nipairs\n(\nhit_list\n)\n \ndo\n\n            \nprint\n(\nv\n.\ngetName\n()\n \n..\n \n\" was hit!\"\n)\n\n        \nend\n\n    \nend\n\n\nend\n\n\n\n\n\n\n\nonHit(...)\n \n\n\nActivates when an attack is performed on this RPGFigurine Object. An attack is triggered via the context menu or pressing the appropriate number key. If this RPGFigurine is within the attack radius, this function is triggered, passing a parameter of the Object which attacked.\n\n\n\n\nonHit(attacker)\n\n\n\n\n\u00a0\nattacker\n: Reference to the RPGFigurine attacking the indicated RPGFigurine.\n\n\n\n\n\n\n-- Monitoring and announcing a cyclops being hit\n\n\nfunction\n \nonLoad\n()\n\n    \ncyclops\n \n=\n \ngetObjectFromGUID\n(\n\"aaa111\"\n)\n\n\n    \nfunction\n \ncyclops\n.\nRPGFigurine\n.\nonHit\n(\nattacker\n)\n\n        \nprint\n(\nattacker\n.\ngetName\n()\n \n..\n \n\" attacked the Cyclops!\"\n)\n\n    \nend\n\n\nend",
            "title": "RPGFigurine"
        },
        {
            "location": "/rpgfigurine/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/rpgfigurine/#object-functions",
            "text": "These functions are called like this:  self.RPGFigurine.attack() .     Function Name  Description  Return      attack()  Plays a random attack animation.     changeMode()  Changes the figurine's current mode. What the mode represents is based on the figurine.     die()  Plays the death animation or causes it to return to life.",
            "title": "Object Functions"
        },
        {
            "location": "/rpgfigurine/#event-functions",
            "text": "These functions are called by the game whenever a figurine attacks or is attacked. See details for example usage.     Function Name  Description  \u00a0      onAttack( \u00a0hit_list)  Activates when an attack is performed by an identified RPGFigurine Object.     onHit( \u00a0attacker)  Activates when an attack is performed on this RPGFigurine Object.",
            "title": "Event Functions"
        },
        {
            "location": "/rpgfigurine/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/rpgfigurine/#event-function-details",
            "text": "",
            "title": "Event Function Details"
        },
        {
            "location": "/rpgfigurine/#onattack",
            "text": "Activates when an attack is performed by an identified RPGFigurine Object. An attack is triggered via the context menu or pressing the appropriate number key. If another RPGFigurine is within its attack arch, then the function will be triggered with the figurine hit passed as a parameter.   onAttack(hit_list)   \u00a0 hit_list : A Table of RPGFigurine Object references within the reach of the attack.    -- Monitoring and announcing a cyclops attacks  function   onLoad () \n     cyclops   =   getObjectFromGUID ( \"aaa111\" ) \n\n     function   cyclops . RPGFigurine . onAttack ( hit_list ) \n         for   _ ,   v   in   ipairs ( hit_list )   do \n             print ( v . getName ()   ..   \" was hit!\" ) \n         end \n     end  end",
            "title": "onAttack(...)"
        },
        {
            "location": "/rpgfigurine/#onhit",
            "text": "Activates when an attack is performed on this RPGFigurine Object. An attack is triggered via the context menu or pressing the appropriate number key. If this RPGFigurine is within the attack radius, this function is triggered, passing a parameter of the Object which attacked.   onHit(attacker)   \u00a0 attacker : Reference to the RPGFigurine attacking the indicated RPGFigurine.    -- Monitoring and announcing a cyclops being hit  function   onLoad () \n     cyclops   =   getObjectFromGUID ( \"aaa111\" ) \n\n     function   cyclops . RPGFigurine . onHit ( attacker ) \n         print ( attacker . getName ()   ..   \" attacked the Cyclops!\" ) \n     end  end",
            "title": "onHit(...)"
        },
        {
            "location": "/spawnableobjects/",
            "text": "Objects can be spawned by any script using the \nspawnObject()\n function. These are the \ntype\n Strings used to designate the type of Object to spawn. \n\n\nBuilt-in Game Objects\n \n\n\nBoards\n \n\n\n\n\nbackgammon_board\n\n\nCardBot_Board\n\n\nChecker_Board\n\n\nChess_Board\n\n\nChinese_Checkers_Board\n\n\nGo_Board\n\n\nPachisi_Board\n\n\nreversi_board\n\n\n\n\nContainers\n \n\n\n\n\nBag\n\n\nBowl\n\n\nCup\n\n\ngo_game_bowl_black\n\n\ngo_game_bowl_white\n\n\nInfinite_Bag\n\n\n\n\nFigurines\n \n\n\n\n\nFigurine_Card_Bot\n\n\nFigurine_Kimi_Kat\n\n\nFigurine_Knil\n\n\nFigurine_Mara\n\n\nFigurine_Sir_Loin\n\n\nFigurine_Zeke\n\n\nFigurine_Zomblor\n\n\n\n\nGame Pieces\n \n\n\n\n\nbackgammon_piece_brown\n\n\nbackgammon_piece_white\n\n\nBlockRectangle\n\n\nBlockSquare\n\n\nBlockTriangle\n\n\nCard\n\n\nChecker_black\n\n\nChecker_red\n\n\nChecker_white\n\n\nChess_Bishop\n\n\nChess_King\n\n\nChess_Knight\n\n\nChess_Pawn\n\n\nChess_Queen\n\n\nChess_Rook\n\n\nChinese_Checkers_Piece\n\n\nChip_10\n\n\nChip_50\n\n\nChip_100\n\n\nChip_500\n\n\nChip_1000\n\n\nDeck\n\n\nDie_4\n\n\nDie_6\n\n\nDie_6_Rounded\n\n\nDie_8\n\n\nDie_10\n\n\nDie_12\n\n\nDie_20\n\n\nDie_Piecepack\n\n\nDomino\n\n\ngo_game_piece_black\n\n\ngo_game_piece_white\n\n\nMahjong_Coin\n\n\nMahjong_Stick\n\n\nMahjong_Tile\n\n\nMetal Ball\n\n\nPiecePack_Arms\n\n\nPiecePack_Crowns\n\n\nPiecePack_Moons\n\n\nPiecePack_Suns\n\n\nPlayerPawn\n\n\nQuarter\n\n\nreversi_chip\n\n\n\n\nRPG Figurines\n \n\n\n\n\nrpg_BARGHEST\n\n\nrpg_BASILISK\n\n\nrpg_BEAR\n\n\nrpg_BLACK_DRAGON\n\n\nrpg_CENTAUR\n\n\nrpg_CERBERUS\n\n\nrpg_CHIMERA\n\n\nrpg_CRASC\n\n\nrpg_CYCLOP\n\n\nrpg_DARKNESS_WARLORD\n\n\nrpg_DRAGONIDE\n\n\nrpg_EVIL_WATCHER\n\n\nrpg_GHOUL\n\n\nrpg_GIANT_VIPER\n\n\nrpg_GOBLIN\n\n\nrpg_GOLEM\n\n\nrpg_GRIFFON\n\n\nrpg_HYDRA\n\n\nrpg_KNIGHT\n\n\nrpg_KOBOLD\n\n\nrpg_LIZARD_WARRIOR\n\n\nrpg_MAGE\n\n\nrpg_MANTICORA\n\n\nrpg_MUMMY\n\n\nrpg_OGRE\n\n\nrpg_ORC\n\n\nrpg_RANGER\n\n\nrpg_RAT\n\n\nrpg_SKELETON_KNIGHT\n\n\nrpg_TEMPLATE\n\n\nrpg_THIEF\n\n\nrpg_TREE_ENT\n\n\nrpg_TROLL\n\n\nrpg_VAMPIRE\n\n\nrpg_WARRIOR\n\n\nrpg_WEREWOLF\n\n\nrpg_WYVERN\n\n\n\n\nTilesets\n \n\n\n\n\nTileset_Barrel\n\n\nTileset_Chair\n\n\nTileset_Chest\n\n\nTileset_Corner\n\n\nTileset_Floor\n\n\nTileset_Rock\n\n\nTileset_Table\n\n\nTileset_Tree\n\n\nTileset_Wall\n\n\n\n\nTools\n \n\n\n\n\nCalculator\n\n\nCounter\n\n\nDigital_Clock\n\n\nNotecard\n\n\nTablet\n\n\n\n\nTriggers\n \n\n\n\n\nScriptingTrigger\n\n\nA Scripting Zone, a zone used for scripting\n\n\n\n\n\n\nFogOfWarTrigger\n\n\nA \nHidden Zone\n\n\n\n\n\n\n\n\nOther\n \n\n\n\n\n3DText\n\n\nThe text that the \nText Tool\n spawns.\n\n\n\n\n\n\n\n\n\n\nCustom Game Objects\n \n\n\nYou can also spawn \ncustom Objects\n and then provide the custom content for them after spawning them by calling \nsetCustomObject()\n. \n(See setCustomObject for usage)\n\n\nYou can also use setCustomObject along with \nreload()\n to modify an existing custom Object.\n\n\nCustom AssetBundle\n \n\n\n\n\nCustom_Assetbundle\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\n \nparameters\n: A Table of parameters which determine the properties of the Object.\n\n\n \nassetbundle\n: The path/url for the AssetBundle. \n\n\n \nassetbundle_secondary\n: The path/url for the secondary AssetBundle property. \n\n\nOptional, is not used by default.\n\n\n\n\n\n\n \ntype\n: An Int representing the Object's type.\n\n\nOptional, defaults to 0.\n\n\n0\n: Generic\n\n\n1\n: Figurine\n\n\n2\n: Dice\n\n\n3\n: Coin\n\n\n4\n: Board\n\n\n5\n: Chip\n\n\n6\n: Bag\n\n\n7\n: Infinite bag\n\n\n\n\n\n\n\n\n\n\n \nmaterial\n: An Int representing the Object's material.\n\n\nOptional, defaults to 0.\n\n\n0\n: Plastic\n\n\n1\n: Wood\n\n\n2\n: Metal\n\n\n3\n: Cardboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom Board\n \n\n\n\n\nCustom_Board\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\n \nparameters\n: A Table of parameters which determine the properties of the Object.\n\n\n \nimage\n: The path/url for the board.\n\n\n\n\n\n\n\n\n\n\nCustom Dice\n \n\n\n\n\nCustom_Dice\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\n \nparameters\n: A Table of parameters which determine the properties of the Object.\n\n\n \nimage\n: The path/url for the \ncustom die\n.\n\n\n \ntype\n: The type of die, which determines its number of sides.\n\n\nOptional, defaults to 1.\n\n\n0\n: 4-sided\n\n\n1\n: 6-sided\n\n\n2\n: 8-sided\n\n\n3\n: 10-sided\n\n\n4\n: 12-sided\n\n\n5\n: 20-sided\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom Figurine\n \n\n\n\n\nFigurine_Custom\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\n \nparameters\n: A Table of parameters which determine the properties of the Object.\n\n\n \nimage\n: The path/url for the \ncustom figurine\n.\n\n\n \nimage_secondary\n: The path/url for the custom figurine's back.\n\n\nOptional, defaults to \"image\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom Model\n \n\n\n\n\nCustom_Model\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\n \nparameters\n: A Table of parameters which determine the properties of the Object.\n\n\n \nmesh\n: The path/url for the .obj mesh used on the \ncustom model\n.\n\n\n \ndiffuse\n: The path/url for the diffuse image.\n\n\n \nnormal\n: The path/url for the normals image.\n\n\nOptional, is not used by default.\n\n\n\n\n\n\n \ncollider\n: The path/url for the collider mesh.\n\n\nOptional, defaults to a generic box collider.\n\n\n\n\n\n\n \nconvex\n: If the object model is convex.\n\n\nOptional, defaults to false.\n\n\n\n\n\n\n \ntype\n: An Int representing the Object's type.\n\n\nOptional, defaults to 0.\n\n\n0\n: Generic\n\n\n1\n: Figurine\n\n\n2\n: Dice\n\n\n3\n: Coin\n\n\n4\n: Board\n\n\n5\n: Chip\n\n\n6\n: Bag\n\n\n7\n: Infinite bag\n\n\n\n\n\n\n\n\n\n\n \nmaterial\n: An Int representing the Object's material.\n\n\nOptional, defaults to 0.\n\n\n0\n: Plastic\n\n\n1\n: Wood\n\n\n2\n: Metal\n\n\n3\n: Cardboard\n\n\n\n\n\n\n\n\n\n\n \nspecular_intensity\n: The specular intensity.\n\n\nOptional, defaults to 0.1.\n\n\n\n\n\n\n \nspecular_color\n: The specular \nColor\n.\n\n\nOptional, defaults to {r=1, g=1, b=1}.\n\n\n\n\n\n\n \nspecular_sharpness\n: The specular sharpness.\n\n\nOptional, defaults to 3.\n\n\n\n\n\n\n \nfreshnel_strength\n: The freshnel strength.\n\n\nOptional, defaults to 0.1.\n\n\n\n\n\n\n \ncast_shadows\n: If the Object casts shadows.\n\n\nOptional, defaults to true.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom Tile\n \n\n\n\n\nCustom_Tile\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\n \nparameters\n: A Table of parameters which determine the properties of the Object.\n\n\n \nimage\n: The path/url for the \ncustom tile\n image.\n\n\n \ntype\n: Determines the shape of the tile.\n\n\nOptional, defaults to 0.\n\n\n0\n: Square/Rectangle\n\n\n1\n: Hex\n\n\n2\n: Circle\n\n\n\n\n\n\n\n\n\n\n \nimage_buttom\n: The path/url for the bottom-side image.\n\n\nOptional, uses the top image by default.\n\n\n\n\n\n\n \nthickness\n: How thick the tile is.\n\n\nOptional, defaults to 0.5.\n\n\n\n\n\n\n \nstackable\n: If these tiles stack together into a pile.\n\n\nOptional, defaults to false.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom Token\n \n\n\n\n\nCustom_Token\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\n \nparameters\n: A Table of parameters which determine the properties of the Object.\n\n\n \nimage\n: The path/url for the \ncustom token\n image.\n\n\n \nthickness\n: How thick the tile is.\n\n\nOptional, defaults to 0.2.\n\n\n\n\n\n\n \nmege_distance\n: How accurate the edges are to the image.\n\n\nOptional, defaults to 15.\n\n\n\n\n\n\n \nstackable\n: If these tiles stack together into a pile.\n\n\nOptional, defaults to false.",
            "title": "Spawnable Objects"
        },
        {
            "location": "/spawnableobjects/#built-in-game-objects",
            "text": "",
            "title": "Built-in Game Objects"
        },
        {
            "location": "/spawnableobjects/#boards",
            "text": "backgammon_board  CardBot_Board  Checker_Board  Chess_Board  Chinese_Checkers_Board  Go_Board  Pachisi_Board  reversi_board",
            "title": "Boards"
        },
        {
            "location": "/spawnableobjects/#containers",
            "text": "Bag  Bowl  Cup  go_game_bowl_black  go_game_bowl_white  Infinite_Bag",
            "title": "Containers"
        },
        {
            "location": "/spawnableobjects/#figurines",
            "text": "Figurine_Card_Bot  Figurine_Kimi_Kat  Figurine_Knil  Figurine_Mara  Figurine_Sir_Loin  Figurine_Zeke  Figurine_Zomblor",
            "title": "Figurines"
        },
        {
            "location": "/spawnableobjects/#game-pieces",
            "text": "backgammon_piece_brown  backgammon_piece_white  BlockRectangle  BlockSquare  BlockTriangle  Card  Checker_black  Checker_red  Checker_white  Chess_Bishop  Chess_King  Chess_Knight  Chess_Pawn  Chess_Queen  Chess_Rook  Chinese_Checkers_Piece  Chip_10  Chip_50  Chip_100  Chip_500  Chip_1000  Deck  Die_4  Die_6  Die_6_Rounded  Die_8  Die_10  Die_12  Die_20  Die_Piecepack  Domino  go_game_piece_black  go_game_piece_white  Mahjong_Coin  Mahjong_Stick  Mahjong_Tile  Metal Ball  PiecePack_Arms  PiecePack_Crowns  PiecePack_Moons  PiecePack_Suns  PlayerPawn  Quarter  reversi_chip",
            "title": "Game Pieces"
        },
        {
            "location": "/spawnableobjects/#rpg-figurines",
            "text": "rpg_BARGHEST  rpg_BASILISK  rpg_BEAR  rpg_BLACK_DRAGON  rpg_CENTAUR  rpg_CERBERUS  rpg_CHIMERA  rpg_CRASC  rpg_CYCLOP  rpg_DARKNESS_WARLORD  rpg_DRAGONIDE  rpg_EVIL_WATCHER  rpg_GHOUL  rpg_GIANT_VIPER  rpg_GOBLIN  rpg_GOLEM  rpg_GRIFFON  rpg_HYDRA  rpg_KNIGHT  rpg_KOBOLD  rpg_LIZARD_WARRIOR  rpg_MAGE  rpg_MANTICORA  rpg_MUMMY  rpg_OGRE  rpg_ORC  rpg_RANGER  rpg_RAT  rpg_SKELETON_KNIGHT  rpg_TEMPLATE  rpg_THIEF  rpg_TREE_ENT  rpg_TROLL  rpg_VAMPIRE  rpg_WARRIOR  rpg_WEREWOLF  rpg_WYVERN",
            "title": "RPG Figurines"
        },
        {
            "location": "/spawnableobjects/#tilesets",
            "text": "Tileset_Barrel  Tileset_Chair  Tileset_Chest  Tileset_Corner  Tileset_Floor  Tileset_Rock  Tileset_Table  Tileset_Tree  Tileset_Wall",
            "title": "Tilesets"
        },
        {
            "location": "/spawnableobjects/#tools",
            "text": "Calculator  Counter  Digital_Clock  Notecard  Tablet",
            "title": "Tools"
        },
        {
            "location": "/spawnableobjects/#triggers",
            "text": "ScriptingTrigger  A Scripting Zone, a zone used for scripting    FogOfWarTrigger  A  Hidden Zone",
            "title": "Triggers"
        },
        {
            "location": "/spawnableobjects/#other",
            "text": "3DText  The text that the  Text Tool  spawns.",
            "title": "Other"
        },
        {
            "location": "/spawnableobjects/#custom-game-objects",
            "text": "You can also spawn  custom Objects  and then provide the custom content for them after spawning them by calling  setCustomObject() .  (See setCustomObject for usage)  You can also use setCustomObject along with  reload()  to modify an existing custom Object.",
            "title": "Custom Game Objects"
        },
        {
            "location": "/spawnableobjects/#custom-assetbundle",
            "text": "Custom_Assetbundle    Custom Parameters     parameters : A Table of parameters which determine the properties of the Object.    assetbundle : The path/url for the AssetBundle.     assetbundle_secondary : The path/url for the secondary AssetBundle property.   Optional, is not used by default.      type : An Int representing the Object's type.  Optional, defaults to 0.  0 : Generic  1 : Figurine  2 : Dice  3 : Coin  4 : Board  5 : Chip  6 : Bag  7 : Infinite bag        material : An Int representing the Object's material.  Optional, defaults to 0.  0 : Plastic  1 : Wood  2 : Metal  3 : Cardboard",
            "title": "Custom AssetBundle"
        },
        {
            "location": "/spawnableobjects/#custom-board",
            "text": "Custom_Board    Custom Parameters     parameters : A Table of parameters which determine the properties of the Object.    image : The path/url for the board.",
            "title": "Custom Board"
        },
        {
            "location": "/spawnableobjects/#custom-dice",
            "text": "Custom_Dice    Custom Parameters     parameters : A Table of parameters which determine the properties of the Object.    image : The path/url for the  custom die .    type : The type of die, which determines its number of sides.  Optional, defaults to 1.  0 : 4-sided  1 : 6-sided  2 : 8-sided  3 : 10-sided  4 : 12-sided  5 : 20-sided",
            "title": "Custom Dice"
        },
        {
            "location": "/spawnableobjects/#custom-figurine",
            "text": "Figurine_Custom    Custom Parameters     parameters : A Table of parameters which determine the properties of the Object.    image : The path/url for the  custom figurine .    image_secondary : The path/url for the custom figurine's back.  Optional, defaults to \"image\".",
            "title": "Custom Figurine"
        },
        {
            "location": "/spawnableobjects/#custom-model",
            "text": "Custom_Model    Custom Parameters     parameters : A Table of parameters which determine the properties of the Object.    mesh : The path/url for the .obj mesh used on the  custom model .    diffuse : The path/url for the diffuse image.    normal : The path/url for the normals image.  Optional, is not used by default.      collider : The path/url for the collider mesh.  Optional, defaults to a generic box collider.      convex : If the object model is convex.  Optional, defaults to false.      type : An Int representing the Object's type.  Optional, defaults to 0.  0 : Generic  1 : Figurine  2 : Dice  3 : Coin  4 : Board  5 : Chip  6 : Bag  7 : Infinite bag        material : An Int representing the Object's material.  Optional, defaults to 0.  0 : Plastic  1 : Wood  2 : Metal  3 : Cardboard        specular_intensity : The specular intensity.  Optional, defaults to 0.1.      specular_color : The specular  Color .  Optional, defaults to {r=1, g=1, b=1}.      specular_sharpness : The specular sharpness.  Optional, defaults to 3.      freshnel_strength : The freshnel strength.  Optional, defaults to 0.1.      cast_shadows : If the Object casts shadows.  Optional, defaults to true.",
            "title": "Custom Model"
        },
        {
            "location": "/spawnableobjects/#custom-tile",
            "text": "Custom_Tile    Custom Parameters     parameters : A Table of parameters which determine the properties of the Object.    image : The path/url for the  custom tile  image.    type : Determines the shape of the tile.  Optional, defaults to 0.  0 : Square/Rectangle  1 : Hex  2 : Circle        image_buttom : The path/url for the bottom-side image.  Optional, uses the top image by default.      thickness : How thick the tile is.  Optional, defaults to 0.5.      stackable : If these tiles stack together into a pile.  Optional, defaults to false.",
            "title": "Custom Tile"
        },
        {
            "location": "/spawnableobjects/#custom-token",
            "text": "Custom_Token    Custom Parameters     parameters : A Table of parameters which determine the properties of the Object.    image : The path/url for the  custom token  image.    thickness : How thick the tile is.  Optional, defaults to 0.2.      mege_distance : How accurate the edges are to the image.  Optional, defaults to 15.      stackable : If these tiles stack together into a pile.  Optional, defaults to false.",
            "title": "Custom Token"
        },
        {
            "location": "/texttool/",
            "text": "TextTool is a special Object type for creating text labels in the game instance. It is the same text that is created with the \ntext tool\n. You call these functions like this: \nself.TextTool.getFontColor()\n.\n\n\nFunction Summary\n \n\n\nObject Functions\n \n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\n\n\n\n\n\n\n\ngetFontColor()\n\n\nReturns Table of font Color.\n\n\n\n\n\n\n\n\ngetFontSize()\n\n\nReturns Int of the font size.\n\n\n\n\n\n\n\n\ngetValue()\n\n\nReturns the current text. Works the same as Object's \ngetValue()\n.\n\n\n\n\n\n\n\n\nsetFontColor(\n\u00a0font_color)\n\n\nSets font Color.\n\n\n\n\n\n\n\n\nsetFontSize(\n\u00a0font_size)\n\n\nSets font size.\n\n\n\n\n\n\n\n\nsetValue(\n\u00a0text)\n\n\nSets the current text. Works the same as Object's \nsetValue(...)\n.",
            "title": "TextTool"
        },
        {
            "location": "/texttool/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/texttool/#object-functions",
            "text": "Function Name  Description  Return      getFontColor()  Returns Table of font Color.     getFontSize()  Returns Int of the font size.     getValue()  Returns the current text. Works the same as Object's  getValue() .     setFontColor( \u00a0font_color)  Sets font Color.     setFontSize( \u00a0font_size)  Sets font size.     setValue( \u00a0text)  Sets the current text. Works the same as Object's  setValue(...) .",
            "title": "Object Functions"
        },
        {
            "location": "/timer/",
            "text": "Timer is a statis global class which provides methods for executing other functions after a delay and/or repeatedly. Each Timer is tracked by a unique \"identifier\" string. \n\n\n\n\nExample Usage: \nTimer.destroy(...)\n\n\n\n\n\n\nImportant Tip\n\n\nThe \"identifiers\" are shared between Global and all Object scripts, so each Timer must have a unique name.\n\n\n\n\nFunction Summary\n \n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\ncreate(\n\u00a0parameters)\n\n\nCreates a Timer. It will auto-delete once its repetitions have been completed.\n\n\n\n\n\n\n\n\n\n\ndestroy(\n\u00a0identifier)\n\n\nDestroys a Timer.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n \n\n\ncreate(...)\n \n\n\n\u00a0Creates a Timer. It will auto-delete once its repetitions have been completed.\n\n\n\n\ncreate(parameters)\n\n\n\n\n \nparameters\n: A Table containing the information used to start the Timer.\n\n\n \nidentifier\n: Timer's name, used to destroy it. Must be unique within all other scripts.\n\n\n \nfunction_name\n: Name of function to trigger when time is reached.\n\n\n \nfunction_owner\n: Where the function from function_name exists.\n\n\nOptional, defaults to the calling Object.\n\n\n\n\n\n\n \nparameters\n: Table containing any data that will be passed to the function.\n\n\nOptional, will not be used by default.\n\n\n\n\n\n\n \ndelay\n: Length of time before the function is triggered.\n\n\nOptional, defaults to 0.\n\n\n0 results in a delay of 1 frame before the triggered function activates.\n\n\n\n\n\n\n \nrepetitions\n: Number of times the countdown repeats.\n\n\nOptional, defaults to 1.\n\n\nUse 0 for infinite repetitions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \ndataTable\n \n=\n \n{\nwelcome\n=\n\"Hello World!\"\n}\n\n    \nTimer\n.\ncreate\n({\n\n        \nidentifier\n     \n=\n \n\"A Unique Name\"\n,\n\n        \nfunction_name\n  \n=\n \n\"fiveAfterOne\"\n,\n\n        \nparameters\n     \n=\n \ndataTable\n,\n\n        \ndelay\n          \n=\n \n1\n,\n\n        \nrepetitions\n    \n=\n \n5\n,\n\n    \n})\n\n\nend\n\n\n\nfunction\n \nfiveAfterOne\n(\nparams\n)\n\n    \nprint\n(\nparams\n.\nwelcome\n)\n\n\nend\n\n\n\n\n\n\n\nTip\n\n\nIf your timer is on an Object, a good way to establish a unique identifier for it is to use the item's GUID!\n\n\n\n\n\n\ndestroy(...)\n \n\n\n\u00a0Destroys a Timer. A timer, if it completes its number of repetitions, will automatically destroy itself.\n\n\n\n\ndestroy(identifier)\n\n\n\n\n \nidentifier\n: The unique identifier for the timer you want to destroy.",
            "title": "Timer"
        },
        {
            "location": "/timer/#function-summary",
            "text": "Function Name  Description  Return  \u00a0      create( \u00a0parameters)  Creates a Timer. It will auto-delete once its repetitions have been completed.      destroy( \u00a0identifier)  Destroys a Timer.",
            "title": "Function Summary"
        },
        {
            "location": "/timer/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/timer/#create",
            "text": "Creates a Timer. It will auto-delete once its repetitions have been completed.   create(parameters)     parameters : A Table containing the information used to start the Timer.    identifier : Timer's name, used to destroy it. Must be unique within all other scripts.    function_name : Name of function to trigger when time is reached.    function_owner : Where the function from function_name exists.  Optional, defaults to the calling Object.      parameters : Table containing any data that will be passed to the function.  Optional, will not be used by default.      delay : Length of time before the function is triggered.  Optional, defaults to 0.  0 results in a delay of 1 frame before the triggered function activates.      repetitions : Number of times the countdown repeats.  Optional, defaults to 1.  Use 0 for infinite repetitions.        function   onLoad () \n     dataTable   =   { welcome = \"Hello World!\" } \n     Timer . create ({ \n         identifier       =   \"A Unique Name\" , \n         function_name    =   \"fiveAfterOne\" , \n         parameters       =   dataTable , \n         delay            =   1 , \n         repetitions      =   5 , \n     })  end  function   fiveAfterOne ( params ) \n     print ( params . welcome )  end    Tip  If your timer is on an Object, a good way to establish a unique identifier for it is to use the item's GUID!",
            "title": "create(...)"
        },
        {
            "location": "/timer/#destroy",
            "text": "Destroys a Timer. A timer, if it completes its number of repetitions, will automatically destroy itself.   destroy(identifier)     identifier : The unique identifier for the timer you want to destroy.",
            "title": "destroy(...)"
        },
        {
            "location": "/turns/",
            "text": "Turns, a static global class, is the in-game turns system. It allows you to modify the player turns in the same way that the in-game Turns menu does. \n\n\nExample usage: \nTurns.reverse_order = true\n.\n\n\nMember Variables\n \n\n\nLike \nObject member variables\n, Turns has its own member variables.\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nenable\n\n\nEnable/disable the turns system.\n\n\n\n\n\n\n\n\ntype\n\n\nIf the turn order is automatic or custom. 1=auto, 2=custom.\n\n\n\n\n\n\n\n\norder\n\n\nA table of strings, representing the player turn order.\n\n\n\n\n\n\n\n\nreverse_order\n\n\nEnable/disable reversing turn rotation direction.\n\n\n\n\n\n\n\n\nskip_empty_hands\n\n\nEnable/disable skipping empty hands.\n\n\n\n\n\n\n\n\ndisable_interactations\n\n\nEnable/disable the blocking of players ability to interact with Objects when it is not their turn.\n\n\n\n\n\n\n\n\npass_turns\n\n\nEnable/disable a player's ability to pass their turn to another.\n\n\n\n\n\n\n\n\nturn_color\n\n\nThe color of the Player who's turn it is.\n\n\n\n\n\n\n\n\n\n\nFunction Summary\n \n\n\nFunctions\n \n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\n\n\n\n\n\n\n\ngetNextTurnColor()\n\n\nReturns the Player Color string of the next player in the turn order.\n\n\n\n\n\n\n\n\ngetPreviousTurnColor()\n\n\nReturns the Player Color string of the previous player in the turn order.",
            "title": "Turns"
        },
        {
            "location": "/turns/#member-variables",
            "text": "Like  Object member variables , Turns has its own member variables.     Variable  Description  Type      enable  Enable/disable the turns system.     type  If the turn order is automatic or custom. 1=auto, 2=custom.     order  A table of strings, representing the player turn order.     reverse_order  Enable/disable reversing turn rotation direction.     skip_empty_hands  Enable/disable skipping empty hands.     disable_interactations  Enable/disable the blocking of players ability to interact with Objects when it is not their turn.     pass_turns  Enable/disable a player's ability to pass their turn to another.     turn_color  The color of the Player who's turn it is.",
            "title": "Member Variables"
        },
        {
            "location": "/turns/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/turns/#functions",
            "text": "Function Name  Description  Return      getNextTurnColor()  Returns the Player Color string of the next player in the turn order.     getPreviousTurnColor()  Returns the Player Color string of the previous player in the turn order.",
            "title": "Functions"
        },
        {
            "location": "/ui/",
            "text": "UI, a static global class, is the method to interact with custom UI elements. It allows you to read/write attributes of elements defined in the XML of the UI. It also allows you to receive information from various inputs (like buttons) on-screen.\n\n\nExample of calling a function: \nUI.getAttributes(id)\n.\n\n\n\n\nWarning\n\n\nWhat this class does NOT do is create new UI elements.\n Those are created in the custom UI using XML. The UI scripting class is only used to modify or communicate with existing UI elements.\n\n\nSee the \nUI API\n for info on how.\n\n\n\n\nInputs\n \n\n\nInput Elements\n are able to trigger a function. By default, they trigger a function in Global. \nView here\n for information on how to trigger a function on an Object's script.\n\n\nWhen creating the input element in XML, you will select the name of the function it activates. Regardless of its name, it always will pass parameters\n\n\n\n\nfunctionName(player, value, id)\n\n\n\n\n \nplayer\n: A direct Player reference to the person that triggered the input.\n\n\n \nvalue\n: The value sent by the input. A numeric value or a string, generally.\n\n\nThis is not used by buttons!\n\n\n\n\n\n\n \nid\n: \n\n\nThis is only passed if the element was given an Id attribute in the XML.\n\n\n\n\n\n\n\n\n\n\nfunction\n \nonButtonClick\n(\nplayer\n,\n \nvalue\n,\n \nid\n)\n\n    \nprint\n(\nplayer\n.\nsteam_name\n)\n\n    \nprint\n(\nid\n)\n\n\nend\n\n\n\n\n\n\n\nElement Function Summary\n \n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\nReturn\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\ngetAttribute(\n\u00a0id, \n\u00a0attribute)\n\n\nObtains the value of a specified attribute of a UI element.\n\n\n\n\n\n\n\n\n\n\ngetAttributes(\n\u00a0id)\n\n\nReturns the attributes and their values of a UI element.\n\n\n\n\n\n\n\n\n\n\nhide(\n\u00a0id)\n\n\nHides the given UI element. Unlike the \"active\" attribute, hide triggers animations.\n\n\n\n\n\n\n\n\n\n\nsetAttribute(\n\u00a0id, \n\u00a0attribute, \n\u00a0value)\n\n\nSets the value of a specified attribute of a UI element.\n\n\n\n\n\n\n\n\n\n\nshow(\n\u00a0id)\n\n\nDisplays the given UI element. Unlike the \"active\" attribute, show triggers animations.\n\n\n\n\n\n\n\n\n\n\nsetAttributes(\n\u00a0id, \n\u00a0data)\n\n\nUpdates the value of the supplied attributes of a UI element.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nElement Function Details\n \n\n\ngetAttribute(...)\n \n\n\n\u00a0Obtains the value of a specified attribute of a UI element. What it returns will typically be a string or a number.\n\n\n\n\ngetAttribute(id, attribute)\n\n\n\n\n \nid\n: The Id that was assigned, as an attribute, to the desired XML UI element.\n\n\n \nattribute\n: The name of the attribute you wish to get the value of.\n\n\n\n\n\n\nUI\n.\ngetAttribute\n(\n\"testElement\"\n,\n \n\"fontSize\"\n)\n\n\n\n\n\n\n\ngetAttributes(...)\n \n\n\n\u00a0Returns the attributes and their values of a UI element. It only returns the attributes (and values) for elements that have had those attributes set by the user.\n\n\n\n\ngetAttributes(id)\n\n\n\n\n \nid\n: The Id that was assigned, as an attribute, to the desired XML UI element.\n\n\n\n\n\n\n\n\nReturn table\n\n\n\n\n \nparameters\n: A Table with the attributes as keys and their XML value as the key's value.\n\n\n \ntexture\n: The name of the image element\n\n\n \ncolor\n: The hex used for the color element's value.\n\n\n\n\n\n\n\n\nIMPORTANT\n: This return table is an example of one you may get back from using it on a RawImage element type. The attribute keys you get back and their values will depend on the element you use the function on as well as the attributes you, the user, have assigned to it.\n\n\n\n\n\n\nhide(...)\n \n\n\n\u00a0Hides the given UI element. Unlike the \"active\" attribute, hide triggers animations.\n\n\n\n\nhide(id)\n\n\n\n\n \nid\n: The Id that was assigned, as an attribute, to the desired XML UI element.\n\n\n\n\n\n\nUI\n.\nhide\n(\n\"testElement\"\n)\n\n\n\n\n\n\n\nsetAttribute(...)\n \n\n\n\u00a0Sets the value of a specified attribute of a UI element.\n\n\n\n\nsetAttribute(id, attribute, value)\n\n\n\n\n \nid\n: The Id that was assigned, as an attribute, to the desired XML UI element.\n\n\n \nattribute\n: The name of the attribute you want to set the value of.\n\n\n \nvalue\n: The value to set for the attribute.\n\n\n\n\n\n\nUI\n.\nsetAttribute\n(\n\"testElement\"\n,\n \n\"fontSize\"\n,\n \n200\n)\n\n\n\n\n\n\n\nshow(...)\n \n\n\n\u00a0Shows the given UI element. Unlike the \"active\" attribute, show triggers animations.\n\n\n\n\nshow(id)\n\n\n\n\n \nid\n: The Id that was assigned, as an attribute, to the desired XML UI element.\n\n\n\n\n\n\nUI\n.\nshow\n(\n\"testElement\"\n)\n\n\n\n\n\nsetAttributes(...)\n \n\n\n\u00a0Updates the value of the supplied attributes of a UI element. You do not need to set every attribute with the data table, an element will continue using any previous values you do not overwrite.\n\n\n\n\nsetAttributes(id, data)\n\n\n\n\n \nid\n: The Id that was assigned, as an attribute, to the desired XML UI element.\n\n\n \ndata\n: A Table with key/value pairs representing attributes and their values.\n\n\n\n\n\n\n\n\nExample data table\n\n\n\n\n \ndata\n: A Table with parameters which guide the function.\n\n\n \ndata.fontSize\n: Attribute's desired value value\n\n\n \ndata.color\n: Attribute's desired value\n\n\n\n\n\n\n\n\nIMPORTANT\n: This table is an example of one you may use when setting a text UI element. The attribute keys you use and their values will depend on the element you use the function on.\n\n\n\n\nattributeTable\n \n=\n \n{\n\n    \nfontSize\n \n=\n \n300\n,\n\n    \ncolor\n \n=\n \n\"#000000\"\n\n\n}\n\n\nUI\n.\nsetAttributes\n(\n\"exampleText\"\n,\n \nattributeTable\n)",
            "title": "UI"
        },
        {
            "location": "/ui/#inputs",
            "text": "Input Elements  are able to trigger a function. By default, they trigger a function in Global.  View here  for information on how to trigger a function on an Object's script.  When creating the input element in XML, you will select the name of the function it activates. Regardless of its name, it always will pass parameters   functionName(player, value, id)     player : A direct Player reference to the person that triggered the input.    value : The value sent by the input. A numeric value or a string, generally.  This is not used by buttons!      id :   This is only passed if the element was given an Id attribute in the XML.      function   onButtonClick ( player ,   value ,   id ) \n     print ( player . steam_name ) \n     print ( id )  end",
            "title": "Inputs"
        },
        {
            "location": "/ui/#element-function-summary",
            "text": "Function Name  Description  Return  \u00a0      getAttribute( \u00a0id,  \u00a0attribute)  Obtains the value of a specified attribute of a UI element.      getAttributes( \u00a0id)  Returns the attributes and their values of a UI element.      hide( \u00a0id)  Hides the given UI element. Unlike the \"active\" attribute, hide triggers animations.      setAttribute( \u00a0id,  \u00a0attribute,  \u00a0value)  Sets the value of a specified attribute of a UI element.      show( \u00a0id)  Displays the given UI element. Unlike the \"active\" attribute, show triggers animations.      setAttributes( \u00a0id,  \u00a0data)  Updates the value of the supplied attributes of a UI element.",
            "title": "Element Function Summary"
        },
        {
            "location": "/ui/#element-function-details",
            "text": "",
            "title": "Element Function Details"
        },
        {
            "location": "/ui/#getattribute",
            "text": "Obtains the value of a specified attribute of a UI element. What it returns will typically be a string or a number.   getAttribute(id, attribute)     id : The Id that was assigned, as an attribute, to the desired XML UI element.    attribute : The name of the attribute you wish to get the value of.    UI . getAttribute ( \"testElement\" ,   \"fontSize\" )",
            "title": "getAttribute(...)"
        },
        {
            "location": "/ui/#getattributes",
            "text": "Returns the attributes and their values of a UI element. It only returns the attributes (and values) for elements that have had those attributes set by the user.   getAttributes(id)     id : The Id that was assigned, as an attribute, to the desired XML UI element.     Return table     parameters : A Table with the attributes as keys and their XML value as the key's value.    texture : The name of the image element    color : The hex used for the color element's value.     IMPORTANT : This return table is an example of one you may get back from using it on a RawImage element type. The attribute keys you get back and their values will depend on the element you use the function on as well as the attributes you, the user, have assigned to it.",
            "title": "getAttributes(...)"
        },
        {
            "location": "/ui/#hide",
            "text": "Hides the given UI element. Unlike the \"active\" attribute, hide triggers animations.   hide(id)     id : The Id that was assigned, as an attribute, to the desired XML UI element.    UI . hide ( \"testElement\" )",
            "title": "hide(...)"
        },
        {
            "location": "/ui/#setattribute",
            "text": "Sets the value of a specified attribute of a UI element.   setAttribute(id, attribute, value)     id : The Id that was assigned, as an attribute, to the desired XML UI element.    attribute : The name of the attribute you want to set the value of.    value : The value to set for the attribute.    UI . setAttribute ( \"testElement\" ,   \"fontSize\" ,   200 )",
            "title": "setAttribute(...)"
        },
        {
            "location": "/ui/#show",
            "text": "Shows the given UI element. Unlike the \"active\" attribute, show triggers animations.   show(id)     id : The Id that was assigned, as an attribute, to the desired XML UI element.    UI . show ( \"testElement\" )",
            "title": "show(...)"
        },
        {
            "location": "/ui/#setattributes",
            "text": "Updates the value of the supplied attributes of a UI element. You do not need to set every attribute with the data table, an element will continue using any previous values you do not overwrite.   setAttributes(id, data)     id : The Id that was assigned, as an attribute, to the desired XML UI element.    data : A Table with key/value pairs representing attributes and their values.     Example data table     data : A Table with parameters which guide the function.    data.fontSize : Attribute's desired value value    data.color : Attribute's desired value     IMPORTANT : This table is an example of one you may use when setting a text UI element. The attribute keys you use and their values will depend on the element you use the function on.   attributeTable   =   { \n     fontSize   =   300 , \n     color   =   \"#000000\"  }  UI . setAttributes ( \"exampleText\" ,   attributeTable )",
            "title": "setAttributes(...)"
        },
        {
            "location": "/webrequest/",
            "text": "The static global WebRequest class allows you to interact with the web via get, post and put. This is a more advanced feature that allows you to store/retrieve data to/from an external database.\n\n\n\n\nExample Usage:\nWebRequest\n.\nget\n(\n\u201c\nhttps\n:\n//\nwww\n.\ngoogle\n.\ncom\n/\n\u201d\n,\n \nself\n,\n \n\u201c\nwebRequestCallback\n\u201d\n)\n\n\n\n\nMember Variables\n \n\n\nLike \nObject member variables\n, WebRequests have their own member variables.\n\n\nA WebRequest is returned as part of a function, and these member variables are how your access its information.\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\ndownload_progress\n\n\nDownload percentage, represented as a value from 0-1.\n\n\n\n\n\n\n\n\nerror\n\n\nError text.\n\n\n\n\n\n\n\n\nis_error\n\n\nIf there is an error with the WebRequest.\n\n\n\n\n\n\n\n\nis_done\n\n\nIf the WebRequest has finished.\n\n\n\n\n\n\n\n\ntext\n\n\nReturned data.\n\n\n\n\n\n\n\n\nupload_progress\n\n\nUpload percentage, represented as a value from 0-1.\n\n\n\n\n\n\n\n\nurl\n\n\nThe targeted URL.\n\n\n\n\n\n\n\n\n\n\nFunction Summary\n \n\n\nAll functions return a WebRequest.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nget(\n\u00a0url, \n\u00a0callback_owner, \n\u00a0callback)\n\n\nGet data from the current URL.\n\n\n\n\n\n\n\n\npost(\n\u00a0url,  \n\u00a0form, \n\u00a0callback_owner, \n\u00a0callback)\n\n\nPost the form to the URL.\n\n\n\n\n\n\n\n\nput(\n\u00a0url,  \n\u00a0data, \n\u00a0callback_owner, \n\u00a0callback)\n\n\nPost the data to the URL.\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n \n\n\nget(...)\n \n\n\nGet data from the current URL.\n\n\n\n\nget(url, callback_owner, callback)\n\n\n\n\n \nurl\n: The url to pull data from.\n\n\n \ncallback_owner\n: The Object that the callback function will be called on.\n\n\nGlobal, self or any Object reference are all valid targets.\n\n\n\n\n\n\n \ncallback\n: The name of the function to be called.\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nprint\n(\n\"Web Request Called\"\n)\n\n    \nWebRequest\n.\nget\n(\n\"https://www.google.com\"\n,\n \nGlobal\n,\n \n\"webRequestCallback\"\n)\n\n\nend\n\n\n\nfunction\n \nwebRequestCallback\n(\nwebReturn\n)\n\n    \nprint\n(\n\"Web Request Returned\"\n)\n\n    \nprint\n(\nwebReturn\n.\nis_done\n)\n\n\nend\n\n\n\n\n\n\n\npost(...)\n \n\n\nPost the form to the URL.\n\n\n\n\npost(url, form, callback_owner, callback)\n\n\n\n\n \nurl\n: The url to pull post to.\n\n\n \nform\n: The form of data to post.    \n\n\n \ncallback_owner\n: The Object that the callback function will be called on.\n\n\nGlobal, self or any Object reference are all valid targets.\n\n\n\n\n\n\n \ncallback\n: The name of the function to be called.\n\n\n\n\n\n\n\n\nput(...)\n \n\n\nPost the data to the URL.\n\n\n\n\nput(url, data, callback_owner, callback)\n\n\n\n\n \nurl\n: The url to pull post to.\n\n\n \ndata\n: The data string to post.    \n\n\n \ncallback_owner\n: The Object that the callback function will be called on.\n\n\nGlobal, self or any Object reference are all valid targets.\n\n\n\n\n\n\n \ncallback\n: The name of the function to be called.",
            "title": "Web Request"
        },
        {
            "location": "/webrequest/#member-variables",
            "text": "Like  Object member variables , WebRequests have their own member variables.  A WebRequest is returned as part of a function, and these member variables are how your access its information.     Variable  Description  Type      download_progress  Download percentage, represented as a value from 0-1.     error  Error text.     is_error  If there is an error with the WebRequest.     is_done  If the WebRequest has finished.     text  Returned data.     upload_progress  Upload percentage, represented as a value from 0-1.     url  The targeted URL.",
            "title": "Member Variables"
        },
        {
            "location": "/webrequest/#function-summary",
            "text": "All functions return a WebRequest.     Function Name  Description  \u00a0      get( \u00a0url,  \u00a0callback_owner,  \u00a0callback)  Get data from the current URL.     post( \u00a0url,   \u00a0form,  \u00a0callback_owner,  \u00a0callback)  Post the form to the URL.     put( \u00a0url,   \u00a0data,  \u00a0callback_owner,  \u00a0callback)  Post the data to the URL.",
            "title": "Function Summary"
        },
        {
            "location": "/webrequest/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/webrequest/#get",
            "text": "Get data from the current URL.   get(url, callback_owner, callback)     url : The url to pull data from.    callback_owner : The Object that the callback function will be called on.  Global, self or any Object reference are all valid targets.      callback : The name of the function to be called.    function   onLoad () \n     print ( \"Web Request Called\" ) \n     WebRequest . get ( \"https://www.google.com\" ,   Global ,   \"webRequestCallback\" )  end  function   webRequestCallback ( webReturn ) \n     print ( \"Web Request Returned\" ) \n     print ( webReturn . is_done )  end",
            "title": "get(...)"
        },
        {
            "location": "/webrequest/#post",
            "text": "Post the form to the URL.   post(url, form, callback_owner, callback)     url : The url to pull post to.    form : The form of data to post.        callback_owner : The Object that the callback function will be called on.  Global, self or any Object reference are all valid targets.      callback : The name of the function to be called.",
            "title": "post(...)"
        },
        {
            "location": "/webrequest/#put",
            "text": "Post the data to the URL.   put(url, data, callback_owner, callback)     url : The url to pull post to.    data : The data string to post.        callback_owner : The Object that the callback function will be called on.  Global, self or any Object reference are all valid targets.      callback : The name of the function to be called.",
            "title": "put(...)"
        },
        {
            "location": "/ui/introUI/",
            "text": "The Custom UI system allows users to create custom UIs to support their game. The UI system is unique because the elements are created using a simple XML system.\n\n\nCore Features\n \n\n\nThere are 3 main pieces to the UI system.\n\n\n\n\nCreate Elements\n\n\nYou are able to create individual elements and position them on the screen in a variety of ways.\n\n\n\n\n\n\nImport Assets\n\n\nBy clicking the button in the upper-right corner of the scripting window in-game, you open a menu that lets you upload/manage assets that can be utilized by the UI. When you save your table after uploading images here, they are saved forever.\n\n\n\n\n\n\nCommunicate with Lua\n\n\nYour scripts can be triggered by UI elements and your Lua scripts can also modify elements in the UI during gameplay.\n\n\n\n\n\n\n\n\n\n\nGetting Started\n \n\n\nOnce you load a saved table, click the Scripting button at the top of the screen. The traditional scripting window will now be visible, but you will also see a green tab labeled \nUI\n. Clicking that will open a blank window. In this box you will input your XML. Once you are finished, click \nSave & Play\n in its upper-left hand corner and the save file will re-load with your changes applied to it.\n\n\nIf you do not see your UI elements appearing, it is possible your code has an error in it. Look down to the In-Game chat box for the error message It will indicate the line and character position the issue was discovered when trying to parse your code.\n\n\nBasics of XML\n \n\n\nIn the UI XML, you create \nelements\n and modify them with \nattributes\n. Each element is created using tags. Here is an element being created.\n\n\n<Text>\nDisplayed Text\n</Text>\n\n\n\n\n\nThose elements can be modified with attributes to change how they look and, in some cases, function.\n\n\n<Text\n \nfontSize=\n\"200\"\n>\nBigger Displayed Text\n</Text>\n\n\n\n\n\nInput types are able to communicate to a Lua script in-game.\n\n\n<Button\n \nonClick=\n\"uibutton\"\n>\nExample Button\n</Button>\n\n\n\n\n\nThere are even organizational methods you can do to easily group these elements together.\n\n\n\n\nImportant\n\n\nThe value for any attribute is \nALWAYS\n in quotes. \n\n\nINCORRECT\n: \n<Text\n \nfontSize=\n200\n>\nBigger Displayed Text\n</Text>\n\n\nCORRECT\n: \n<Text\n \nfontSize=\n\"200\"\n>\nBigger Displayed Text\n</Text>\n\n\n\n\nExample UI\n \n\n\nExample Grid Menu: \nhttps://steamcommunity.com/sharedfiles/filedetails/?id=1382344471\n\nExample Rulebook: \nhttps://steamcommunity.com/sharedfiles/filedetails/?id=1384145407",
            "title": "Introduction"
        },
        {
            "location": "/ui/introUI/#core-features",
            "text": "There are 3 main pieces to the UI system.   Create Elements  You are able to create individual elements and position them on the screen in a variety of ways.    Import Assets  By clicking the button in the upper-right corner of the scripting window in-game, you open a menu that lets you upload/manage assets that can be utilized by the UI. When you save your table after uploading images here, they are saved forever.    Communicate with Lua  Your scripts can be triggered by UI elements and your Lua scripts can also modify elements in the UI during gameplay.",
            "title": "Core Features"
        },
        {
            "location": "/ui/introUI/#getting-started",
            "text": "Once you load a saved table, click the Scripting button at the top of the screen. The traditional scripting window will now be visible, but you will also see a green tab labeled  UI . Clicking that will open a blank window. In this box you will input your XML. Once you are finished, click  Save & Play  in its upper-left hand corner and the save file will re-load with your changes applied to it.  If you do not see your UI elements appearing, it is possible your code has an error in it. Look down to the In-Game chat box for the error message It will indicate the line and character position the issue was discovered when trying to parse your code.",
            "title": "Getting Started"
        },
        {
            "location": "/ui/introUI/#basics-of-xml",
            "text": "In the UI XML, you create  elements  and modify them with  attributes . Each element is created using tags. Here is an element being created.  <Text> Displayed Text </Text>   Those elements can be modified with attributes to change how they look and, in some cases, function.  <Text   fontSize= \"200\" > Bigger Displayed Text </Text>   Input types are able to communicate to a Lua script in-game.  <Button   onClick= \"uibutton\" > Example Button </Button>   There are even organizational methods you can do to easily group these elements together.   Important  The value for any attribute is  ALWAYS  in quotes.   INCORRECT :  <Text   fontSize= 200 > Bigger Displayed Text </Text>  CORRECT :  <Text   fontSize= \"200\" > Bigger Displayed Text </Text>",
            "title": "Basics of XML"
        },
        {
            "location": "/ui/introUI/#example-ui",
            "text": "Example Grid Menu:  https://steamcommunity.com/sharedfiles/filedetails/?id=1382344471 \nExample Rulebook:  https://steamcommunity.com/sharedfiles/filedetails/?id=1384145407",
            "title": "Example UI"
        },
        {
            "location": "/ui/attributes/",
            "text": "As mentioned in the \nIntroduction\n, attributes are modifiers that can be applied to elements. They can be applied to individual elements or to whole groups of them.\n\n\n\n\nImportant\n\n\nThey consists of two parts, a \ntag\n and a \nvalue\n. \nThe value is always in quotation marks.\n\n\n\n\nAttribute types\n \n\n\nFor XML, most of the attribute types are self-explanatory, like string or float (See Lua Scripting section for details on those). However XML has some unique types.\n\n\n\n\n\n\nHTML 6 Char Hex\n: \n#FFFFFF\n \n(white 100% opacity)\n\n\n8 Char Hex\n: \n#FFFFFFCC\n \n(white 80% opacity)\n\n\nRGB Color\n: \nrgb(1,1,1)\n \n(white 100% opacity)\n\n\nRGBA Color\n: \nrgba(1,1,1,0.8)\n \n(white 80% opacity)\n\n\n\n\n\n\n\n\nColor block values are used to specify the colors for elements such as buttons and input fields.\n\n\nFormat: \n(normalColor|highlightedColor|pressedColor|disabledColor)\n where each color is formatted as above, e.g. \n#FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)\n\n\n\n\n\n\n\n\nTrue\n: \n1\n or \ntrue\n\n\nFalse\n: \n0\n or \nfalse\n\n\n\n\n\n\n\n\n\n\nCommon Attributes\n \n\n\nElements all share some common attributes which are not repeated under their separate entries. They can be broker down into category.\n\n\nGeneral Attributes\n \n\n\n\n\n\n\n\n\nAttribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nactive\n\n\nSpecifies whether or not this element is active. This can be used to hide/show elements via scripting. Triggering this via script will not trigger animations.\n\n\nbool\n\n\ntrue\n\n\n\n\n\n\nclass\n\n\nThis allows you to group elements together by giving them the same class. It is used with \nDefaults\n.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\nid\n\n\nUsed by Lua scripting to identify an element within the XML.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\nvisibility\n\n\nWhat colors are able to see the element.\n\n\nstring\n\n\n(visible to all)\n\n\n\n\n\n\n\n\n\n\nDesignating Multiple Visibility Targets\n\n\nFor visiblity, you can use multiple color names by putting a \n|\n between each color name. \n\"Red|Blue|Green\"\n\n\n\n\nImage Attributes\n \n\n\nApplies to elements with an image component. The string that \nimage\ns all take is the \nNAME THE IMAGE WAS GIVEN WHEN YOU PUT IT IN THE IN-GAME ASSET MANAGER\n. \n\n\n\n\n\n\n\n\nAttribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nimage\n\n\nName of image (in the asset manager).\n\n\nstring\n\n\n(\nnone\n)\n\n\n\n\n\n\npreserveAspect\n\n\nShould the aspect ratio of this image be preserved?\n\n\n\n\n(varies)\n\n\n\n\n\n\ncolor\n\n\nColor for this element's image\n\n\n\n\nclear\n or \n#FFFFFF\n\n\n\n\n\n\ntype\n\n\nImage Type\n\n\nSimple, Sliced, Filled, Tiled\n\n\n(varies)\n\n\n\n\n\n\nraycastTarget\n\n\nIf the element blocks clicks.\n\n\n\n\ntrue\n\n\n\n\n\n\n\n\nAppearance Attributes\n \n\n\n\n\n\n\n\n\nAttribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nshadow\n\n\nDefines the shadow color of this element.\n\n\n\n\n(none)\n\n\n\n\n\n\nshadowDistance\n\n\nDefines the distance of the shadow for this element.\n\n\nfloat(x) float(y)\n\n\n1 -1\n\n\n\n\n\n\noutline\n\n\nDefines the outline color of this element.\n\n\n\n\n(none)\n\n\n\n\n\n\noutlineSize\n\n\nDefines the size of this elements outline.\n\n\nfloat(x) float(y)\n\n\n1 -1\n\n\n\n\n\n\n\n\nLayout Element Attributes\n \n\n\nThese will only apply to elements within a layout group.\n\n\n\n\n\n\n\n\nAttribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nignoreLayout\n\n\nShould this element ignore its parent layout group?\n\n\n\n\nfalse\n\n\n\n\n\n\nminWidth\n\n\nMinimum width for this element.\n\n\nfloat\n\n\n\n\n\n\n\n\nminHeight\n\n\nMinimum height for this element.\n\n\nfloat\n\n\n\n\n\n\n\n\npreferredWidth\n\n\nPreferred width for this element.\n\n\nfloat\n\n\n\n\n\n\n\n\npreferredHeight\n\n\nPreferred height for this element.\n\n\nfloat\n\n\n\n\n\n\n\n\nflexibleWidth\n\n\nShould the width of this element be flexible?\n\n\n1\n0\n\n\n\n\n\n\n\n\nflexibleHeight\n\n\nShould the height of this element be flexible?\n\n\n1\n0\n\n\n\n\n\n\n\n\n\n\nPosition/Size Attributes (Basic)\n \n\n\n\n\n\n\n\n\nAttribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nrectAlignment\n\n\nDefines this elements position within its parent. Only applies to elements not contained within layout groups.\n\n\nUpperLeft, UpperCenter, UpperRight, MiddleLeft, MiddleCenter, MiddleRight, LowerLeft, LowerCenter, LowerRight\n\n\nMiddleCenter\n\n\n\n\n\n\nwidth\n\n\nDefines the width of this element.\n\n\nfloat (fixed width) or a Percentage value\n\n\n100%\n\n\n\n\n\n\nheight\n\n\nDefines the height of this element.\n\n\nfloat (fixed width) or a Percentage value\n\n\n100%\n\n\n\n\n\n\noffsetXY\n\n\nDefines an offset to the position of this element, e.g. a value of \n-32 0\n will cause this element to be 32 pixels to the left of where it would otherwise be.\n\n\nfloat (x) float (y)\n\n\n0 0\n\n\n\n\n\n\n\n\nPosition/Size Attributes (Adv)\n \n\n\nThese provide deeper access to Unity's \nRectTransform\n properties.\n\n\n\n\n\n\n\n\nAttribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nanchorMin\n\n\n\n\nfloat(x) float(y)\n\n\n\n\n\n\n\n\nanchorMax\n\n\n\n\nfloat(x) float(y)\n\n\n\n\n\n\n\n\nsizeDelta\n\n\n\n\nfloat(x) float(y)\n\n\n\n\n\n\n\n\npivot\n\n\n\n\nfloat(x) float(y)\n\n\n\n\n\n\n\n\nrotation\n\n\n\n\nfloat(x) float(y) float(z)\n\n\n\n\n\n\n\n\nscale\n\n\n\n\nfloat(x) float(y)\n\n\n\n\n\n\n\n\noffsetMin\n\n\n\n\nfloat(left) float(bottom)\n\n\n\n\n\n\n\n\noffsetMax\n\n\n\n\nfloat(left) float(bottom)\n\n\n\n\n\n\n\n\n\n\nDragging Attributes\n \n\n\nAllow users to move elements by click/dragging.\n\n\n\n\n\n\n\n\nAttribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nallowDragging\n\n\nAllow this element to be dragged? \nDoes not work on child elements of layout groups)\n\n\n\n\nfalse\n\n\n\n\n\n\nrestrictDraggingToParentBounds\n\n\nPrevent this element from being dragged outside of its parent?\n\n\n\n\ntrue\n\n\n\n\n\n\nreturnToOriginalPositionWhenReleased\n\n\nIf this is set to true, then the element will return to its original position when it is released.\n\n\n\n\ntrue\n\n\n\n\n\n\n\n\nAnimation Attributes\n \n\n\n\n\n\n\n\n\nAttribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nshowAnimation\n\n\n\n\nNone\nGrow\nFadeIn\nSlideIn_Left\nSlideIn_Right\nSlideIn_Top\nSlideIn_Bottom\n\n\nNone\n\n\n\n\n\n\nhideAnimation\n\n\n\n\nNone\nShrink\nFadeOut\nSlideOut_Left\nSlideOut_Right\nSlideOut_Top\nSlideOut_Bottom\n\n\nNone\n\n\n\n\n\n\nshowAnimationDelay\n\n\nAdds a short delay before playing this element's show animation.\n\n\nfloat\n\n\n0\n\n\n\n\n\n\nhideAnimationDelay\n\n\nAdds a short delay before playing this element's hide animation.\n\n\nfloat\n\n\n0\n\n\n\n\n\n\nanimationDuration\n\n\nSpecifies how long show/hide animations should take to play.\n\n\nfloat\n\n\n0.25\n\n\n\n\n\n\n\n\nTooltip Attributes\n \n\n\nAllow any element to have a tooltip (text that appears when the element is hovered over by the mouse).\n\n\n\n\n\n\n\n\nAttribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\ntooltip\n\n\nTooltip text.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\ntooltipBorderColor\n\n\nColor of the tooltips border.\n\n\n\n\n#FFFFFF\n\n\n\n\n\n\ntooltipBackgroundColor\n\n\nColor of the tooltips background\n\n\n\n\nrgba(0,0,0,0.62)\n\n\n\n\n\n\ntooltipTextColor\n\n\nColor of the text within this tooltip\n\n\n\n\n\n\n\n\n\n\ntooltipPosition\n\n\nPosition of this tooltip in relation to the element.\n\n\nAbove\nBelow\nLeft\nRight\n\n\nRight\n\n\n\n\n\n\ntooltipBorderImage\n\n\nThis attribute allows you to override the default image used for the tooltips border.\n\n\nstring\n\n\n\n\n\n\n\n\ntooltipBackgroundImage\n\n\nThis attribute allows you to override the default image used for the tooltips background.\n\n\nstring\n\n\n\n\n\n\n\n\ntooltipOffset\n\n\nThis attribute allows you to modify the distance this tooltip will appear from the element.\n\n\nfloat\n\n\n\n\n\n\n\n\n\n\n\n\nUsage\n \n\n\nSingle Element Attributes\n \n\n\nThis is how you would assign attributes to a single element.\n\n\nOne Attribute\n \n\n\n<Button\n \nonClick=\n\"test\"\n>\nHello\n</Button>\n\n\n\n\n\nMultiple Attributes\n \n\n\n<Button\n \nonClick=\n\"test\"\n \nallowDragging=\n\"true\"\n>\nHello\n</Button>\n\n\n\n\n\nMany Attributes\n \n\n\n<Button\n \n    \nheight=\n\"100\"\n \n    \nwidth=\n\"200\"\n\n    \ncolor=\n\"blue\"\n\n    \nonClick=\n\"test\"\n\n    \nallowDragging=\n\"true\"\n\n    \nrectAlignment=\n\"MiddleRight\"\n\n    \ntooltip=\n\"Test Tooltip\"\n \n    \ntooltipPosition=\n\"Above\"\n\n    \nfontSize=\n\"32\"\n \n    \ntextColor=\n\"#ff0000\"\n\n\n>\nHello\n\n</Button>",
            "title": "Attributes"
        },
        {
            "location": "/ui/attributes/#attribute-types",
            "text": "For XML, most of the attribute types are self-explanatory, like string or float (See Lua Scripting section for details on those). However XML has some unique types.    HTML 6 Char Hex :  #FFFFFF   (white 100% opacity)  8 Char Hex :  #FFFFFFCC   (white 80% opacity)  RGB Color :  rgb(1,1,1)   (white 100% opacity)  RGBA Color :  rgba(1,1,1,0.8)   (white 80% opacity)     Color block values are used to specify the colors for elements such as buttons and input fields.  Format:  (normalColor|highlightedColor|pressedColor|disabledColor)  where each color is formatted as above, e.g.  #FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)     True :  1  or  true  False :  0  or  false",
            "title": "Attribute types"
        },
        {
            "location": "/ui/attributes/#common-attributes",
            "text": "Elements all share some common attributes which are not repeated under their separate entries. They can be broker down into category.",
            "title": "Common Attributes"
        },
        {
            "location": "/ui/attributes/#general-attributes",
            "text": "Attribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      active  Specifies whether or not this element is active. This can be used to hide/show elements via scripting. Triggering this via script will not trigger animations.  bool  true    class  This allows you to group elements together by giving them the same class. It is used with  Defaults .  string  (none)    id  Used by Lua scripting to identify an element within the XML.  string  (none)    visibility  What colors are able to see the element.  string  (visible to all)      Designating Multiple Visibility Targets  For visiblity, you can use multiple color names by putting a  |  between each color name.  \"Red|Blue|Green\"",
            "title": "General Attributes"
        },
        {
            "location": "/ui/attributes/#image-attributes",
            "text": "Applies to elements with an image component. The string that  image s all take is the  NAME THE IMAGE WAS GIVEN WHEN YOU PUT IT IN THE IN-GAME ASSET MANAGER .      Attribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      image  Name of image (in the asset manager).  string  ( none )    preserveAspect  Should the aspect ratio of this image be preserved?   (varies)    color  Color for this element's image   clear  or  #FFFFFF    type  Image Type  Simple, Sliced, Filled, Tiled  (varies)    raycastTarget  If the element blocks clicks.   true",
            "title": "Image Attributes"
        },
        {
            "location": "/ui/attributes/#appearance-attributes",
            "text": "Attribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      shadow  Defines the shadow color of this element.   (none)    shadowDistance  Defines the distance of the shadow for this element.  float(x) float(y)  1 -1    outline  Defines the outline color of this element.   (none)    outlineSize  Defines the size of this elements outline.  float(x) float(y)  1 -1",
            "title": "Appearance Attributes"
        },
        {
            "location": "/ui/attributes/#layout-element-attributes",
            "text": "These will only apply to elements within a layout group.     Attribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      ignoreLayout  Should this element ignore its parent layout group?   false    minWidth  Minimum width for this element.  float     minHeight  Minimum height for this element.  float     preferredWidth  Preferred width for this element.  float     preferredHeight  Preferred height for this element.  float     flexibleWidth  Should the width of this element be flexible?  1 0     flexibleHeight  Should the height of this element be flexible?  1 0",
            "title": "Layout Element Attributes"
        },
        {
            "location": "/ui/attributes/#positionsize-attributes-basic",
            "text": "Attribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      rectAlignment  Defines this elements position within its parent. Only applies to elements not contained within layout groups.  UpperLeft, UpperCenter, UpperRight, MiddleLeft, MiddleCenter, MiddleRight, LowerLeft, LowerCenter, LowerRight  MiddleCenter    width  Defines the width of this element.  float (fixed width) or a Percentage value  100%    height  Defines the height of this element.  float (fixed width) or a Percentage value  100%    offsetXY  Defines an offset to the position of this element, e.g. a value of  -32 0  will cause this element to be 32 pixels to the left of where it would otherwise be.  float (x) float (y)  0 0",
            "title": "Position/Size Attributes (Basic)"
        },
        {
            "location": "/ui/attributes/#positionsize-attributes-adv",
            "text": "These provide deeper access to Unity's  RectTransform  properties.     Attribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      anchorMin   float(x) float(y)     anchorMax   float(x) float(y)     sizeDelta   float(x) float(y)     pivot   float(x) float(y)     rotation   float(x) float(y) float(z)     scale   float(x) float(y)     offsetMin   float(left) float(bottom)     offsetMax   float(left) float(bottom)",
            "title": "Position/Size Attributes (Adv)"
        },
        {
            "location": "/ui/attributes/#dragging-attributes",
            "text": "Allow users to move elements by click/dragging.     Attribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      allowDragging  Allow this element to be dragged?  Does not work on child elements of layout groups)   false    restrictDraggingToParentBounds  Prevent this element from being dragged outside of its parent?   true    returnToOriginalPositionWhenReleased  If this is set to true, then the element will return to its original position when it is released.   true",
            "title": "Dragging Attributes"
        },
        {
            "location": "/ui/attributes/#animation-attributes",
            "text": "Attribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      showAnimation   None Grow FadeIn SlideIn_Left SlideIn_Right SlideIn_Top SlideIn_Bottom  None    hideAnimation   None Shrink FadeOut SlideOut_Left SlideOut_Right SlideOut_Top SlideOut_Bottom  None    showAnimationDelay  Adds a short delay before playing this element's show animation.  float  0    hideAnimationDelay  Adds a short delay before playing this element's hide animation.  float  0    animationDuration  Specifies how long show/hide animations should take to play.  float  0.25",
            "title": "Animation Attributes"
        },
        {
            "location": "/ui/attributes/#tooltip-attributes",
            "text": "Allow any element to have a tooltip (text that appears when the element is hovered over by the mouse).     Attribute\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      tooltip  Tooltip text.  string  (none)    tooltipBorderColor  Color of the tooltips border.   #FFFFFF    tooltipBackgroundColor  Color of the tooltips background   rgba(0,0,0,0.62)    tooltipTextColor  Color of the text within this tooltip      tooltipPosition  Position of this tooltip in relation to the element.  Above Below Left Right  Right    tooltipBorderImage  This attribute allows you to override the default image used for the tooltips border.  string     tooltipBackgroundImage  This attribute allows you to override the default image used for the tooltips background.  string     tooltipOffset  This attribute allows you to modify the distance this tooltip will appear from the element.  float",
            "title": "Tooltip Attributes"
        },
        {
            "location": "/ui/attributes/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/ui/attributes/#single-element-attributes",
            "text": "This is how you would assign attributes to a single element.",
            "title": "Single Element Attributes"
        },
        {
            "location": "/ui/attributes/#one-attribute",
            "text": "<Button   onClick= \"test\" > Hello </Button>",
            "title": "One Attribute"
        },
        {
            "location": "/ui/attributes/#multiple-attributes",
            "text": "<Button   onClick= \"test\"   allowDragging= \"true\" > Hello </Button>",
            "title": "Multiple Attributes"
        },
        {
            "location": "/ui/attributes/#many-attributes",
            "text": "<Button  \n     height= \"100\"  \n     width= \"200\" \n     color= \"blue\" \n     onClick= \"test\" \n     allowDragging= \"true\" \n     rectAlignment= \"MiddleRight\" \n     tooltip= \"Test Tooltip\"  \n     tooltipPosition= \"Above\" \n     fontSize= \"32\"  \n     textColor= \"#ff0000\"  > Hello </Button>",
            "title": "Many Attributes"
        },
        {
            "location": "/ui/basicelements/",
            "text": "These are display-type elements for the UI. They cannot send information to any Lua scripts.\n\n\nEach element has its own attributes specific to its type that work in addition to the \ncommon attributes\n.\n\n\nElement Summary\n \n\n\n\n\n\n\n\n\nElement Name\n\n\nDescription\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n<Text></Text>\n\n\nAdds basic text.\n\n\n\n\n\n\n\n\n<Image></Image>\n\n\nAdds an image.\n\n\n\n\n\n\n\n\n<ProgressBar></ProgressBar>\n\n\nDisplays a progress bar which can be updated dynamically via script.\n\n\n\n\n\n\n\n\n\n\n\n\nElement Details\n \n\n\nText\n \n\n\nAdds basic text.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType / Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nThis can be used to determine the text that appears. It can also be modified externally by the script.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\nalignment\n\n\n\n\nUpperLeft\nUpperCenter\nUpperRight\nMiddleLeft\nMiddleCenter\nMiddleRight\nLowerLeft\nLowerCenter\nLowerRight\n\n\nMiddleCenter\n\n\n\n\n\n\ncolor\n\n\n\n\n\n\n#323232\n\n\n\n\n\n\nfontStyle\n\n\n\n\nNormal\nBold\nItalic\nBoldItalic\n\n\nNormal\n\n\n\n\n\n\nfontSize\n\n\n\n\nfloat\n\n\n14\n\n\n\n\n\n\nresizeTextForBestFit\n\n\nResize text to fit?\n\n\n\n\nfalse\n\n\n\n\n\n\nresizeTextMinSize\n\n\nMinimum font size\n\n\nfloat\n\n\n10\n\n\n\n\n\n\nresizeTextMaxSize\n\n\nMaximum font size\n\n\nfloat\n\n\n40\n\n\n\n\n\n\nhorizontalOverflow\n\n\n\n\nWrap\nOverflow\n\n\nOverflow\n\n\n\n\n\n\nverticalOverflow\n\n\n\n\nTruncate\nOverflow\n\n\nTruncate\n\n\n\n\n\n\n\n\n\n\nImage\n \n\n\nAdds an image.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nimage\n\n\nThe name of the file in the asset manager (upper right corner of the scripting window in-game).\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\ncolor\n\n\n\n\n\n\n#FFFFFF\n\n\n\n\n\n\ntype\n\n\nImage Type\n\n\nSimple\nSliced\nFilled\nTiled\n\n\nSimple\n\n\n\n\n\n\nraycastTarget\n\n\nShould this image block clicks from passing through it?\n\n\n\n\ntrue\n\n\n\n\n\n\n\n\n\n\nProgressBar\n \n\n\nDisplays a progress bar which can be updated dynamically via script.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType / Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nimage\n\n\nBackground Image\n\n\n(path to image)\n\n\n(none)\n\n\n\n\n\n\ncolor\n\n\nBackground Color\n\n\n\n\n#FFFFFF\n\n\n\n\n\n\nfillImage\n\n\nFill Image\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\nfillImageColor\n\n\nFill Color\n\n\n\n\n#FFFFFF\n\n\n\n\n\n\npercentage\n\n\nPercentage to Display\n\n\nfloat\n\n\n0\n\n\n\n\n\n\nshowPercentageText\n\n\nIs the percentage text displayed?\n\n\n\n\ntrue\n\n\n\n\n\n\npercentageTextFormat\n\n\nFormat to use for the percentage text\n\n\nstring\n\n\n0.00\n\n\n\n\n\n\ntextColor\n\n\nPercentage Text Color\n\n\n\n\n#000000\n\n\n\n\n\n\ntextShadow\n\n\nPercentage Text Shadow Color\n\n\n\n\n(none)\n\n\n\n\n\n\ntextOutline\n\n\nPercentage Text Outline Color\n\n\n\n\n(none)\n\n\n\n\n\n\ntextAlignment\n\n\nPercentage Text Alignment\n\n\nUpperLeft\nUpperCenter\nUpperRight\nMiddleLeft\nMiddleCenter\nMiddleRight\nLowerLeft\nLowerCenter\nLowerRight\n\n\nMiddleCenter",
            "title": "Basic Elements"
        },
        {
            "location": "/ui/basicelements/#element-summary",
            "text": "Element Name  Description  \u00a0      <Text></Text>  Adds basic text.     <Image></Image>  Adds an image.     <ProgressBar></ProgressBar>  Displays a progress bar which can be updated dynamically via script.",
            "title": "Element Summary"
        },
        {
            "location": "/ui/basicelements/#element-details",
            "text": "",
            "title": "Element Details"
        },
        {
            "location": "/ui/basicelements/#text",
            "text": "Adds basic text.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type / Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      text  This can be used to determine the text that appears. It can also be modified externally by the script.  string  (none)    alignment   UpperLeft UpperCenter UpperRight MiddleLeft MiddleCenter MiddleRight LowerLeft LowerCenter LowerRight  MiddleCenter    color    #323232    fontStyle   Normal Bold Italic BoldItalic  Normal    fontSize   float  14    resizeTextForBestFit  Resize text to fit?   false    resizeTextMinSize  Minimum font size  float  10    resizeTextMaxSize  Maximum font size  float  40    horizontalOverflow   Wrap Overflow  Overflow    verticalOverflow   Truncate Overflow  Truncate",
            "title": "Text"
        },
        {
            "location": "/ui/basicelements/#image",
            "text": "Adds an image.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      image  The name of the file in the asset manager (upper right corner of the scripting window in-game).  string  (none)    color    #FFFFFF    type  Image Type  Simple Sliced Filled Tiled  Simple    raycastTarget  Should this image block clicks from passing through it?   true",
            "title": "Image"
        },
        {
            "location": "/ui/basicelements/#progressbar",
            "text": "Displays a progress bar which can be updated dynamically via script.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type / Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      image  Background Image  (path to image)  (none)    color  Background Color   #FFFFFF    fillImage  Fill Image  string  (none)    fillImageColor  Fill Color   #FFFFFF    percentage  Percentage to Display  float  0    showPercentageText  Is the percentage text displayed?   true    percentageTextFormat  Format to use for the percentage text  string  0.00    textColor  Percentage Text Color   #000000    textShadow  Percentage Text Shadow Color   (none)    textOutline  Percentage Text Outline Color   (none)    textAlignment  Percentage Text Alignment  UpperLeft UpperCenter UpperRight MiddleLeft MiddleCenter MiddleRight LowerLeft LowerCenter LowerRight  MiddleCenter",
            "title": "ProgressBar"
        },
        {
            "location": "/ui/inputelements/",
            "text": "All input elements allow for the XML UI to interact with the Lua scripts in the game instance.\n\n\n\n\nTip\n\n\nBe sure to check out the \nUI section of the Lua Scripting API\n for how to receive the input from these element types. With Lua scripting, you can even modify the UI elements!\n\n\n\n\nTargeting Triggers\n \n\n\nWhen using an attribute that triggers scripting, like onValueChanged or onClick, it will always trigger the Global Lua script. For example:\n\n<Button\n \nonClick=\n\"uiClickFunc\"\n>\nClick Me\n</Button>\n\n\n\nThis would trigger a function in the Global Lua script \nfunction\n \nuiClickFunc\n()\n. But if you want to target a function on an Object's script? Place the GUID for the object before the function name, like so:\n\n<Button\n \nonClick=\n\"aaa111/uiClickFunc\"\n>\nClick Me\n</Button>\n\n\n\nNow when the button is clicked, it will still try to activate \nfunction\n \nuiClickFunc\n()\n but it will try to do so on the Object Lua script of the Object with the GUID of \"aaa111\".\n\n\nRemember you can also use the \nId attribute\n to identify which UI element triggered the function.\n\n\n\n\nElement Summary\n \n\n\n\n\n\n\n\n\nElement Name\n\n\nDescription\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n<InputField></InputField>\n\n\nA text input for single or multiple lines. Is able to send the text (during edit and when finished).\n\n\n\n\n\n\n\n\n<Button></Button>\n\n\nA button. Is able to send a trigger event.\n\n\n\n\n\n\n\n\n<Toggle></Toggle>\n\n\nA simple on/off toggle. Is able to send on/off status.\n\n\n\n\n\n\n\n\n<ToggleButton></ToggleButton>\n\n\nA toggle, but styled as a button.\n\n\n\n\n\n\n\n\n<ToggleGroup></ToggleGroup>\n\n\nAllows a group of toggles to act as a radio button, where only 1 of them can be \"checked\" at once.\n\n\n\n\n\n\n\n\n<Slider></Slider>\n\n\nA value slider. Is able to send Value.\n\n\n\n\n\n\n\n\n<Dropdown></Dropdown>\n\n\nA dropdown menu. Is able to send the contents of the selection made in it.\n\n\n\n\n\n\n\n\n\n\n\n\nElement Details\n \n\n\nInputField\n \n\n\nA text input for single or multiple lines. Is able to send the text (during edit and when finished).\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nonValueChanged\n\n\nEach time the text is changed, a Lua function with this name will be triggered.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\nonEndEdit\n\n\nWhen the input box is deselected, a Lua function with this name will be triggered.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\ntext\n\n\nThe string in the text box, if any. Is the value sent to onValueChanged's or onEndEdit's function.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\ninteractable\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\ncolors\n\n\n\n\n\n\n#FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)\n\n\n\n\n\n\nlineType\n\n\n\n\nSingleLine\nMultiLineSubmit\nMultiLineNewLine\n\n\nSingleLine\n\n\n\n\n\n\ncharacterValidation\n\n\n\n\nNone\nInteger\nDecimal\nAlphanumeric\nName\nEmailAddress\n\n\nNone\n\n\n\n\n\n\ncaretBlinkRate\n\n\n\n\nfloat\n\n\n0.85\n\n\n\n\n\n\ncaretWidth\n\n\n\n\nfloat\n\n\n1\n\n\n\n\n\n\ncaretColor\n\n\n\n\n\n\n#323232\n\n\n\n\n\n\nselectionColor\n\n\n\n\n\n\nrgba(0.65,0.8,1,0.75)\n\n\n\n\n\n\nreadOnly\n\n\n\n\n\n\nfalse\n\n\n\n\n\n\ntextColor\n\n\n\n\n\n\n#323232\n\n\n\n\n\n\ncharacterLimit\n\n\n\n\nint\n\n\n0\n (no limit)\n\n\n\n\n\n\n\n\nExample:\n\n<InputField>\nDefault Text\n</InputField>\n\n\n\n\n\n\nButton\n \n\n\nA button. Is able to send a trigger event.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nonClick\n\n\nWhen clicked, a Lua function with this name will be triggered.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\ninteractable\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\ncolors\n\n\n\n\n\n\n#FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)\n\n\n\n\n\n\ntextShadow\n\n\n\n\n\n\n(none)\n\n\n\n\n\n\ntextOutline\n\n\n\n\n\n\n(none)\n\n\n\n\n\n\ntextAlignment\n\n\n\n\nUpperLeft\nUpperCenter\nUpperRight\nMiddleLeft\nMiddleCenter\nMiddleRight\nLowerLeft\nLowerCenter\nLowerRight\n\n\nUpperLeft\n\n\n\n\n\n\nicon\n\n\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\niconWidth\n\n\n\n\nfloat\n\n\n\n\n\n\n\n\niconColor\n\n\n\n\n\n\n\n\n\n\n\n\niconAlignment\n\n\n\n\nLeft\nRight\n\n\nLeft\n\n\n\n\n\n\npadding\n\n\n\n\nfloat float float float\n\n\n0 0 0 0\n\n\n\n\n\n\ntransition\n\n\n\n\nNone\nColorTint\nSpriteSwap\nAnimation\n\n\nColorTint\n\n\n\n\n\n\nhighlightedSprite\n\n\n\n\nstring\n\n\n\n\n\n\n\n\npressedSprite\n\n\n\n\nstring\n\n\n\n\n\n\n\n\ndisabledSprite\n\n\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nExample:\n\n<!-- Standard Button -->\n\n\n<Button>\nButton Text\n</Button>\n\n\n<!-- Button with Icon -->\n\n\n<Button\n \nicon=\n\"SomeName\"\n \n/>\n\n\n<!-- Button with Icon and Text -->\n\n\n<Button\n \nicon=\n\"SomeName\"\n>\nButton With Icon\n</Button>\n\n\n\n\n\n\nToggle\n \n\n\nA simple on/off toggle. Is able to send on/off status.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nonValueChanged\n\n\nWhen toggled, a Lua function with this name will be triggered.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\ninteractable\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\ntextColor\n\n\n\n\n\n\n#000000\n\n\n\n\n\n\ncolors\n\n\n\n\n\n\n#FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)\n\n\n\n\n\n\nisOn\n\n\nIf the toggle is \"on\" or not. Is the value sent to onValueChanged's function.\n\n\n\n\nfalse\n\n\n\n\n\n\n\n\nExample:\n\n<Toggle>\nToggle Text\n</Toggle>\n\n\n<!-- Toggle which is selected by default -->\n\n\n<Toggle\n \nisOn=\n\"true\"\n>\nToggle Text\n</Toggle>\n\n\n\n\n\n\nToggleButton\n \n\n\nA toggle, but styled as a button.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nonValueChanged\n\n\nWhen toggled, a Lua function with this name will be triggered.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\ninteractable\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\ntextColor\n\n\n\n\n\n\n#000000\n\n\n\n\n\n\ncolors\n\n\n\n\n\n\n#FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)\n\n\n\n\n\n\nisOn\n\n\nIf the toggle is \"on\" or not. Is the value sent to onValueChanged's function.\n\n\n\n\nfalse\n\n\n\n\n\n\ntextShadow\n\n\n\n\n\n\n(none)\n\n\n\n\n\n\ntextOutline\n\n\n\n\n\n\n(none)\n\n\n\n\n\n\ntextAlignment\n\n\n\n\nUpperLeft\nUpperCenter\nUpperRight\nMiddleLeft\nMiddleCenter\nMiddleRight\nLowerLeft\nLowerCenter\nLowerRight\n\n\nUpperLeft\n\n\n\n\n\n\nicon\n\n\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\niconWidth\n\n\n\n\nfloat\n\n\n\n\n\n\n\n\niconColor\n\n\n\n\n\n\n\n\n\n\n\n\niconAlignment\n\n\n\n\nLeft\nRight\n\n\nLeft\n\n\n\n\n\n\npadding\n\n\n\n\nfloat float float float\n\n\n0 0 0 0\n\n\n\n\n\n\n\n\n<ToggleButton>\nToggle Button Text\n</Toggle>\n\n\n\n\n\n\n\nToggleGroup\n \n\n\nAllows a group of toggles to act as a radio button, where only 1 of them can be \"checked\" at once. Works with Toggle or ToggleButton\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nallowSwitchOff\n\n\nIf this is set to true, then the user may clear their selection from within the ToggleGroup by clicking on the selected Toggle.\n\n\n\n\nfalse\n\n\n\n\n\n\ntoggleBackgroundImage\n\n\nSets the default background image to use for nested Toggle elements.\n\n\nstring\n\n\n\n\n\n\n\n\ntoggleBackgroundColor\n\n\n\n\n\n\n#FFFFFF\n\n\n\n\n\n\ntoggleSelectedImage\n\n\nSets the default image to use for selected (checked) nested Toggle elements.\n\n\nstring\n\n\n\n\n\n\n\n\ntoggleSelectedColor\n\n\n\n\n\n\n#FFFFFF\n\n\n\n\n\n\n\n\n<ToggleGroup>\n\n    \n<VerticalLayout>\n\n        \n<Toggle>\nToggle A\n</Toggle>\n\n        \n<Toggle>\nToggle B\n</Toggle>\n\n        \n<Toggle>\nToggle C\n</Toggle>\n\n    \n</VerticalLayout>\n\n\n</ToggleGroup>\n\n\n\n<ToggleGroup>\n\n    \n<HorizontalLayout>\n\n        \n<ToggleButton>\nToggleButton A\n</ToggleButton>\n\n        \n<ToggleButton>\nToggleButton B\n</ToggleButton>\n\n        \n<ToggleButton>\nToggleButton C\n</ToggleButton>\n\n    \n</HorizontalLayout>\n\n\n</ToggleGroup>\n\n\n\n\n\n\n\nSlider\n \n\n\nA value slider. Is able to send Value.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nonValueChanged\n\n\nWhen the slider is moved, a Lua function with this name will be triggered. (rapidly)\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\ninteractable\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\ncolors\n\n\n\n\n\n\n#FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)\n\n\n\n\n\n\nminValue\n\n\n\n\nfloat\n\n\n0\n\n\n\n\n\n\nmaxValue\n\n\n\n\nfloat\n\n\n1\n\n\n\n\n\n\nvalue\n\n\nThe value currently selected. Is the value sent to onValueChanged's function.\n\n\nfloat\n\n\n0\n\n\n\n\n\n\nwholeNumbers\n\n\n\n\n\n\nfalse\n\n\n\n\n\n\ndirection\n\n\n\n\nLeftToRight\nRightToLeft\nTopToBottom\nBottomToTop\n\n\nLeftToRight\n\n\n\n\n\n\nbackgroundColor\n\n\n\n\n\n\n(none)\n\n\n\n\n\n\nfillColor\n\n\n\n\n\n\n(none)\n\n\n\n\n\n\nfillImage\n\n\n\n\nstring\n\n\n\n\n\n\n\n\nhandleColor\n\n\n\n\n\n\n(none)\n\n\n\n\n\n\nhandleImage\n\n\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nExample:\n\n<Slider\n \nminValue=\n\"0\"\n \nmaxValue=\n\"1\"\n \nvalue=\n\"0.5\"\n \n/>\n\n\n\n\n\n\nDropdown\n \n\n\nA dropdown menu. Is able to send the contents of the selection made in it.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nonValueChanged\n\n\nWhen an option is selected, a Lua function with this name will be triggered.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\ntext\n\n\nThe string in the text box, if any. Is the value sent to onValueChanged's or onEndEdit's function.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\ninteractable\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\ntextColor\n\n\n\n\n\n\n#000000\n\n\n\n\n\n\nitemBackgroundColors\n\n\n\n\n\n\n#FFFFFF\n\n\n\n\n\n\nitemTextColor\n\n\n\n\n\n\n#000000\n\n\n\n\n\n\ncheckColor\n\n\n\n\n\n\n#000000\n\n\n\n\n\n\ncheckImage\n\n\n\n\nstring\n\n\n\n\n\n\n\n\narrowColor\n\n\n\n\n\n\n#000000\n\n\n\n\n\n\narrowImage\n\n\n\n\nstring\n\n\n\n\n\n\n\n\ndropdownBackgroundColor\n\n\n\n\n\n\n#000000\n\n\n\n\n\n\ndropdownBackgroundImage\n\n\n\n\nstring\n\n\n\n\n\n\n\n\nscrollbarColors\n\n\n\n\n\n\n\n\n\n\n\n\nscrollbarImage\n\n\n\n\nstring\n\n\n\n\n\n\n\n\nitemHeight\n\n\n\n\nfloat\n\n\n\n\n\n\n\n\n\n\nExample:\n\n \n<Dropdown\n \nid=\n\"Selection\"\n \nonValueChanged=\n\"optionSelected\"\n>\n\n    \n<Option\n \nselected=\n\"true\"\n>\nOption 1\n</Option>\n\n    \n<Option>\nOption 2\n</Option>\n\n    \n<Option>\nOption 3\n</Option>\n\n    \n<Option>\nOption 4\n</Option>\n\n\n</Dropdown>\n\n\n\n\n function optionSelected(player, option, id)\n    print(player.steam_name .. \" selected: \" .. option)\n end",
            "title": "Input Elements"
        },
        {
            "location": "/ui/inputelements/#targeting-triggers",
            "text": "When using an attribute that triggers scripting, like onValueChanged or onClick, it will always trigger the Global Lua script. For example: <Button   onClick= \"uiClickFunc\" > Click Me </Button>  \nThis would trigger a function in the Global Lua script  function   uiClickFunc () . But if you want to target a function on an Object's script? Place the GUID for the object before the function name, like so: <Button   onClick= \"aaa111/uiClickFunc\" > Click Me </Button>  \nNow when the button is clicked, it will still try to activate  function   uiClickFunc ()  but it will try to do so on the Object Lua script of the Object with the GUID of \"aaa111\".  Remember you can also use the  Id attribute  to identify which UI element triggered the function.",
            "title": "Targeting Triggers"
        },
        {
            "location": "/ui/inputelements/#element-summary",
            "text": "Element Name  Description  \u00a0      <InputField></InputField>  A text input for single or multiple lines. Is able to send the text (during edit and when finished).     <Button></Button>  A button. Is able to send a trigger event.     <Toggle></Toggle>  A simple on/off toggle. Is able to send on/off status.     <ToggleButton></ToggleButton>  A toggle, but styled as a button.     <ToggleGroup></ToggleGroup>  Allows a group of toggles to act as a radio button, where only 1 of them can be \"checked\" at once.     <Slider></Slider>  A value slider. Is able to send Value.     <Dropdown></Dropdown>  A dropdown menu. Is able to send the contents of the selection made in it.",
            "title": "Element Summary"
        },
        {
            "location": "/ui/inputelements/#element-details",
            "text": "",
            "title": "Element Details"
        },
        {
            "location": "/ui/inputelements/#inputfield",
            "text": "A text input for single or multiple lines. Is able to send the text (during edit and when finished).     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      onValueChanged  Each time the text is changed, a Lua function with this name will be triggered.  string  (none)    onEndEdit  When the input box is deselected, a Lua function with this name will be triggered.  string  (none)    text  The string in the text box, if any. Is the value sent to onValueChanged's or onEndEdit's function.  string  (none)    interactable    true    colors    #FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)    lineType   SingleLine MultiLineSubmit MultiLineNewLine  SingleLine    characterValidation   None Integer Decimal Alphanumeric Name EmailAddress  None    caretBlinkRate   float  0.85    caretWidth   float  1    caretColor    #323232    selectionColor    rgba(0.65,0.8,1,0.75)    readOnly    false    textColor    #323232    characterLimit   int  0  (no limit)     Example: <InputField> Default Text </InputField>",
            "title": "InputField"
        },
        {
            "location": "/ui/inputelements/#button",
            "text": "A button. Is able to send a trigger event.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      onClick  When clicked, a Lua function with this name will be triggered.  string  (none)    interactable    true    colors    #FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)    textShadow    (none)    textOutline    (none)    textAlignment   UpperLeft UpperCenter UpperRight MiddleLeft MiddleCenter MiddleRight LowerLeft LowerCenter LowerRight  UpperLeft    icon   string  (none)    iconWidth   float     iconColor       iconAlignment   Left Right  Left    padding   float float float float  0 0 0 0    transition   None ColorTint SpriteSwap Animation  ColorTint    highlightedSprite   string     pressedSprite   string     disabledSprite   string      Example: <!-- Standard Button -->  <Button> Button Text </Button>  <!-- Button with Icon -->  <Button   icon= \"SomeName\"   />  <!-- Button with Icon and Text -->  <Button   icon= \"SomeName\" > Button With Icon </Button>",
            "title": "Button"
        },
        {
            "location": "/ui/inputelements/#toggle",
            "text": "A simple on/off toggle. Is able to send on/off status.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      onValueChanged  When toggled, a Lua function with this name will be triggered.  string  (none)    interactable    true    textColor    #000000    colors    #FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)    isOn  If the toggle is \"on\" or not. Is the value sent to onValueChanged's function.   false     Example: <Toggle> Toggle Text </Toggle>  <!-- Toggle which is selected by default -->  <Toggle   isOn= \"true\" > Toggle Text </Toggle>",
            "title": "Toggle"
        },
        {
            "location": "/ui/inputelements/#togglebutton",
            "text": "A toggle, but styled as a button.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      onValueChanged  When toggled, a Lua function with this name will be triggered.  string  (none)    interactable    true    textColor    #000000    colors    #FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)    isOn  If the toggle is \"on\" or not. Is the value sent to onValueChanged's function.   false    textShadow    (none)    textOutline    (none)    textAlignment   UpperLeft UpperCenter UpperRight MiddleLeft MiddleCenter MiddleRight LowerLeft LowerCenter LowerRight  UpperLeft    icon   string  (none)    iconWidth   float     iconColor       iconAlignment   Left Right  Left    padding   float float float float  0 0 0 0     <ToggleButton> Toggle Button Text </Toggle>",
            "title": "ToggleButton"
        },
        {
            "location": "/ui/inputelements/#togglegroup",
            "text": "Allows a group of toggles to act as a radio button, where only 1 of them can be \"checked\" at once. Works with Toggle or ToggleButton     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      allowSwitchOff  If this is set to true, then the user may clear their selection from within the ToggleGroup by clicking on the selected Toggle.   false    toggleBackgroundImage  Sets the default background image to use for nested Toggle elements.  string     toggleBackgroundColor    #FFFFFF    toggleSelectedImage  Sets the default image to use for selected (checked) nested Toggle elements.  string     toggleSelectedColor    #FFFFFF     <ToggleGroup> \n     <VerticalLayout> \n         <Toggle> Toggle A </Toggle> \n         <Toggle> Toggle B </Toggle> \n         <Toggle> Toggle C </Toggle> \n     </VerticalLayout>  </ToggleGroup>  <ToggleGroup> \n     <HorizontalLayout> \n         <ToggleButton> ToggleButton A </ToggleButton> \n         <ToggleButton> ToggleButton B </ToggleButton> \n         <ToggleButton> ToggleButton C </ToggleButton> \n     </HorizontalLayout>  </ToggleGroup>",
            "title": "ToggleGroup"
        },
        {
            "location": "/ui/inputelements/#slider",
            "text": "A value slider. Is able to send Value.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      onValueChanged  When the slider is moved, a Lua function with this name will be triggered. (rapidly)  string  (none)    interactable    true    colors    #FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)    minValue   float  0    maxValue   float  1    value  The value currently selected. Is the value sent to onValueChanged's function.  float  0    wholeNumbers    false    direction   LeftToRight RightToLeft TopToBottom BottomToTop  LeftToRight    backgroundColor    (none)    fillColor    (none)    fillImage   string     handleColor    (none)    handleImage   string      Example: <Slider   minValue= \"0\"   maxValue= \"1\"   value= \"0.5\"   />",
            "title": "Slider"
        },
        {
            "location": "/ui/inputelements/#dropdown",
            "text": "A dropdown menu. Is able to send the contents of the selection made in it.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      onValueChanged  When an option is selected, a Lua function with this name will be triggered.  string  (none)    text  The string in the text box, if any. Is the value sent to onValueChanged's or onEndEdit's function.  string  (none)    interactable    true    textColor    #000000    itemBackgroundColors    #FFFFFF    itemTextColor    #000000    checkColor    #000000    checkImage   string     arrowColor    #000000    arrowImage   string     dropdownBackgroundColor    #000000    dropdownBackgroundImage   string     scrollbarColors       scrollbarImage   string     itemHeight   float      Example:   <Dropdown   id= \"Selection\"   onValueChanged= \"optionSelected\" > \n     <Option   selected= \"true\" > Option 1 </Option> \n     <Option> Option 2 </Option> \n     <Option> Option 3 </Option> \n     <Option> Option 4 </Option>  </Dropdown>    function optionSelected(player, option, id)\n    print(player.steam_name .. \" selected: \" .. option)\n end",
            "title": "Dropdown"
        },
        {
            "location": "/ui/layoutgrouping/",
            "text": "By nesting elements within layouts/groupings, you are able to easily group elements together in-game. It allows for adjusting/moving them together, uniform padding and additional visual flair possibilities.\n\n\nEach layout element has its own attributes specific to its type. Additionally, elements within a layout are subject to common \ncommon layout element attributes\n.\n\n\nElement Summary\n \n\n\nLayout Summary\n \n\n\n\n\n\n\n\n\nElement Name\n\n\nDescription\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n<Panel></Panel>\n\n\nA \"window\" in which elements can be confined.\n\n\n\n\n\n\n\n\n<HorizontalLayout></HorizontalLayout>\n\n\nA horizontal row of elements.\n\n\n\n\n\n\n\n\n<VerticalLayout></VerticalLayout>\n\n\nA vertical column of elements.\n\n\n\n\n\n\n\n\n<GridLayout></GridLayout>\n\n\nA grid of elements.\n\n\n\n\n\n\n\n\n<TableLayout></TableLayout>\n\n\nA layout element based on HTML tables, allowing you to specify the position of elements in specific rows/columns.\n\n\n\n\n\n\n\n\n<Row></Row>\n\n\nA row within a TableLayout.\n\n\n\n\n\n\n\n\n<Cell></Cell>\n\n\nA cell within a TableLayout.\n\n\n\n\n\n\n\n\n\n\nScroll View Summary\n \n\n\n\n\n\n\n\n\nElement Name\n\n\nDescription\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n<HorizontalScrollView></HorizontalScrollView>\n\n\nA scrollable horizontal row of elements.\n\n\n\n\n\n\n\n\n<VerticalScrollView></VerticalScrollView>\n\n\nA scrollable vertical column of elements.\n\n\n\n\n\n\n\n\n\n\n\n\nLayout Element Details\n \n\n\nLayout Details\n \n\n\nPanel\n \n\n\nA \"window\" in which elements can be confined.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\npadding\n\n\nSpecifies the padding for this panel. Please note that if padding is specified, the panel will function as a LayoutGroup (which it does not do by default).\n\n\nfloat(left) float(right) float(top) float(bottom)\n\n\n(none)\n\n\n\n\n\n\n\n\n<Panel>\n\n    \n<Text>\nText contained within Panel\n</Text>\n\n\n</Panel>\n\n\n\n\n\n\n\nHorizontalLayout\n \n\n\nA horizontal row of elements.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\npadding\n\n\n\n\nfloat(left) float(right) float(top) float(bottom)\n\n\n0 0 0 0\n\n\n\n\n\n\nspacing\n\n\nSpacing between child elements.\n\n\nfloat\n\n\n0\n\n\n\n\n\n\nchildAlignment\n\n\n\n\nUpperLeft\nUpperCenter\nUpperRight\nMiddleLeft\nMiddleCenter\nMiddleRight\nLowerLeft\nLowerCenter\nLowerRight\n\n\nUpperLeft\n\n\n\n\n\n\nchildForceExpandWidth\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\nchildForceExpandHeight\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\n\n\n<HorizontalLayout>\n\n    \n<Button>\nButton One\n</Button>\n\n    \n<Button>\nButton Two\n</Button>\n\n    \n<Button>\nButton Three\n</Button>\n\n\n</HorizontalLayout>\n\n\n\n\n\n\n\nVerticalLayout\n \n\n\nA vertical column of elements.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\npadding\n\n\n\n\nfloat(left) float(right) float(top) float(bottom)\n\n\n0 0 0 0\n\n\n\n\n\n\nspacing\n\n\nSpacing between child elements.\n\n\nfloat\n\n\n0\n\n\n\n\n\n\nchildAlignment\n\n\n\n\nUpperLeft\nUpperCenter\nUpperRight\nMiddleLeft\nMiddleCenter\nMiddleRight\nLowerLeft\nLowerCenter\nLowerRight\n\n\nUpperLeft\n\n\n\n\n\n\nchildForceExpandWidth\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\nchildForceExpandHeight\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\n\n\n<VerticalLayout>\n\n    \n<Button>\nButton One\n</Button>\n\n    \n<Button>\nButton Two\n</Button>\n\n    \n<Button>\nButton Three\n</Button>\n\n\n</VerticalLayout>\n\n\n\n\n\n\n\nGridLayout\n \n\n\nA grid of elements.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\npadding\n\n\n\n\nfloat(left) float(right) float(top) float(bottom)\n\n\n0 0 0 0\n\n\n\n\n\n\nspacing\n\n\nSpacing between child elements\n\n\nfloat(x) float(y)\n\n\n0 0\n\n\n\n\n\n\ncellSize\n\n\n\n\nfloat(x) float(y)\n\n\n100 100\n\n\n\n\n\n\nstartCorner\n\n\n\n\nUpperLeft\nUpperRight\nLowerLeft\nLowerRight\n\n\nUpperLeft\n\n\n\n\n\n\nstartAxis\n\n\n\n\nHorizontal\nVertical\n\n\nHorizontal\n\n\n\n\n\n\nchildAlignment\n\n\n\n\nUpperLeft\nUpperCenter\nUpperRight\nMiddleLeft\nMiddleCenter\nMiddleRight\nLowerLeft\nLowerCenter\nLowerRight\n\n\nUpperLeft\n\n\n\n\n\n\nconstraint\n\n\n\n\nFlexible\nFixedColumnCount\nFixedRowCount\n\n\nFlexible\n\n\n\n\n\n\nconstraintCount\n\n\n\n\ninteger\n\n\n2\n\n\n\n\n\n\n\n\n<GridLayout>\n\n    \n<Button>\nButton One\n</Button>\n\n    \n<Button>\nButton Two\n</Button>\n\n    \n<Button>\nButton Three\n</Button>\n\n\n</GridLayout>\n\n\n\n\n\n\n\nTableLayout\n \n\n\nA layout element based on HTML tables, allowing you to specify the position of elements in specific rows/columns.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\npadding\n\n\n\n\nfloat(left) float(right) float(top) float(bottom)\n\n\n0 0 0 0\n\n\n\n\n\n\ncellSpacing\n\n\nSpacing between each cell.\n\n\nfloat\n\n\n0\n\n\n\n\n\n\ncolumnWidths\n\n\n(Optional) Explicitly set the width of each column. Use a value of 0 to auto-size a specific column.\n\n\nfloat list - e.g. '32 0 0 32'\n\n\n(none)\n\n\n\n\n\n\nautomaticallyAddColumns\n\n\nIf more cells are added to a row than are accounted for by columnWidths, should this TableLayout automatically add one or more new auto-sized entries (0) to columnWidths?\n\n\n\n\ntrue\n\n\n\n\n\n\nautomaticallyRemoveEmptyColumns\n\n\nIf there are more entries in columnWidths than there are cells in any row, should this TableLayout automatically remove entries from columnWidths until their are no 'empty' columns?\n\n\n\n\ntrue\n\n\n\n\n\n\nautoCalculateHeight\n\n\nIf set to true, then the height of this TableLayout will automatically be calculated as the sum of each rows preferredHeight value. This option cannot be used without explicitly sized rows.\n\n\n\n\nfalse\n\n\n\n\n\n\nuseGlobalCellPadding\n\n\nIf set to true, then all cells will use this TableLayout's cellPadding value.\n\n\n\n\ntrue\n\n\n\n\n\n\ncellPadding\n\n\nPadding for each cell.\n\n\nfloat(left) float(right) float(top) float(bottom)\n\n\n0 0 0 0\n\n\n\n\n\n\ncellBackgroundImage\n\n\nImage to use as the background for each cell.\n\n\nstring\n\n\n\n\n\n\n\n\ncellBackgroundColor\n\n\nColor for each cells background.\n\n\n\n\nrgba(1,1,1,0.4)\n\n\n\n\n\n\nrowBackgroundImage\n\n\nImage to use as the background for each row.\n\n\nstring\n\n\n\n\n\n\n\n\nrowBackgroundColor\n\n\nColor to use for each rows background.\n\n\n\n\nclear\n\n\n\n\n\n\n\n\n<TableLayout>\n\n    \n<!-- Row 1 -->\n\n    \n<Row>\n\n        \n<Cell><Button>\nButton One\n</Button></Cell>\n\n        \n<Cell><Button>\nButton Two\n</Button></Cell>\n\n    \n</Row>\n\n    \n<!-- Row 2 -->\n\n    \n<Row>\n\n        \n<Cell><Button>\nButton One\n</Button></Cell>\n\n        \n<Cell><Button>\nButton Three\n</Button></Cell>\n\n    \n</Row>\n\n\n</TableLayout>\n\n\n\n\n\nRow\n \n\n\nA row within a TableLayout.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\npreferredHeight\n\n\nSets the height for this row. Use a value of '0' to specify that this row should be auto-sized.\n\n\nfloat\n\n\n0\n\n\n\n\n\n\ndontUseTableRowBackground\n\n\nIf set to true, then this row will ignore the tables' \nrowBackgroundImage\n and \nrowBackgroundColor\n values, allowing you to override those values for this row.\n\n\n\n\nfalse\n\n\n\n\n\n\n\n\nCell\n \n\n\nA cell within a TableLayout.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\ncolumnSpan\n\n\n__\n\n\nint\n\n\n1\n\n\n\n\n\n\ndontUseTableCellBackground\n\n\nIf set to true, then this cell will ignore the tables' \ncellBackgroundImage\n and values, allowing you to override those values for this cell.\n\n\n\n\nfalse\n\n\n\n\n\n\noverrideGlobalCellPadding\n\n\nIf set to true, then this cell will ignore the tables' \ncellPadding\n value, allowing you to set unique cell padding for this cell.\n\n\n\n\nfalse\n\n\n\n\n\n\npadding\n\n\nPadding values to use for this cell if \noverrideGlobalCellPadding\n is set to true.\n\n\nfloat(left) float(right) float(top) float(bottom)\n\n\n0 0 0 0\n\n\n\n\n\n\n\n\n\n\nScroll View Details\n \n\n\nHorizontalScrollView\n \n\n\nA scrollable horizontal row of elements. This is an \ninput element\n.\n\n\nA layout element such as a Panel, HorizontalLayout, GridLayout, or TableLayout can be used to position child elements within the Scroll View.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nonValueChanged\n\n\nWhen a selection is made, its name is sent to a function with this name.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\nhorizontal\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\nvertical\n\n\n\n\n\n\nfalse\n\n\n\n\n\n\nmovementType\n\n\n\n\nUnrestricted\nElastic\nClamped\n\n\nClamped\n\n\n\n\n\n\nelasticity\n\n\n\n\nfloat\n\n\n0.1\n\n\n\n\n\n\ninertia\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\ndecelerationRate\n\n\n\n\nfloat\n\n\n0.135\n\n\n\n\n\n\nscrollSensitivity\n\n\n\n\nfloat\n\n\n1\n\n\n\n\n\n\nhorizontalScrollbarVisibility\n\n\n\n\nPermanent\nAutoHide\nAutoHideAndExpandViewport\n\n\nAutoHide\n\n\n\n\n\n\nverticalScrollbarVisibility\n\n\n\n\nPermanent\nAutoHide\nAutoHideAndExpandViewport\n\n\n(none)\n\n\n\n\n\n\nnoScrollbars\n\n\nIf set to true, then this scroll view will have no visible scrollbars.\n\n\n\n\nfalse\n\n\n\n\n\n\nscrollbarBackgroundColor\n\n\n\n\n\n\n#FFFFFF\n\n\n\n\n\n\nscrollbarColors\n\n\n\n\n\n\n#FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)\n\n\n\n\n\n\nscrollbarImage\n\n\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n<HorizontalScrollView>\n\n    \n<HorizontalLayout>\n\n        \n<Panel>\n\n            \n<Text>\n1\n</Text>\n\n        \n</Panel>\n\n        \n<Panel>\n\n            \n<Text>\n2\n</Text>\n\n        \n</Panel>\n\n        \n<Panel>\n\n            \n<Text>\n3\n</Text>\n\n        \n</Panel>\n\n        \n<Panel>\n\n            \n<Text>\n4\n</Text>\n\n        \n</Panel>\n\n    \n</HorizontalLayout>\n\n\n</HorizontalScrollView>\n\n\n\n\n\n\n\nVerticalScrollView\n \n\n\nA scrollable vertical column of elements. This is an \ninput element\n.\n\n\nA layout element such as a Panel, HorizontalLayout, GridLayout, or TableLayout can be used to position child elements within the Scroll View.\n\n\n\n\n\n\n\n\nAttribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDescription\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nType\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDefault\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\nonValueChanged\n\n\nWhen a selection is made, its name is sent to a function with this name.\n\n\nstring\n\n\n(none)\n\n\n\n\n\n\nhorizontal\n\n\n\n\n\n\nfalse\n\n\n\n\n\n\nvertical\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\nmovementType\n\n\n\n\nUnrestricted\nElastic\nClamped\n\n\nClamped\n\n\n\n\n\n\nelasticity\n\n\n\n\nfloat\n\n\n0.1\n\n\n\n\n\n\ninertia\n\n\n\n\n\n\ntrue\n\n\n\n\n\n\ndecelerationRate\n\n\n\n\nfloat\n\n\n0.135\n\n\n\n\n\n\nscrollSensitivity\n\n\n\n\nfloat\n\n\n1\n\n\n\n\n\n\nhorizontalScrollbarVisibility\n\n\n\n\nPermanent\nAutoHide\nAutoHideAndExpandViewport\n\n\n(none)\n\n\n\n\n\n\nverticalScrollbarVisibility\n\n\n\n\nPermanent\nAutoHide\nAutoHideAndExpandViewport\n\n\nAutoHide\n\n\n\n\n\n\nnoScrollbars\n\n\nIf set to true, then this scroll view will have no visible scrollbars.\n\n\n\n\nfalse\n\n\n\n\n\n\nscrollbarBackgroundColor\n\n\n\n\n\n\n#FFFFFF\n\n\n\n\n\n\nscrollbarColors\n\n\n\n\n\n\n#FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)\n\n\n\n\n\n\nscrollbarImage\n\n\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n<VerticalScrollView>\n\n    \n<VerticalLayout>\n\n        \n<Panel>\n\n            \n<Text>\n1\n</Text>\n\n        \n</Panel>\n\n        \n<Panel>\n\n            \n<Text>\n2\n</Text>\n\n        \n</Panel>\n\n        \n<Panel>\n\n            \n<Text>\n3\n</Text>\n\n        \n</Panel>\n\n        \n<Panel>\n\n            \n<Text>\n4\n</Text>\n\n        \n</Panel>\n\n    \n</VerticalLayout>\n\n\n</VerticalScrollView>",
            "title": "Layout/Grouping"
        },
        {
            "location": "/ui/layoutgrouping/#element-summary",
            "text": "",
            "title": "Element Summary"
        },
        {
            "location": "/ui/layoutgrouping/#layout-summary",
            "text": "Element Name  Description  \u00a0      <Panel></Panel>  A \"window\" in which elements can be confined.     <HorizontalLayout></HorizontalLayout>  A horizontal row of elements.     <VerticalLayout></VerticalLayout>  A vertical column of elements.     <GridLayout></GridLayout>  A grid of elements.     <TableLayout></TableLayout>  A layout element based on HTML tables, allowing you to specify the position of elements in specific rows/columns.     <Row></Row>  A row within a TableLayout.     <Cell></Cell>  A cell within a TableLayout.",
            "title": "Layout Summary"
        },
        {
            "location": "/ui/layoutgrouping/#scroll-view-summary",
            "text": "Element Name  Description  \u00a0      <HorizontalScrollView></HorizontalScrollView>  A scrollable horizontal row of elements.     <VerticalScrollView></VerticalScrollView>  A scrollable vertical column of elements.",
            "title": "Scroll View Summary"
        },
        {
            "location": "/ui/layoutgrouping/#layout-element-details",
            "text": "",
            "title": "Layout Element Details"
        },
        {
            "location": "/ui/layoutgrouping/#layout-details",
            "text": "",
            "title": "Layout Details"
        },
        {
            "location": "/ui/layoutgrouping/#panel",
            "text": "A \"window\" in which elements can be confined.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      padding  Specifies the padding for this panel. Please note that if padding is specified, the panel will function as a LayoutGroup (which it does not do by default).  float(left) float(right) float(top) float(bottom)  (none)     <Panel> \n     <Text> Text contained within Panel </Text>  </Panel>",
            "title": "Panel"
        },
        {
            "location": "/ui/layoutgrouping/#horizontallayout",
            "text": "A horizontal row of elements.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      padding   float(left) float(right) float(top) float(bottom)  0 0 0 0    spacing  Spacing between child elements.  float  0    childAlignment   UpperLeft UpperCenter UpperRight MiddleLeft MiddleCenter MiddleRight LowerLeft LowerCenter LowerRight  UpperLeft    childForceExpandWidth    true    childForceExpandHeight    true     <HorizontalLayout> \n     <Button> Button One </Button> \n     <Button> Button Two </Button> \n     <Button> Button Three </Button>  </HorizontalLayout>",
            "title": "HorizontalLayout"
        },
        {
            "location": "/ui/layoutgrouping/#verticallayout",
            "text": "A vertical column of elements.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      padding   float(left) float(right) float(top) float(bottom)  0 0 0 0    spacing  Spacing between child elements.  float  0    childAlignment   UpperLeft UpperCenter UpperRight MiddleLeft MiddleCenter MiddleRight LowerLeft LowerCenter LowerRight  UpperLeft    childForceExpandWidth    true    childForceExpandHeight    true     <VerticalLayout> \n     <Button> Button One </Button> \n     <Button> Button Two </Button> \n     <Button> Button Three </Button>  </VerticalLayout>",
            "title": "VerticalLayout"
        },
        {
            "location": "/ui/layoutgrouping/#gridlayout",
            "text": "A grid of elements.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      padding   float(left) float(right) float(top) float(bottom)  0 0 0 0    spacing  Spacing between child elements  float(x) float(y)  0 0    cellSize   float(x) float(y)  100 100    startCorner   UpperLeft UpperRight LowerLeft LowerRight  UpperLeft    startAxis   Horizontal Vertical  Horizontal    childAlignment   UpperLeft UpperCenter UpperRight MiddleLeft MiddleCenter MiddleRight LowerLeft LowerCenter LowerRight  UpperLeft    constraint   Flexible FixedColumnCount FixedRowCount  Flexible    constraintCount   integer  2     <GridLayout> \n     <Button> Button One </Button> \n     <Button> Button Two </Button> \n     <Button> Button Three </Button>  </GridLayout>",
            "title": "GridLayout"
        },
        {
            "location": "/ui/layoutgrouping/#tablelayout",
            "text": "A layout element based on HTML tables, allowing you to specify the position of elements in specific rows/columns.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      padding   float(left) float(right) float(top) float(bottom)  0 0 0 0    cellSpacing  Spacing between each cell.  float  0    columnWidths  (Optional) Explicitly set the width of each column. Use a value of 0 to auto-size a specific column.  float list - e.g. '32 0 0 32'  (none)    automaticallyAddColumns  If more cells are added to a row than are accounted for by columnWidths, should this TableLayout automatically add one or more new auto-sized entries (0) to columnWidths?   true    automaticallyRemoveEmptyColumns  If there are more entries in columnWidths than there are cells in any row, should this TableLayout automatically remove entries from columnWidths until their are no 'empty' columns?   true    autoCalculateHeight  If set to true, then the height of this TableLayout will automatically be calculated as the sum of each rows preferredHeight value. This option cannot be used without explicitly sized rows.   false    useGlobalCellPadding  If set to true, then all cells will use this TableLayout's cellPadding value.   true    cellPadding  Padding for each cell.  float(left) float(right) float(top) float(bottom)  0 0 0 0    cellBackgroundImage  Image to use as the background for each cell.  string     cellBackgroundColor  Color for each cells background.   rgba(1,1,1,0.4)    rowBackgroundImage  Image to use as the background for each row.  string     rowBackgroundColor  Color to use for each rows background.   clear     <TableLayout> \n     <!-- Row 1 --> \n     <Row> \n         <Cell><Button> Button One </Button></Cell> \n         <Cell><Button> Button Two </Button></Cell> \n     </Row> \n     <!-- Row 2 --> \n     <Row> \n         <Cell><Button> Button One </Button></Cell> \n         <Cell><Button> Button Three </Button></Cell> \n     </Row>  </TableLayout>",
            "title": "TableLayout"
        },
        {
            "location": "/ui/layoutgrouping/#row",
            "text": "A row within a TableLayout.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      preferredHeight  Sets the height for this row. Use a value of '0' to specify that this row should be auto-sized.  float  0    dontUseTableRowBackground  If set to true, then this row will ignore the tables'  rowBackgroundImage  and  rowBackgroundColor  values, allowing you to override those values for this row.   false",
            "title": "Row"
        },
        {
            "location": "/ui/layoutgrouping/#cell",
            "text": "A cell within a TableLayout.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      columnSpan  __  int  1    dontUseTableCellBackground  If set to true, then this cell will ignore the tables'  cellBackgroundImage  and values, allowing you to override those values for this cell.   false    overrideGlobalCellPadding  If set to true, then this cell will ignore the tables'  cellPadding  value, allowing you to set unique cell padding for this cell.   false    padding  Padding values to use for this cell if  overrideGlobalCellPadding  is set to true.  float(left) float(right) float(top) float(bottom)  0 0 0 0",
            "title": "Cell"
        },
        {
            "location": "/ui/layoutgrouping/#scroll-view-details",
            "text": "",
            "title": "Scroll View Details"
        },
        {
            "location": "/ui/layoutgrouping/#horizontalscrollview",
            "text": "A scrollable horizontal row of elements. This is an  input element .  A layout element such as a Panel, HorizontalLayout, GridLayout, or TableLayout can be used to position child elements within the Scroll View.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      onValueChanged  When a selection is made, its name is sent to a function with this name.  string  (none)    horizontal    true    vertical    false    movementType   Unrestricted Elastic Clamped  Clamped    elasticity   float  0.1    inertia    true    decelerationRate   float  0.135    scrollSensitivity   float  1    horizontalScrollbarVisibility   Permanent AutoHide AutoHideAndExpandViewport  AutoHide    verticalScrollbarVisibility   Permanent AutoHide AutoHideAndExpandViewport  (none)    noScrollbars  If set to true, then this scroll view will have no visible scrollbars.   false    scrollbarBackgroundColor    #FFFFFF    scrollbarColors    #FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)    scrollbarImage   string      <HorizontalScrollView> \n     <HorizontalLayout> \n         <Panel> \n             <Text> 1 </Text> \n         </Panel> \n         <Panel> \n             <Text> 2 </Text> \n         </Panel> \n         <Panel> \n             <Text> 3 </Text> \n         </Panel> \n         <Panel> \n             <Text> 4 </Text> \n         </Panel> \n     </HorizontalLayout>  </HorizontalScrollView>",
            "title": "HorizontalScrollView"
        },
        {
            "location": "/ui/layoutgrouping/#verticalscrollview",
            "text": "A scrollable vertical column of elements. This is an  input element .  A layout element such as a Panel, HorizontalLayout, GridLayout, or TableLayout can be used to position child elements within the Scroll View.     Attribute Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Type\u00a0/\u00a0Options\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  Default\u00a0Value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      onValueChanged  When a selection is made, its name is sent to a function with this name.  string  (none)    horizontal    false    vertical    true    movementType   Unrestricted Elastic Clamped  Clamped    elasticity   float  0.1    inertia    true    decelerationRate   float  0.135    scrollSensitivity   float  1    horizontalScrollbarVisibility   Permanent AutoHide AutoHideAndExpandViewport  (none)    verticalScrollbarVisibility   Permanent AutoHide AutoHideAndExpandViewport  AutoHide    noScrollbars  If set to true, then this scroll view will have no visible scrollbars.   false    scrollbarBackgroundColor    #FFFFFF    scrollbarColors    #FFFFFF|#FFFFFF|#C8C8C8|rgba(0.78,0.78,0.78,0.5)    scrollbarImage   string      <VerticalScrollView> \n     <VerticalLayout> \n         <Panel> \n             <Text> 1 </Text> \n         </Panel> \n         <Panel> \n             <Text> 2 </Text> \n         </Panel> \n         <Panel> \n             <Text> 3 </Text> \n         </Panel> \n         <Panel> \n             <Text> 4 </Text> \n         </Panel> \n     </VerticalLayout>  </VerticalScrollView>",
            "title": "VerticalScrollView"
        },
        {
            "location": "/ui/defaults/",
            "text": "The Default element allows you to set default values for UI elements. Primarily this will be used to set styles and the like, but there is no restriction on what default values you can set.\n\n\nDefaults can be applied to all instances of a particular tag type, or only those of a particular class (as set by the class attribute). Please note that elements may use more than one class (separated by spaces).\n\n\nAs with its HTML counterpart (CSS), XmlLayout Defaults are applied in a cascading fashion. This means that an element will always use the most recent value for an attribute - for example, if an element implements a class, it will use the attribute values defined by that class except when the element itself also defines those attributes (attributes defined on the element will always take precedence).\n\n\nDefaults tags can be placed anywhere in the Xml document, but will only apply to elements after it.\n\n\nExample:\n\n\n<Defaults>\n\n    \n<!-- Set the default color and font size for all Text elements -->\n\n    \n<Text\n \ncolor=\n\"#DDDDDD\"\n \nfontSize=\n\"16\"\n \n/>\n\n\n    \n<!-- Set the default color for all Text elements using the 'darker' class -->\n\n    \n<Text\n \nclass=\n\"darker\"\n \ncolor=\n\"#AAAAAA\"\n \n/>\n    \n\n</Defaults>\n\n\n\n<!-- This text's color will be \"#DDDDDD\" and its font size will be \"16\" -->\n\n\n<Text>\nText\n</Text>\n\n\n\n<!-- This text's color will be \"#AAAAAA\" and its font size will be \"16\" -->\n\n\n<Text\n \nclass=\n\"darker\"\n>\nText\n</Text>\n\n\n\n<!-- Set the default border and text color for all tooltips -->\n\n\n<Tooltip\n \ntooltipBorderColor=\n\"rgb(1,1,1)\"\n \ntooltipTextColor=\n\"rgb(1,1,1)\"\n \n/>",
            "title": "Defaults"
        }
    ]
}